<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Httpie]]></title>
    <url>%2F2018%2F02%2F08%2Fhttpie%2F</url>
    <content type="text"><![CDATA[关于 HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。 其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。 这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。 HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。 特点 直观的语法 格式化和色彩化的终端输出 内置 JSON 支持 支持上传表单和文件 HTTPS、代理和认证 任意请求数据 自定义头部 持久性会话 类 Wget 下载 支持 Python 2.6, 2.7 和 3.x 支持 Linux, Mac OS X 和 Windows 插件 文档 测试覆盖率 安装pip install httpie 参考 HTTPie 工具使用入门 官方文档]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>httpie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Byobu "多窗口"的Terminal]]></title>
    <url>%2F2018%2F02%2F07%2Fbyobu%2F</url>
    <content type="text"><![CDATA[测试密码工具，密码是： lim ]]></content>
      <categories>
        <category>工具集</category>
      </categories>
      <tags>
        <tag>byobu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django 学习笔记—基础01]]></title>
    <url>%2F2018%2F01%2F27%2FDjangoLearning1%2F</url>
    <content type="text"><![CDATA[参考 Django 1.8.2中文文档 Django 2.0 官方文档 Django 中文教学 自强学院 所需指令用指令创建项目django-admin startproject project 一般不用，直接用pycharm创建就行 运行应用python manage.py runserver 8080 运行后，才能根据所生成的网址，访问服务器，后面填写服务器的端口 也可以不写端口，如果没写端口，默认使用8000端口 创建一个应用python manage.py startapp djangoAppName(这里填写所需创建应用的名字)或django-admin startapp djangoAppName可以直接在apps目录下创建 有点类似于模块的意思，分模块开发项目，一个模块对应了view, model等内容，需要创建新的模块的时候，需要使用这个指令。 生成迁移（makemigrations）创建迁移文件 python manage.py makemigrations 创建之后，在所对应的migrations文件夹下面会多出一个.py文件 如果使用的是Django2.0 并且数据库model中使用了ForeignKey，需要在后面添加 on_delete 关键字 在使用这个命令的时候，需要在settings.py文件中的INSTALLED_APPS注册应用信息 执行迁移根据迁移文件，形成sql语句，创建对应的表 python manage.py migrate 创建超级管理员python manage.py createsuperuser 接下来按照提示填写用户名、邮箱、密码 后台URL: 在网址后面添加admin 显示所有的指令python manage.py 会显示所有的指令，并且在后面输入help name就可以查看对应指令的具体信息 Model创建 在对应的模版项目下的models.py文件下创建数据库模型文件 创建模型的时候不用创建主键id，系统会自动生成这个主键的列 Models.py1234567891011121314151617181920212223242526272829303132333435from django.db import modelsclass ModelName1(models.Model): title = models.CharField(max_length=20) date = models.DateTimeField() def __repr__(self): return 'title name is &#123;&#125;, crate at &#123;&#125;'.format(self.title, self.date) def __str__(self): return self.titleclass ModelName2(models.Model): hname = models.CharField(max_length=10) hgender = models.BooleanField() content = models.CharField(max_length=1000) modelName1ForeignKey = models.ForeignKey(ModelName1, on_delete=models.CASCADE) #外键 def __str__(self): return self.name def gender(self): if self.hgender: return '男' else: return '女' gender.short_description = '性别' def name(self): return self.hname name.short_description = '名字' Django2.0 ForeignKey 变化在创建外键的时候遇到报错： TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39; 查询一番后发现Django2.0版本创建外键时需要在后面加上on_delete 12345class Car(models.Model): manufacturer = models.ForeignKey( 'Manufacturer', on_delete=models.CASCADE, ) 站点管理界面本地化修改settings.py 12LANGUAGE_CODE = 'zh-Hans'TIME_ZONE = 'Asia/Shanghai' 修改语言和时区 向admin中注册应用在 booktest/admin.py 文件，注册模型 123from django.contrib import adminfrom models import ModelNameadmin.site.register(ModelName) 导入model 类 在admin中注册该模型类 admin.site.register(ModelName) 自定义管理页面 Django提供了admin.ModelAdmin类 通过定义ModelAdmin的子类，来定义模型在Admin界面的显示方式 1234567891011class ModelNameAdmin(admin.ModelAdmin): list_display = ['id', 'title', 'date'] list_filter = ['title'] search_fields = ['title'] list_per_page = 10 fieldsets = [ ('base',&#123;'fields':['title']&#125;), ('super',&#123;'fields':['date']&#125;) ]admin.site.register(BookInfo, BookInfoAdmin) 列表页属性list_display 显示字段，可以点击列头进行排序 1list_display = ['pk', 'title', 'date'] 列表里面填写的是字段的列表名字，表示要在后台页面中显示什么列表字段，先后顺序决定显示顺序 list_filter 过滤字段，过滤框会出现在右侧 1list_filter = ['title'] search_fields 搜索字段，搜索框会出现在上侧 1search_fields = ['title'] 支持模糊查询，根据列表中的字段进行查询 list_per_page 分页，分页框会出现在下侧 1list_per_page = 10 添加、修改页属性fields 属性的先后顺序 1fields = ['date', 'title'] fieldsets 属性分组 1234fieldsets = [ ('basic',&#123;'fields': ['title']&#125;), ('more', &#123;'fields': ['date']&#125;),] 关联对象 对于模型类，有两种注册方式 方式一：与传统模型类相同 方式二：关联注册 按照BookInfor的注册方式完成HeroInfo的注册 接下来实现关联注册 12345678910111213141516171819202122232425262728from django.contrib import adminfrom .models import *# StackedInline TabularInlineclass ModelName2Line(admin.TabularInline): model = HeroInfo extra = 1class ModelName1Admin(admin.ModelAdmin): list_display = ['id', 'title', 'date'] list_filter = ['title'] search_fields = ['title'] list_per_page = 10 fieldsets = [ ('base', &#123;'fields': ['title']&#125;), ('super', &#123;'fields': ['date']&#125;) ] inlines = [ModelName2Line]class ModelName2Admin(admin.ModelAdmin): list_display = ['id', 'name', 'gender', 'content', 'modelName1ForeignKey'] list_filter = ['hgender']admin.site.register(ModelName1, ModelName1Admin)admin.site.register(ModelName2, ModelName2Admin) 可以将内嵌的方式改为表格 1class ModelName2Line(admin.TabularInline) 布尔值的显示 发布性别的显示不是一个直观的结果，可以使用方法进行封装 123456def gender(self): if self.hgender: return '男' else: return '女'gender.short_description = '性别' 在admin注册中使用gender代替hgender 12class ModelName2Admin(admin.ModelAdmin): list_display = ['id', 'name', 'gender', 'content'] 视图 在django中，视图对WEB请求进行回应 视图接收reqeust对象作为第一个参数，包含了请求的信息 视图就是一个Python函数，被定义在views.py中 123456from django.http import HttpResponsedef index(request): return HttpResponse("index")def detail(request,id): return HttpResponse("detail %s" % id) 定义完成视图后，需要配置urls.py，否则无法处理请求 urls.py12345678from django.contrib import adminfrom django.urls import pathfrom DjangoLearn1 import viewsurlpatterns = [ path('admin/', admin.site.urls), path('',views.index)] 此时，就可以访问了，不过考虑到如果这样填写，模块一多，URL的量一大的话，就会出现多个路由，不方便配置，所以推荐如下 在对应模块里面创建一个 urls.py 的文件，将路由信息写到里面 1234567from django.urls import pathfrom . import viewsurlpatterns = [ path('', views.index, name='index'),] 之后，在向主urls.py文件中include进去 1234567from django.urls import include, pathfrom django.contrib import adminurlpatterns = [ path('', include('DjangoLearn1.urls')), path('admin/', admin.site.urls),] 模板 模板是html页面，可以根据视图中传递的数据填充值 在模板中访问视图传递的数据 12&#123;&#123; 输出值，可以是变量，也可以是对象.属性 &#125;&#125;&#123;% 执行代码段 %&#125; 定义HTML模板123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;列表&lt;/h1&gt;&lt;ul&gt;&#123;%for ModeleName1 in ModeleName1List%&#125;&lt;li&gt; &lt;a href="&#123;&#123;ModeleName1.id&#125;&#125;"&gt; &#123;&#123;ModeleName1.title&#125;&#125; &lt;/a&gt;&lt;/li&gt;&#123;%endfor%&#125;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 在模板中访问对象成员时，都以属性的方式访问，即方法也不能加括号 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;详细&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&#123;&#123;ModeleName1.title&#125;&#125;&lt;/h1&gt;&lt;ul&gt; &#123;%for Modele in ModeleName1.ModelName2_set.all%&#125; &lt;li&gt;&#123;&#123;Modele.name&#125;&#125;---&#123;&#123;Modele.content&#125;&#125;&lt;/li&gt; &#123;%endfor%&#125;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 使用模板 编辑views.py文件，在方法中调用模板 Django提供了函数Render()简化视图调用模板、构造上下文 1234567891011from django.shortcuts import renderfrom models import ModeleName1def index(reqeust): ModeleName1List = ModeleName1.objects.all() return render(reqeust, 'booktest/index.html', &#123;'ModeleName1List': ModeleName1List&#125;)def detail(reqeust, id): ModeleName1 = ModeleName1.objects.get(pk=id) return render(reqeust, 'booktest/detail.html', &#123;'ModeleName1': ModeleName1&#125;) 总结 视图 Views： 接受请求，逻辑处理，调用数据，输出响应 配置ulr在自己的应用中匹配url 模型Model：负责与数据库交互 面向对象：模型对象，列表 定义模型类：指出属性及类型，以确定表的结构，迁移 后台管理：创建管理员，启动服务器，admin，注册admin.py 模版：定义显示的样子 加载：读取文件内容到内存 渲染：填内容]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + nexT 学习笔记]]></title>
    <url>%2F2017%2F12%2F29%2Fhexoleraningnote%2F</url>
    <content type="text"><![CDATA[前言 本文内容主要是个人在学习hexo和next中所遇到的一些“坑”和解决方法,而详细的流程网上有很多，在文章的结尾我会贴出我在学习中查找到的比较好的文章。 注意本文不是详细操作步骤，如果需要详细步骤，请直接翻到文章结尾。 官方文档 Hexo nexT Hexo 和 nexT 的安装 在安装 Hexo 之前，需要确保电脑环境要有 Node.js 和 Git 环境, 当然，为了更好的安装 Hexo 还需要 npm. 下面是我所使用的版本： 安装之后，最常使用的指令如下： 生成静态页面 1hexo g 在本地运行 1hexo s 部署到GitHub pages（coding） 1hexo d 清除生成的静态文件 1hexo clean 打开 GitHub Pages在第一次创建完仓库之后，打开settings选项，向下翻到GitHub Pages选项会发现不能打开，会有一个提示信息： GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site 是因为该GitHub Pages没有内容，此时只要点击下面的Choose a theme按钮选择一个主题就可以打开和访问了。 SSH 配置先查看本机用户home目录下是否存在.ssh目录1cd ~/.ssh 如果有就不用再创建了，如果想重新创建，可以创建一个不同名字的，也可以将原来的删除，再创建。使用下面指令删除已存在的SSH：12ssh-add -Drm -r ~/.ssh 再创建新的SSH密钥(keys)1$ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 这将按照你提供的邮箱地址，创建一对密钥 将生成的id_rsa.pub文件里面的内容拷贝到GitHub 项目中添加公钥，这里推荐在对应 xxx.github.io 项目中加。（settings-&gt;deploy keys） 最后再用下面指令测试是否连接成功1ssh -T git@github.com 可参考github提示Permission denied (publickey)，如何才能解决？ 同步到GitHub配置站点文件下的_config.xml文件下的deploy信息。 安装hexo-deployer-git插件1npm install hexo-deployer-git --save 关于 https 的问题，如果需要使用自己的域名的话，GitHub pages 是不能打开 Enforce HTTPS 的。所以在配置deploy信息的时候就推荐使用 Clone with SSH 的链接。 绑定域名在source文件夹下面创建CNAME文件（没有后缀），里面填上自己的域名。之后在自己的域名商将自己的域名用CNAME方式指向自己GitHub pages的域名。 个人使用的是腾讯云 最后需要注意，需要在站点文件的_config.xml文件配置中的skip_render添加:12skip_render: - CNAME 表示跳过该文件的渲染。 nexT 主题配置一些我觉得比较实用的效果，参考hexo的next主题个性化配置教程. 添加 README.md 在站点文件的source目录下添加一个README.md文件，之后修改站点文件下的_config.xml，将skip_render添加README.md，跳过该文件的渲染。 123skip_render: - CNAME - README.md Schemes个人比较喜欢Gemini样式，相比Pisces样式，该样式不会每篇文章相连过于紧密，会以分块的形式显示出来，比较好看，特别在手机端上效果更显著。具体可以亲自去设置去看看效果。 live2d就是网站右下角的“萌物”小人，具体可以参考hexo-helper-live2d。下面简要介绍我的做法： 在站点文件打开终端输入 1npm install --save hexo-helper-live2d 在站点文件下的_config.xml最后配置： 12live2d: model: z16 具体的配置可以看文档，可以修改挺多内容的。模型外观参考截图预览. 动态背景在主题文件的_config.xml中搜索Canvas-nest可以发现有4个动态背景，可以逐个尝试，也可以同时设置为true，个人只选择了Canvas-nest。 footer可以将网站最下的不想要显示的内容设置为false，在主题文件的_config.xml中搜索footer，我的设置如下：12345678910111213141516171819footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2017 # Icon between year and copyright info. icon: user # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false busuanzi访问人数在主题文件的_config.xml中搜索busuanzi_count，修改配置，可以在网站底部和文章中显示访问的人数，我的配置如下：123456789101112131415busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数 site_uv_footer: | # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 访问总量 site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 阅读次数 page_pv_footer: 显示统计字数在主题文件的_config.xml中搜索post_wordcount，修改配置，可以在网站底部和文章中显示所统计的字数，我的配置如下：123456post_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 增加本地搜索功能在主题文件的_config.xml中搜索local_search，设置为true。 在文章底部增加版权信息在主题文件的_config.xml中搜索post_copyright，设置为true。 给文章加密参考： hexo-blog-encrypt 安装： npm install hexo-blog-encrypt 首先在 _config.yml 中启用该插件123456# Security##encrypt: enable: true``` - 在你的文章的头部添加上对应的字段，如 password, abstract, message title: hello worlddate: 2016-03-30 21:18:02tags: - fdsafsdaf password: Mikeabstract: Welcome to my blog, enter password to read. message: Welcome to my blog, enter password to read.12345## 写文章一般使用```codehexo new xxx xxx表示文件的名字，同时也会自动设置为文章标题（后面可改）也可以之间创建.md文件，添加文章头信息： 1234567title: // 文章标题date: // 创建时间updated: //跟新文章的时间tags: // 文章的标签，如果有多个，[tags1, tags2, ...]categories: // 文章分类keywords: // 文章关键词，如果有多个，[key1, key2, ...]description: //文章描述 其中需要注意： 如果想要有updated，需要在主题文件下的_config.xml文件中配置post_meta，将updated_at设置为true。 12345post_meta: item_text: true created_at: true updated_at: true categories: true keywords和description的作用是为了搜索引擎寻找关键字。 其中description关键字，在主页上显示的时候就会显示这里面的内容，而不是显示前150个字符。还有另一种方法推荐，就是不写description，而是在文章中插入&lt;!-- more --&gt;注释，这样主页就会显示该注释前的内容。 可添加内容下面的内容是推广和维护网站相关。 网站分析 个人使用的是腾讯移动分析，而且nexT也可以直接支持，在主题文件的_config.xml中搜索Tencent MTA ID，将自己在网站上注册的 ID 填写上去就可以统计了。 seo推广 这里推荐参考Hexo+nexT主题搭建个人博客中seo推广部分。 参考百度搜索资源平台 推荐阅读 Hexo+nexT主题搭建个人博客 hexo初探—让写作飞起来 史上最详细的Hexo博客搭建图文教程 Hexo + GitHub (Coding) Pages 搭建博客 基于 Hexo 和 GitHub Pages 搭建博客 Hexo搭建独立博客，托管到Github和Coding上教程 让更多人看到你的博客 在github上搭建个人网站 如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？ Hexo+Next主题集成Algolia搜索]]></content>
      <categories>
        <category>博客技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今天算是把我的博客网站建立起来了]]></title>
    <url>%2F2017%2F12%2F27%2Fhellomyblog%2F</url>
    <content type="text"><![CDATA[花了三天时间，终于搞定了，这也表示我的文章之旅要开始了。enjoy it !]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
</search>
