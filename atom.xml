<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaelyn&#39;s Blog</title>
  
  <subtitle>jaelyn-lim</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaelyn.coding.me/"/>
  <updated>2018-03-17T06:44:25.648Z</updated>
  <id>http://jaelyn.coding.me/</id>
  
  <author>
    <name>Jaelyn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WARNING REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
    <link href="http://jaelyn.coding.me/2018/03/17/ssh-remote/"/>
    <id>http://jaelyn.coding.me/2018/03/17/ssh-remote/</id>
    <published>2018-03-17T06:40:57.000Z</published>
    <updated>2018-03-17T06:44:25.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</h3><p>在我们连接云主机的时候，相关的配置会保存在<code>/Users/apple/.ssh</code>中的<code>known_hosts</code>文件内，如果云主机修改等操作后，就有可能会出现在这个问题。</p><p>解决方式很简单，进入到这个文件内，将相关的IP删除，之后在重新连接，即可。</p><a id="more"></a><ul><li>进入到相关文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>vim 操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim known_hosts</span><br></pre></td></tr></table></figure><ul><li>删除对应的行</li><li>重新连接</li></ul><p><em>也可以使用<code>ssh-keygen -R &quot;IP&quot;</code>命令，直接删除相关远程连接的云主机IP</em></p><p>不推荐直接删除这个文件</p><blockquote><p><strong>known_hosts是记录远程主机的公钥</strong>的文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED&quot;&gt;&lt;a href=&quot;#在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED&quot; class=&quot;headerlink&quot; title=&quot;在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&quot;&gt;&lt;/a&gt;在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&lt;/h3&gt;&lt;p&gt;在我们连接云主机的时候，相关的配置会保存在&lt;code&gt;/Users/apple/.ssh&lt;/code&gt;中的&lt;code&gt;known_hosts&lt;/code&gt;文件内，如果云主机修改等操作后，就有可能会出现在这个问题。&lt;/p&gt;
&lt;p&gt;解决方式很简单，进入到这个文件内，将相关的IP删除，之后在重新连接，即可。&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jaelyn.coding.me/categories/ubuntu/"/>
    
    
      <category term="ssh" scheme="http://jaelyn.coding.me/tags/ssh/"/>
    
      <category term="ubuntu" scheme="http://jaelyn.coding.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>python 虚拟环境</title>
    <link href="http://jaelyn.coding.me/2018/03/10/python-vertualenv/"/>
    <id>http://jaelyn.coding.me/2018/03/10/python-vertualenv/</id>
    <published>2018-03-10T06:24:36.000Z</published>
    <updated>2018-03-10T06:43:00.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-虚拟环境设置"><a href="#python-虚拟环境设置" class="headerlink" title="python 虚拟环境设置"></a>python 虚拟环境设置</h2><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip install virtualenv</code></p><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p><code>virtualenv [新环境名]</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>source ./bin/activate</code></p><blockquote><p>执行所创建的虚拟环境下的根目录的activate文件</p></blockquote><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p><code>deactivate</code></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>直接删除创建的文件夹就行</p><a id="more"></a><h3 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>pip install virtualenvwrapper</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>创建虚拟环境管理目录: <code>mkdir $HOME/.local/virtualenvs</code></li><li>在~/.bashrc中添加行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export VIRTUALENV_USE_DISTRIBUTE=1</span><br><span class="line">export WORKON_HOME=$HOME/.local/virtualenvs</span><br><span class="line">if [ -e $HOME/.local/bin/virtualenvwrapper.sh ];then</span><br><span class="line">source $HOME/.local/bin/virtualenvwrapper.sh</span><br><span class="line">else if [ -e /usr/local/bin/virtualenvwrapper.sh ];then</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">export PIP_VIRTUALENV_BASE=$WORKON_HOME</span><br><span class="line">export PIP_RESPECT_VIRTUALENV=true</span><br></pre></td></tr></table></figure><ul><li>启动 virtualenvwrapper: <code>source ~/.bashrc</code></li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li>创建虚拟环境</li></ul><p><code>mkvirtualenv [环境名]</code></p><blockquote><p>也可以在创建的时候加上参数，确定python版本，<code>workon [环境名] --python=python3</code></p></blockquote><ul><li>删除</li></ul><p><code>rmvirtualenv [环境名]</code></p><ul><li>激活</li></ul><p><code>workon [环境名]</code></p><ul><li>退出</li></ul><p><code>deactivate</code></p><ul><li>列出所有环境</li></ul><p><code>workon</code> 或者 <code>lsvirtualenv -b</code></p><h4 id="查看所有指令"><a href="#查看所有指令" class="headerlink" title="查看所有指令"></a>查看所有指令</h4><p><code>virtualenvwrapper —help</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-虚拟环境设置&quot;&gt;&lt;a href=&quot;#python-虚拟环境设置&quot; class=&quot;headerlink&quot; title=&quot;python 虚拟环境设置&quot;&gt;&lt;/a&gt;python 虚拟环境设置&lt;/h2&gt;&lt;h3 id=&quot;virtualenv&quot;&gt;&lt;a href=&quot;#virtualenv&quot; class=&quot;headerlink&quot; title=&quot;virtualenv&quot;&gt;&lt;/a&gt;virtualenv&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建虚拟环境&quot;&gt;&lt;a href=&quot;#创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟环境&quot;&gt;&lt;/a&gt;创建虚拟环境&lt;/h4&gt;&lt;p&gt;&lt;code&gt;virtualenv [新环境名]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;&lt;code&gt;source ./bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行所创建的虚拟环境下的根目录的activate文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;退出&quot;&gt;&lt;a href=&quot;#退出&quot; class=&quot;headerlink&quot; title=&quot;退出&quot;&gt;&lt;/a&gt;退出&lt;/h4&gt;&lt;p&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除&quot;&gt;&lt;a href=&quot;#删除&quot; class=&quot;headerlink&quot; title=&quot;删除&quot;&gt;&lt;/a&gt;删除&lt;/h4&gt;&lt;p&gt;直接删除创建的文件夹就行&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://jaelyn.coding.me/categories/python/"/>
    
    
      <category term="virtualenv" scheme="http://jaelyn.coding.me/tags/virtualenv/"/>
    
      <category term="python" scheme="http://jaelyn.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 05</title>
    <link href="http://jaelyn.coding.me/2018/02/23/django-rest-vue05/"/>
    <id>http://jaelyn.coding.me/2018/02/23/django-rest-vue05/</id>
    <published>2018-02-23T09:21:17.000Z</published>
    <updated>2018-02-23T09:44:06.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>view</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewset</span><span class="params">(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">        商品分类列表数据</span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">        获取商品分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = GoodsCategory.objects.filter(category_type=<span class="number">1</span>)</span><br><span class="line">    serializer_class = CategorySerializer</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>Serializer</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><ul><li>url</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置category的url</span></span><br><span class="line">router.register(<span class="string">r'categorys'</span>, CategoryViewset, base_name=<span class="string">"categorys"</span>)</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="django-cors-headers"><a href="#django-cors-headers" class="headerlink" title="django-cors-headers"></a>django-cors-headers</h3><ul><li><a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="noopener">官网</a></li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li>INSTALLED_APPS</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>middleware</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [  <span class="comment"># Or MIDDLEWARE_CLASSES on Django &lt; 1.10</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>, <span class="comment"># 只要添加这个</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>要放在CommonMiddleware前面</p></blockquote><ol><li>设置CORS_ORIGIN_ALLOW_ALL</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="用户登录和注册"><a href="#用户登录和注册" class="headerlink" title="用户登录和注册"></a>用户登录和注册</h2><h3 id="权限认证（DRF自带的token认证）"><a href="#权限认证（DRF自带的token认证）" class="headerlink" title="权限认证（DRF自带的token认证）"></a>权限认证（DRF自带的token认证）</h3><ul><li><a href="http://www.django-rest-framework.org/api-guide/authentication/#authentication" target="_blank" rel="noopener">Authentication</a></li></ul><h4 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对应的Authentication也有三种，<a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication" target="_blank" rel="noopener">TokenAuthentication</a>在前后端分离的系统中比较常见</p></blockquote><ul><li><a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication" target="_blank" rel="noopener">TokenAuthentication</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework.authtoken'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="创建对应的Token"><a href="#创建对应的Token" class="headerlink" title="创建对应的Token"></a>创建对应的Token</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line">token = Token.objects.create(user=...)</span><br><span class="line"><span class="keyword">print</span> token.key</span><br></pre></td></tr></table></figure><h4 id="获取token的URL配置"><a href="#获取token的URL配置" class="headerlink" title="获取token的URL配置"></a>获取token的URL配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken <span class="keyword">import</span> views</span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>在输入用户名密码后会返回对应的token，用于前端保存使用，并且在提交的时候将这个token附加在httpheader中，确保用户的登录并且用于权限认证</p></blockquote><h4 id="在httpheader中添加token"><a href="#在httpheader中添加token" class="headerlink" title="在httpheader中添加token"></a>在httpheader中添加token</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token <span class="number">9944</span>b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span><br></pre></td></tr></table></figure><h4 id="在setting中配置token的认证方式"><a href="#在setting中配置token的认证方式" class="headerlink" title="在setting中配置token的认证方式"></a>在setting中配置token的认证方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.TokenAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将token认证放到view中"><a href="#将token认证放到view中" class="headerlink" title="将token认证放到view中"></a>将token认证放到view中</h3><ul><li>将setting中的<code>&#39;rest_framework.authentication.TokenAuthentication&#39;</code>去除</li><li>在view中添加认证<code>authentication_classes = (TokenAuthentication, )</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> TokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    </span><br><span class="line">    authentication_classes = (TokenAuthentication, )</span><br></pre></td></tr></table></figure><h3 id="JWT方式用户认证"><a href="#JWT方式用户认证" class="headerlink" title="JWT方式用户认证"></a>JWT方式用户认证</h3><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT – JSON WEB TOKEN</a></li><li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">JSON Web Token - 在Web应用间安全地传递信息</a></li><li><a href="https://www.jianshu.com/p/180a870a308a" target="_blank" rel="noopener">前后端分离之JWT用户认证</a></li><li><a href="http://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">REST framework JWT Auth</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure><h4 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h4><blockquote><ul><li><p>Python (2.7, 3.3, 3.4, 3.5)</p></li><li><p>Django (1.8, 1.9, 1.10)</p></li><li>Django REST Framework (3.0, 3.1, 3.2, 3.3, 3.4, 3.5)</li></ul></blockquote><h4 id="setting-1"><a href="#setting-1" class="headerlink" title="setting"></a>setting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Authorization: JWT &lt;your_token&gt;"</span> http://localhost:<span class="number">8000</span>/protected-url/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义用户认证"><a href="#自定义用户认证" class="headerlink" title="自定义用户认证"></a>自定义用户认证</h3><ul><li>setting</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'users.views.CustomBackend'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>view 中的逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义用户验证</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.get(Q(username=username)|Q(mobile=username))</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h2 id="简单的信息发送"><a href="#简单的信息发送" class="headerlink" title="简单的信息发送"></a>简单的信息发送</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YunPian</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, api_key)</span>:</span></span><br><span class="line">        self.api_key = api_key</span><br><span class="line">        self.single_send_url = <span class="string">"******"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(self, code, mobile)</span>:</span></span><br><span class="line">        parmas = &#123;</span><br><span class="line">            <span class="string">"apikey"</span>: self.api_key,</span><br><span class="line">            <span class="string">"mobile"</span>: mobile,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"&#123;code&#125;。如非本人操作，请忽略本短信"</span>.format(code=code)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.post(self.single_send_url, data=parmas)</span><br><span class="line">        re_dict = json.loads(response.text)</span><br><span class="line">        <span class="keyword">return</span> re_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    yun_pian = YunPian(<span class="string">"****"</span>)</span><br><span class="line">    yun_pian.send_sms(<span class="string">"2017"</span>, <span class="string">"****"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以直接在百度搜索本地ip，就能获得本机对外的ip地址</p></blockquote><h2 id="Serializer信息验证"><a href="#Serializer信息验证" class="headerlink" title="Serializer信息验证"></a>Serializer信息验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code = serializers.CharField(required=<span class="keyword">True</span>, write_only=<span class="keyword">True</span>, max_length=<span class="number">4</span>, min_length=<span class="number">4</span>,label=<span class="string">"验证码"</span>,</span><br><span class="line">                                 error_messages=&#123;</span><br><span class="line">                                     <span class="string">"blank"</span>: <span class="string">"请输入验证码"</span>,</span><br><span class="line">                                     <span class="string">"required"</span>: <span class="string">"请输入验证码"</span>,</span><br><span class="line">                                     <span class="string">"max_length"</span>: <span class="string">"验证码格式错误"</span>,</span><br><span class="line">                                     <span class="string">"min_length"</span>: <span class="string">"验证码格式错误"</span></span><br><span class="line">                                 &#125;,</span><br><span class="line">                                 help_text=<span class="string">"验证码"</span>)</span><br></pre></td></tr></table></figure><h3 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#validators" target="_blank" rel="noopener">Validators</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"></span><br><span class="line">slug = SlugField(</span><br><span class="line">    max_length=<span class="number">100</span>,</span><br><span class="line">    validators=[UniqueValidator(queryset=BlogPost.objects.all())]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = serializers.CharField(label=<span class="string">"用户名"</span>, help_text=<span class="string">"用户名"</span>, required=<span class="keyword">True</span>, allow_blank=<span class="keyword">False</span>, validators=[UniqueValidator(queryset=User.objects.all(), message=<span class="string">"用户已经存在"</span>)])</span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h3 id="post-save-signal"><a href="#post-save-signal" class="headerlink" title="post_save signal"></a><code>post_save</code> signal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_save, sender=settings.AUTH_USER_MODEL)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_auth_token</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        Token.objects.create(user=instance)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_save, sender=User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        password = instance.password</span><br><span class="line">        instance.set_password(password)</span><br><span class="line">        instance.save()</span><br></pre></td></tr></table></figure><h3 id="CurrentUserDefault"><a href="#CurrentUserDefault" class="headerlink" title="CurrentUserDefault"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#currentuserdefault" target="_blank" rel="noopener">CurrentUserDefault</a></h3><blockquote><p>获取当前用户</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">owner = serializers.HiddenField(</span><br><span class="line">    default=serializers.CurrentUserDefault()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="UniqueTogetherValidator"><a href="#UniqueTogetherValidator" class="headerlink" title="UniqueTogetherValidator"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#uniquetogethervalidator" target="_blank" rel="noopener">UniqueTogetherValidator</a></h3><blockquote><p>联合索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueTogetherValidator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># ToDo items belong to a parent list, and have an ordering defined</span></span><br><span class="line">        <span class="comment"># by the 'position' field. No two items in a given list may share</span></span><br><span class="line">        <span class="comment"># the same position.</span></span><br><span class="line">        validators = [</span><br><span class="line">            UniqueTogetherValidator(</span><br><span class="line">                queryset=ToDoItem.objects.all(),</span><br><span class="line">                fields=(<span class="string">'list'</span>, <span class="string">'position'</span>)</span><br><span class="line">                message=<span class="string">"巴拉巴拉"</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>也可以在数据库中添加联合索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFav</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户收藏</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, help_text=<span class="string">"商品id"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'用户收藏'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (<span class="string">"user"</span>, <span class="string">"goods"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.user.username</span><br></pre></td></tr></table></figure><h3 id="用户权限认证"><a href="#用户权限认证" class="headerlink" title="用户权限认证"></a>用户权限认证</h3><h4 id="IsAuthenticated"><a href="#IsAuthenticated" class="headerlink" title="IsAuthenticated"></a>IsAuthenticated</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'request was permitted'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><h4 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Object-level permission to only allow owners of an object to edit it.</span></span><br><span class="line"><span class="string">    Assumes the model instance has an `owner` attribute.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request,</span></span><br><span class="line">        <span class="comment"># so we'll always allow GET, HEAD or OPTIONS requests.</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Instance must have an attribute named `owner`.</span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavViewset</span><span class="params">(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                     mixins.DestroyModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    permission_classes = (IsAuthenticated, IsOwnerOrReadOnly)</span><br><span class="line">    serializer_class = UserFavSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> UserFav.objects.filter(user=self.request.user)</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="DRF增强"><a href="#DRF增强" class="headerlink" title="DRF增强"></a><a href="https://chibisov.github.io/drf-extensions/docs/" target="_blank" rel="noopener">DRF增强</a></h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install drf-extensions</span><br></pre></td></tr></table></figure><p>在view中添加<code>CacheResponseMixin</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>setting的一些配置（过期时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_CACHE_RESPONSE_TIMEOUT'</span>: <span class="number">60</span> * <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="django-redis"><a href="#django-redis" class="headerlink" title="django redis"></a>django redis</h3><p><a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">django-redis 中文文档</a></p><h2 id="API限速"><a href="#API限速" class="headerlink" title="API限速"></a>API限速</h2><p> <a href="http://www.django-rest-framework.org/api-guide/throttling/#throttling" target="_blank" rel="noopener">Throttling</a></p><ul><li>在setting中配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'100/day'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'1000/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在view中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'request was permitted'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><h2 id="sentry"><a href="#sentry" class="headerlink" title="sentry"></a>sentry</h2><p>错误日志</p><ul><li><a href="https://sentry.io/welcome/" target="_blank" rel="noopener">sentry</a></li><li><a href="https://github.com/getsentry/raven-python" target="_blank" rel="noopener">sentry github</a></li><li><a href="https://docs.sentry.io/clients/python/integrations/django/" target="_blank" rel="noopener">django sentry</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install raven --upgrade</span><br></pre></td></tr></table></figure><p>setting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'raven.contrib.django.raven_compat'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> raven</span><br><span class="line"></span><br><span class="line">RAVEN_CONFIG = &#123;</span><br><span class="line">    <span class="string">'dsn'</span>: <span class="string">'https://&lt;key&gt;:&lt;secret&gt;@sentry.io/&lt;project&gt;'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h2><p>异步</p><ul><li><a href="http://projectsedu.com/2017/02/08/django通过celery添加异步任务/" target="_blank" rel="noopener">django通过celery添加异步任务</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;view&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CategoryViewset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    list:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        商品分类列表数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    retrieve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        获取商品分类详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queryset = GoodsCategory.objects.filter(category_type=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serializer_class = CategorySerializer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
      <category term="Django Rest Framework" scheme="http://jaelyn.coding.me/tags/Django-Rest-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 04</title>
    <link href="http://jaelyn.coding.me/2018/02/20/django-rest-vue04/"/>
    <id>http://jaelyn.coding.me/2018/02/20/django-rest-vue04/</id>
    <published>2018-02-20T15:02:11.000Z</published>
    <updated>2018-02-23T09:41:32.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用类继承View的方式写接口"><a href="#使用类继承View的方式写接口" class="headerlink" title="使用类继承View的方式写接口"></a>使用类继承View的方式写接口</h2><h3 id="导入基础view"><a href="#导入基础view" class="headerlink" title="导入基础view"></a>导入基础view</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure><h3 id="在类中继承"><a href="#在类中继承" class="headerlink" title="在类中继承"></a>在类中继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="数据字典化的方式（序列化）"><a href="#数据字典化的方式（序列化）" class="headerlink" title="数据字典化的方式（序列化）"></a>数据字典化的方式（序列化）</h2><h3 id="传统"><a href="#传统" class="headerlink" title="传统"></a>传统</h3><h4 id="查询-循环-赋值方式"><a href="#查询-循环-赋值方式" class="headerlink" title="查询-循环-赋值方式"></a>查询-循环-赋值方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">json_list = []</span><br><span class="line">goods = Goods.objects.all()[:<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> good <span class="keyword">in</span> goods:</span><br><span class="line">json_dict = &#123;&#125;</span><br><span class="line">json_dict[<span class="string">"name"</span>] = good.name</span><br><span class="line">json_dict[<span class="string">"category"</span>] = good.category.name</span><br><span class="line">json_dict[<span class="string">"market_price"</span>] = good.market_price</span><br><span class="line">json_dict[<span class="string">"add_time"</span>] = good.add_time <span class="comment"># 这里会出现错误，报错原因是时间格式不能序列化成json</span></span><br><span class="line">json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(json_list), content_tyoe=<span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure><h4 id="使用Django自带的model-to-dict"><a href="#使用Django自带的model-to-dict" class="headerlink" title="使用Django自带的model_to_dict"></a>使用Django自带的<em>model_to_dict</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line"><span class="keyword">for</span> good <span class="keyword">in</span> goods:</span><br><span class="line">json_dict = model_to_dict(good) <span class="comment"># 这里也有可能报错，有些字段不能序列化</span></span><br><span class="line">json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(json_list), content_tyoe=<span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure><h4 id="使用serializers"><a href="#使用serializers" class="headerlink" title="使用serializers"></a>使用serializers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line">json_data = serializers.serialize(<span class="string">'json'</span>, goods)</span><br><span class="line">json_data = json.loads(json_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">return</span> JsonResponse(json_data, safe=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="Django-rest-Framework"><a href="#Django-rest-Framework" class="headerlink" title="Django rest Framework"></a>Django rest Framework</h2><ul><li><a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">Django REST framework</a></li></ul><h3 id="一些依赖包"><a href="#一些依赖包" class="headerlink" title="一些依赖包"></a>一些依赖包</h3><p>The following packages are optional:</p><ul><li><a href="https://pypi.python.org/pypi/coreapi/" target="_blank" rel="noopener">coreapi</a> (1.32.0+) - Schema generation support.</li><li><a href="https://pypi.python.org/pypi/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - Markdown support for the browsable API.</li><li><a href="https://pypi.python.org/pypi/django-filter" target="_blank" rel="noopener">django-filter</a> (1.0.1+) - Filtering support.</li><li><a href="https://github.com/maraujop/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - Improved HTML display for filtering.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - Object level permissions support.</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install django-guardian</span><br><span class="line">pip install coreapi</span><br><span class="line">pip install django-filter</span><br><span class="line">pip install --upgrade django-crispy-forms</span><br><span class="line">pip install markdown</span><br></pre></td></tr></table></figure><p><em>注意这些包一定要装，不然后面有些依赖会报错</em></p><h3 id="使用文档（documentation）"><a href="#使用文档（documentation）" class="headerlink" title="使用文档（documentation）"></a>使用文档（documentation）</h3><ul><li>在url.py文件中引入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br></pre></td></tr></table></figure><ul><li>导入该url，注意结尾不要有“/”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    url(<span class="string">r'docs/'</span>, include_docs_urls(title=<span class="string">"doc"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="一些初始化"><a href="#一些初始化" class="headerlink" title="一些初始化"></a>一些初始化</h3><h4 id="setting-py文件"><a href="#setting-py文件" class="headerlink" title="setting.py文件"></a>setting.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'crispy_forms'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="url-py文件"><a href="#url-py文件" class="headerlink" title="url.py文件"></a>url.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="使用-class-based-views（基础的view）"><a href="#使用-class-based-views（基础的view）" class="headerlink" title="使用 class-based views（基础的view）"></a>使用 class-based views（基础的view）</h3><h4 id="使用自己的Serializer（参考）"><a href="#使用自己的Serializer（参考）" class="headerlink" title="使用自己的Serializer（参考）"></a>使用自己的Serializer（参考）</h4><ul><li>在对应的app下新建文件，serializers.py</li><li>基本内容内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="keyword">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ul><li>在view文件中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><p>备用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MEDIA_URL = <span class="string">"/media/"</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在setting.py中如果配置了这个媒体路径，Django rest framework 就会在媒体路径之上加上这个路径，这样就能获得图片路径的完整地址</p></blockquote><h4 id="将数据保存到数据库中"><a href="#将数据保存到数据库中" class="headerlink" title="将数据保存到数据库中"></a>将数据保存到数据库中</h4><ul><li>在serializers.py文件中，需要保存的字段中，覆写create方法</li><li>作为给前端添加数据的一个接口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="keyword">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create and return a new `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br></pre></td></tr></table></figure><ul><li>在view中添加一个post方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><h3 id="使用ModelSerializers"><a href="#使用ModelSerializers" class="headerlink" title="使用ModelSerializers"></a>使用ModelSerializers</h3><ul><li>在serializer中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：名字要和model中的一致，包括一开始使用的验证，名字也要相同</p></blockquote><h4 id="取出所有字段"><a href="#取出所有字段" class="headerlink" title="取出所有字段"></a>取出所有字段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = Snippet</span><br><span class="line">fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><h4 id="serializers的“外键”"><a href="#serializers的“外键”" class="headerlink" title="serializers的“外键”"></a>serializers的“外键”</h4><ul><li>只要在对应的serializers中添加字段覆盖对应的字段就行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, Category</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    Category = CategorySerializer()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-mixins-和-GenericAPIView"><a href="#使用-mixins-和-GenericAPIView" class="headerlink" title="使用 mixins 和 GenericAPIView"></a>使用 mixins 和 GenericAPIView</h3><p>GenericAPIView这是用的非常多的一个view，也是非常重要的view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>同样的，在listapiview中也有上面的方法，可以直接继承这个view，减少代码量</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_api03.png" alt="ListAPIView"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><p>一共有以下的view可以继承</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue04.png" alt="generics"></p><h3 id="配置分页"><a href="#配置分页" class="headerlink" title="配置分页"></a>配置分页</h3><h4 id="在setting中配置"><a href="#在setting中配置" class="headerlink" title="在setting中配置"></a>在setting中配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在view中配置"><a href="#在view中配置" class="headerlink" title="在view中配置"></a>在view中配置</h4><p>这个配置可以自定义自己的分页配置，这样的话就可以不用在setting中配置了，直接在view中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure><h3 id="使用viewsets"><a href="#使用viewsets" class="headerlink" title="使用viewsets"></a>使用viewsets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br></pre></td></tr></table></figure><p>里面的view比较少</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue05.png" alt="viewsets"></p><h4 id="GenericViewSet"><a href="#GenericViewSet" class="headerlink" title="GenericViewSet"></a>GenericViewSet</h4><ul><li>在view中继承ListModelMixin和GenericViewSet</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure><h5 id="viewset的url配置方法"><a href="#viewset的url配置方法" class="headerlink" title="viewset的url配置方法"></a>viewset的url配置方法</h5><ul><li>在url.py文件中配置url</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet</span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">    <span class="string">'post'</span>: <span class="string">'create'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   url(<span class="string">r'^snippets/$'</span>, snippet_list, name=<span class="string">'snippet-list'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="使用Routers-配置URL"><a href="#使用Routers-配置URL" class="headerlink" title="使用Routers 配置URL"></a>使用Routers 配置URL</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a router and register our viewsets with it.</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'snippets'</span>, views.SnippetViewSet)</span><br><span class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^'</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="一些view的继承"><a href="#一些view的继承" class="headerlink" title="一些view的继承"></a>一些view的继承</h3><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue06.png" alt="view"></p><h3 id="过滤功能"><a href="#过滤功能" class="headerlink" title="过滤功能"></a>过滤功能</h3><ul><li>在view中添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># queryset = Goods.objects.all()</span></span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Goods.object.filter(shop_price__gt=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><h4 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a><a href="http://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend" target="_blank" rel="noopener">DjangoFilterBackend</a></h4><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><ul><li><a href="https://django-filter.readthedocs.io/en/master/" target="_blank" rel="noopener">django-filter</a></li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>首先安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><ul><li>将django-filter加到<code>INSTALLED_APPS</code>中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>设置个默认值（可以不设置）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    filter_backends = (DjangoFilterBackend,)</span><br></pre></td></tr></table></figure><blockquote><p>如果使用过滤器，就不需要使用get_queryset方法</p></blockquote><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    filter_fields = (<span class="string">'name'</span>, <span class="string">'shop_price'</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义Filters"><a href="#自定义Filters" class="headerlink" title="自定义Filters"></a>自定义Filters</h3><ul><li>新建filters.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> rest_framework <span class="keyword">as</span> filters</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFilter</span><span class="params">(filters.FilterSet)</span>:</span></span><br><span class="line">    min_price = filters.NumberFilter(name=<span class="string">"price"</span>, lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    max_price = filters.NumberFilter(name=<span class="string">"price"</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Product</span><br><span class="line">        fields = [<span class="string">'category'</span>, <span class="string">'in_stock'</span>, <span class="string">'min_price'</span>, <span class="string">'max_price'</span>]</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django_filters</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsFilter</span><span class="params">(django_filters.rest_framework.FilterSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品的过滤类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pricemin = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, help_text=<span class="string">"最低价格"</span>,lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    pricemax = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line">    top_category = django_filters.NumberFilter(method=<span class="string">'top_category_filter'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_category_filter</span><span class="params">(self, queryset, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> queryset.filter(Q(category_id=value)|Q(category__parent_category_id=value)|Q(category__parent_category__parent_category_id=value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [<span class="string">'pricemin'</span>, <span class="string">'pricemax'</span>, <span class="string">'is_hot'</span>, <span class="string">'is_new'</span>]</span><br></pre></td></tr></table></figure><p>将view更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    <span class="comment"># filter_fields = ('name', 'shop_price')</span></span><br><span class="line">    filter_class = GoodsFilter</span><br></pre></td></tr></table></figure><ul><li>模糊查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = django_filters.CharFilter(name=<span class="string">'name'</span>, lookup_expr=<span class="string">'icontains'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>不加lookup_expr=’icontains’这个字段就是全匹配</p></blockquote><h3 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    filter_backends = (filters.SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</span><br></pre></td></tr></table></figure><p>例子：(view.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'^name'</span>, <span class="string">'goods_brief'</span>, <span class="string">'goods_desc'</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 在不同字段上使用下面的一些符号可以达到不同的效果</p><ul><li>‘^’ Starts-with search.</li><li>‘=’ Exact matches.</li><li>‘@’ Full-text search. (Currently only supported Django’s MySQL backend.)</li><li>‘$’ Regex search.</li></ul></blockquote><h3 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a><a href="http://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    filter_backends = (filters.OrderingFilter,)</span><br><span class="line">    ordering_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'^name'</span>, <span class="string">'goods_brief'</span>, <span class="string">'goods_desc'</span>)</span><br><span class="line">    ordering_fields = (<span class="string">'sale'</span>, <span class="string">'time'</span>)</span><br></pre></td></tr></table></figure><h2 id="API-Guide"><a href="#API-Guide" class="headerlink" title="API Guide"></a><a href="http://www.django-rest-framework.org/#api-guide" target="_blank" rel="noopener">API Guide</a></h2><p>The API guide is your complete reference manual to all the functionality provided by REST framework.</p><ul><li><a href="http://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="noopener">Requests</a></li><li><a href="http://www.django-rest-framework.org/api-guide/responses/" target="_blank" rel="noopener">Responses</a></li><li><a href="http://www.django-rest-framework.org/api-guide/views/" target="_blank" rel="noopener">Views</a></li><li><a href="http://www.django-rest-framework.org/api-guide/generic-views/" target="_blank" rel="noopener">Generic views</a></li><li><a href="http://www.django-rest-framework.org/api-guide/viewsets/" target="_blank" rel="noopener">Viewsets</a></li><li><a href="http://www.django-rest-framework.org/api-guide/routers/" target="_blank" rel="noopener">Routers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/parsers/" target="_blank" rel="noopener">Parsers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/renderers/" target="_blank" rel="noopener">Renderers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="noopener">Serializers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/fields/" target="_blank" rel="noopener">Serializer fields</a></li><li><a href="http://www.django-rest-framework.org/api-guide/relations/" target="_blank" rel="noopener">Serializer relations</a></li><li><a href="http://www.django-rest-framework.org/api-guide/validators/" target="_blank" rel="noopener">Validators</a></li><li><a href="http://www.django-rest-framework.org/api-guide/authentication/" target="_blank" rel="noopener">Authentication</a></li><li><a href="http://www.django-rest-framework.org/api-guide/permissions/" target="_blank" rel="noopener">Permissions</a></li><li><a href="http://www.django-rest-framework.org/api-guide/throttling/" target="_blank" rel="noopener">Throttling</a></li><li><a href="http://www.django-rest-framework.org/api-guide/filtering/" target="_blank" rel="noopener">Filtering</a></li><li><a href="http://www.django-rest-framework.org/api-guide/pagination/" target="_blank" rel="noopener">Pagination</a></li><li><a href="http://www.django-rest-framework.org/api-guide/versioning/" target="_blank" rel="noopener">Versioning</a></li><li><a href="http://www.django-rest-framework.org/api-guide/content-negotiation/" target="_blank" rel="noopener">Content negotiation</a></li><li><a href="http://www.django-rest-framework.org/api-guide/metadata/" target="_blank" rel="noopener">Metadata</a></li><li><a href="http://www.django-rest-framework.org/api-guide/schemas/" target="_blank" rel="noopener">Schemas</a></li><li><a href="http://www.django-rest-framework.org/api-guide/format-suffixes/" target="_blank" rel="noopener">Format suffixes</a></li><li><a href="http://www.django-rest-framework.org/api-guide/reverse/" target="_blank" rel="noopener">Returning URLs</a></li><li><a href="http://www.django-rest-framework.org/api-guide/exceptions/" target="_blank" rel="noopener">Exceptions</a></li><li><a href="http://www.django-rest-framework.org/api-guide/status-codes/" target="_blank" rel="noopener">Status codes</a></li><li><a href="http://www.django-rest-framework.org/api-guide/testing/" target="_blank" rel="noopener">Testing</a></li><li><a href="http://www.django-rest-framework.org/api-guide/settings/" target="_blank" rel="noopener">Settings</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用类继承View的方式写接口&quot;&gt;&lt;a href=&quot;#使用类继承View的方式写接口&quot; class=&quot;headerlink&quot; title=&quot;使用类继承View的方式写接口&quot;&gt;&lt;/a&gt;使用类继承View的方式写接口&lt;/h2&gt;&lt;h3 id=&quot;导入基础view&quot;&gt;&lt;a href=&quot;#导入基础view&quot; class=&quot;headerlink&quot; title=&quot;导入基础view&quot;&gt;&lt;/a&gt;导入基础view&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.views.generic.base &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; View&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在类中继承&quot;&gt;&lt;a href=&quot;#在类中继承&quot; class=&quot;headerlink&quot; title=&quot;在类中继承&quot;&gt;&lt;/a&gt;在类中继承&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GoodsListView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
      <category term="Django Rest Framework" scheme="http://jaelyn.coding.me/tags/Django-Rest-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 03</title>
    <link href="http://jaelyn.coding.me/2018/02/17/django-rest-vue03/"/>
    <id>http://jaelyn.coding.me/2018/02/17/django-rest-vue03/</id>
    <published>2018-02-17T08:08:58.000Z</published>
    <updated>2018-02-23T09:41:42.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前后端分离的优缺点"><a href="#前后端分离的优缺点" class="headerlink" title="前后端分离的优缺点"></a>前后端分离的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>pc，app，pad多端适应</li><li>SPA开发模式开始流行</li><li>前后端开发职责不清</li><li>开发效率问题，前后端互相等待</li><li>前端一直配合着后端，能力受限</li><li>后端开发语言和模版高度耦合，导致开发语言依赖严重</li></ul><a id="more"></a><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>前后端学习门槛增加</li><li>数据依赖导致文档重要性增加</li><li>前端工作量加大</li><li>SEO的难度加大</li><li>后端开发模式迁移增加成本</li></ul><h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><blockquote><p>restful api目前是前后端分离最佳实践</p></blockquote><ol><li>轻量，直接通过http，不需要额外的协议，post/get/put/delete操作</li><li>面向资源，具有解释性</li><li>数据描述简单，一般通过json或者xml做数据通信</li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></li></ul><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><h4 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h4><ul><li><a href="http://www.cnblogs.com/ihardcoder/p/5378290.html" target="_blank" rel="noopener">浅析前端工程化</a></li><li><a href="https://zhuanlan.zhihu.com/p/30192759" target="_blank" rel="noopener">前端工程化小记</a></li><li><a href="http://www.cnblogs.com/yexiaochai/p/4901341.html" target="_blank" rel="noopener">前端优化带来的思考，浅谈前端工程化</a></li></ul><h4 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h4><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">mvvm</a></li><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue.js</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">MVC，MVP 和 MVVM 的图示</a></li></ul><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><ul><li><a href="http://blog.csdn.net/chenchun91/article/details/53375041" target="_blank" rel="noopener">前端组件化开发</a></li><li><a href="https://www.zhihu.com/question/29735633" target="_blank" rel="noopener">什么叫组件化开发？</a></li></ul><h3 id="vue开发的几个概念"><a href="#vue开发的几个概念" class="headerlink" title="vue开发的几个概念"></a>vue开发的几个概念</h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p></blockquote><ul><li><a href="https://doc.webpack-china.org/concepts/" target="_blank" rel="noopener">中文官网</a></li></ul><h4 id="vue，vuex，vue-router，axios"><a href="#vue，vuex，vue-router，axios" class="headerlink" title="vue，vuex，vue-router，axios"></a>vue，vuex，vue-router，axios</h4><blockquote><p>vue全家桶</p></blockquote><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue.js</a></li></ul><h4 id="ES6，babel"><a href="#ES6，babel" class="headerlink" title="ES6，babel"></a>ES6，babel</h4><blockquote><p>ES6语法，babel可以将ES6转换成ES5</p></blockquote><ul><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前后端分离的优缺点&quot;&gt;&lt;a href=&quot;#前后端分离的优缺点&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的优缺点&quot;&gt;&lt;/a&gt;前后端分离的优缺点&lt;/h3&gt;&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;pc，app，pad多端适应&lt;/li&gt;
&lt;li&gt;SPA开发模式开始流行&lt;/li&gt;
&lt;li&gt;前后端开发职责不清&lt;/li&gt;
&lt;li&gt;开发效率问题，前后端互相等待&lt;/li&gt;
&lt;li&gt;前端一直配合着后端，能力受限&lt;/li&gt;
&lt;li&gt;后端开发语言和模版高度耦合，导致开发语言依赖严重&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 02</title>
    <link href="http://jaelyn.coding.me/2018/02/16/django-rest-vue02/"/>
    <id>http://jaelyn.coding.me/2018/02/16/django-rest-vue02/</id>
    <published>2018-02-16T14:58:48.000Z</published>
    <updated>2018-02-23T09:41:50.300Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Unofficial Windows Binaries for Python Extension Packages</a></li></ul><h3 id="Django-REST-framework"><a href="#Django-REST-framework" class="headerlink" title="Django REST framework"></a>Django REST framework</h3><ul><li><a href="http://django-rest-framework.org" target="_blank" rel="noopener">官网</a></li></ul><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入到虚拟环境</p><p><code>pip install djangorestframework</code></p><p>安装Django，默认安装最新版本</p><p><code>pip install -i https://pypi.douban.com/simple django</code> </p><p>安装markdown，Markdown support for the browsable API.</p><p><code>pip install markdown</code></p><p>还需要安装</p><p><code>pip install django-filter</code></p><h3 id="使用mysql"><a href="#使用mysql" class="headerlink" title="使用mysql"></a>使用mysql</h3><h4 id="setting-py-文件中修改："><a href="#setting-py-文件中修改：" class="headerlink" title="setting.py 文件中修改："></a><strong>setting.py</strong> 文件中修改：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'teacherAndStudentSystem'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>, </span><br><span class="line">            <span class="string">'init_command'</span>: <span class="string">'SET default_storage_engine=INNODB;'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MySQLWorkbench 中新建数据库</p><h4 id="安装python的mysql驱动"><a href="#安装python的mysql驱动" class="headerlink" title="安装python的mysql驱动"></a>安装python的mysql驱动</h4><p><code>pip install mysqlclient</code></p><blockquote><p>运行发现报错 “django.db.utils.OperationalError: (1193, “Unknown system variable ‘storage_engine’”)”</p><p>参考： </p><ul><li><a href="http://www.cnblogs.com/chenyang13677/p/7780799.html" target="_blank" rel="noopener">博客园</a></li><li><a href="https://stackoverflow.com/questions/37175295/cant-migrate-django-databases-on-mysql-after-upgrading-to-ubuntu-16-04" target="_blank" rel="noopener">stackoverflow</a></li></ul><p>因为版本的关系，所以只需要改为 <code>SET default_storage_engine=INNODB;</code> 即可</p><p>这个表示选择另一种连接方式，后面使用第三方登录的时候要用上</p></blockquote><h3 id="安装-pillow"><a href="#安装-pillow" class="headerlink" title="安装 pillow"></a>安装 pillow</h3><p><code>pip install pillow</code></p><blockquote><p>这个是图形第三方插件</p></blockquote><h3 id="创建apps的package"><a href="#创建apps的package" class="headerlink" title="创建apps的package"></a>创建apps的package</h3><p><strong>注意需要创建的是Python Package，而不是Directory</strong></p><h4 id="修改setting"><a href="#修改setting" class="headerlink" title="修改setting"></a>修改setting</h4><p>将apps加入到python的根搜索路径下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</span><br></pre></td></tr></table></figure><p>目前项目目录：</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue01.png" alt="项目目录01"></p><h3 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h3><h4 id="安装需要的包"><a href="#安装需要的包" class="headerlink" title="安装需要的包"></a>安装需要的包</h4><p>在vue项目的根目录下执行</p><p><code>cnpm install</code> 或 <code>npm install</code></p><p>会生成一个model_modules的文件夹</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><code>cnpm run dev</code> 或使用 <code>npm run dev</code></p><h3 id="设计app和models"><a href="#设计app和models" class="headerlink" title="设计app和models"></a>设计app和models</h3><h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><p>Django-UEditor</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://www.cnblogs.com/fengzheng/p/3822266.html" target="_blank" rel="noopener">Django集成百度富文本编辑器uEditor</a></li></ul><h5 id="对应代码应用"><a href="#对应代码应用" class="headerlink" title="对应代码应用"></a>对应代码应用</h5><ul><li>把这第三方包复制到项目中</li><li>在<strong>setting</strong>中设置，加入改包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'users.apps.UsersConfig'</span>,</span><br><span class="line">    <span class="string">'DjangoUeditor'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在模型类中导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</span><br></pre></td></tr></table></figure><ul><li>模型中使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goods_desc = UEditorField(</span><br><span class="line">    verbose_name=<span class="string">u"内容"</span>, </span><br><span class="line">    imagePath=<span class="string">"goods/images/"</span>, </span><br><span class="line">    width=<span class="number">1000</span>, </span><br><span class="line">    height=<span class="number">300</span>, </span><br><span class="line">    filePath=<span class="string">"goods/files/"</span>, </span><br><span class="line">    default=<span class="string">''</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="模型类例子"><a href="#模型类例子" class="headerlink" title="模型类例子"></a>模型类例子</h4><p>在线购物平台的商品模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategory</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    CATEGORY_TYPE = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"一级类目"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"二级类目"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"三级类目"</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别名"</span>, help_text=<span class="string">"类别名"</span>)</span><br><span class="line">    code = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别code"</span>, help_text=<span class="string">"类别code"</span>)</span><br><span class="line">    desc = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"类别描述"</span>, help_text=<span class="string">"类别描述"</span>)</span><br><span class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=<span class="string">"类目级别"</span>, help_text=<span class="string">"类目级别"</span>)</span><br><span class="line">    parent_category = models.ForeignKey(<span class="string">"self"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"父类目级别"</span>, help_text=<span class="string">"父目录"</span>,</span><br><span class="line">                                        related_name=<span class="string">"sub_cat"</span>)</span><br><span class="line">    is_tab = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否导航"</span>, help_text=<span class="string">"是否导航"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"商品类别"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategoryBrand</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    品牌名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'brands'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"品牌名"</span>, help_text=<span class="string">"品牌名"</span>)</span><br><span class="line">    desc = models.TextField(default=<span class="string">""</span>, max_length=<span class="number">200</span>, verbose_name=<span class="string">"品牌描述"</span>, help_text=<span class="string">"品牌描述"</span>)</span><br><span class="line">    image = models.ImageField(max_length=<span class="number">200</span>, upload_to=<span class="string">"brands/"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"品牌"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        db_table = <span class="string">"goods_goodsbrand"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    goods_sn = models.CharField(max_length=<span class="number">50</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"商品唯一货号"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"商品名"</span>)</span><br><span class="line">    click_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"点击数"</span>)</span><br><span class="line">    sold_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品销售量"</span>)</span><br><span class="line">    fav_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"收藏数"</span>)</span><br><span class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"库存数"</span>)</span><br><span class="line">    market_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"市场价格"</span>)</span><br><span class="line">    shop_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"本店价格"</span>)</span><br><span class="line">    goods_brief = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">"商品简短描述"</span>)</span><br><span class="line">    goods_desc = UEditorField(verbose_name=<span class="string">u"内容"</span>, imagePath=<span class="string">"goods/images/"</span>, width=<span class="number">1000</span>, height=<span class="number">300</span>,</span><br><span class="line">                              filePath=<span class="string">"goods/files/"</span>, default=<span class="string">''</span>)</span><br><span class="line">    ship_free = models.BooleanField(default=<span class="keyword">True</span>, verbose_name=<span class="string">"是否承担运费"</span>)</span><br><span class="line">    goods_front_image = models.ImageField(upload_to=<span class="string">"goods/images/"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"封面图"</span>)</span><br><span class="line">    is_new = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否新品"</span>)</span><br><span class="line">    is_hot = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否热销"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'商品'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexAd</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'category'</span>,verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    goods =models.ForeignKey(Goods, related_name=<span class="string">'goods'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'首页商品类别广告'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsImage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品轮播图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, related_name=<span class="string">"images"</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">""</span>, verbose_name=<span class="string">"图片"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'商品图片'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    轮播的商品</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'banner'</span>, verbose_name=<span class="string">"轮播图片"</span>)</span><br><span class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"轮播顺序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'轮播商品'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotSearchWords</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    热搜词</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    keywords = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">20</span>, verbose_name=<span class="string">"热搜词"</span>)</span><br><span class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"排序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'热搜词'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.keywords</span><br></pre></td></tr></table></figure><h3 id="自定义User类"><a href="#自定义User类" class="headerlink" title="自定义User类"></a>自定义User类</h3><ul><li>在模型类中导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br></pre></td></tr></table></figure><ul><li>继承该<code>AbstractUser</code>类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>引用外键</li></ul><p>在另一个模型类中导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br></pre></td></tr></table></figure><p>在外键中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    购物车</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">u"用户"</span>)</span><br></pre></td></tr></table></figure><h3 id="独立使用Django的model"><a href="#独立使用Django的model" class="headerlink" title="独立使用Django的model"></a>独立使用<strong>Django</strong>的model</h3><h4 id="进行一些初始化"><a href="#进行一些初始化" class="headerlink" title="进行一些初始化"></a>进行一些初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">sys.path.append(pwd+<span class="string">"../"</span>)</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"Project.settings"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsCategory</span><br><span class="line"></span><br><span class="line">all_categorys = GoodsCategory.objects.all()</span><br></pre></td></tr></table></figure><p><em>顺序不能错</em></p><h3 id="让Django识别媒体文件"><a href="#让Django识别媒体文件" class="headerlink" title="让Django识别媒体文件"></a>让Django识别媒体文件</h3><h4 id="在settings-py中设置"><a href="#在settings-py中设置" class="headerlink" title="在settings.py中设置"></a>在settings.py中设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">"/media/"</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</span><br></pre></td></tr></table></figure><h4 id="在urls-py中配置"><a href="#在urls-py中配置" class="headerlink" title="在urls.py中配置"></a>在urls.py中配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Project.settings <span class="keyword">import</span> MEDIA_ROOT</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...more</span></span><br><span class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="目前项目目录"><a href="#目前项目目录" class="headerlink" title="目前项目目录"></a>目前项目目录</h3><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue02.png" alt="项目目录02"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unofficial Windows Binaries for Python Extension Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Django-REST-framework&quot;&gt;&lt;a href=&quot;#Django-REST-framework&quot; class=&quot;headerlink&quot; title=&quot;Django REST framework&quot;&gt;&lt;/a&gt;Django REST framework&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://django-rest-framework.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 01</title>
    <link href="http://jaelyn.coding.me/2018/02/14/django-rest-vue01/"/>
    <id>http://jaelyn.coding.me/2018/02/14/django-rest-vue01/</id>
    <published>2018-02-14T13:18:51.000Z</published>
    <updated>2018-02-23T09:42:03.260Z</updated>
    
    <content type="html"><![CDATA[<p>需要下载的资源</p><ul><li><a href="https://www.jetbrains.com/pycharm-edu/download/#section=mac" target="_blank" rel="noopener">Pycharm</a></li><li><a href="https://www.jetbrains.com/webstorm/download/#section=mac" target="_blank" rel="noopener">WebStorm</a></li><li><a href="http://nodejs.cn" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener">Mysql Workbench</a></li></ul><a id="more"></a><h3 id="Pycharm-快捷启动（Linux）"><a href="#Pycharm-快捷启动（Linux）" class="headerlink" title="Pycharm 快捷启动（Linux）"></a>Pycharm 快捷启动（Linux）</h3><ol><li><code>vim ~/.bashrc</code></li><li><code>alias pycharm=&quot;bash /hom/bobby/Downloads/pycharm-2016.3.2/bin/pycharm.sh&quot;</code></li><li><code>source ~/.bashrc</code></li><li><code>pycharm</code></li></ol><h3 id="Mysql-管理工具"><a href="#Mysql-管理工具" class="headerlink" title="Mysql 管理工具"></a>Mysql 管理工具</h3><ul><li><a href="https://navicat.com/en" target="_blank" rel="noopener">Navicat</a></li><li><a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener">Mysql Workbench</a></li></ul><h3 id="Mysql-安装（Linux）"><a href="#Mysql-安装（Linux）" class="headerlink" title="Mysql 安装（Linux）"></a>Mysql 安装（Linux）</h3><h4 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h4><p><code>sudo apt-get install mysql-server</code></p><h4 id="查看mysql的状态"><a href="#查看mysql的状态" class="headerlink" title="查看mysql的状态"></a>查看mysql的状态</h4><p><code>ps aux|grep mysqld</code></p><blockquote><p>看是否有启动成功，并且可以查看端口地址</p></blockquote><h4 id="进入mysql-shell中"><a href="#进入mysql-shell中" class="headerlink" title="进入mysql shell中"></a>进入mysql shell中</h4><p><code>mysql -uroot -p</code> </p><blockquote><p>之后输入登录密码</p></blockquote><h4 id="mysql-shell-的一些操作"><a href="#mysql-shell-的一些操作" class="headerlink" title="mysql shell 的一些操作"></a>mysql shell 的一些操作</h4><h5 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h5><p><code>show databases;</code></p><h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><p><code>exit;</code></p><h5 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h5><p><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></p><blockquote><p>修改其中的 <strong>bind-address</strong> 配置，将IP改为<strong>0.0.0.0</strong></p></blockquote><h5 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h5><p><code>sudo service mysql restart</code></p><h5 id="修改用户权限"><a href="#修改用户权限" class="headerlink" title="修改用户权限"></a>修改用户权限</h5><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GR ANT OPTION;</code></p><p>刷新用户权限</p><p><code>flush privileges;</code></p><h5 id="字符集及排序规则"><a href="#字符集及排序规则" class="headerlink" title="字符集及排序规则"></a>字符集及排序规则</h5><p> 使用 <code>utf8 -- UTF-8 Unicode</code> 以及 <code>utf8_general_ci</code></p><h3 id="安装python（Linux）"><a href="#安装python（Linux）" class="headerlink" title="安装python（Linux）"></a>安装python（Linux）</h3><blockquote><p>安装的时候可以使用 python 豆瓣镜像 <code>-i https://pypi.douban.com/simple</code></p></blockquote><h4 id="获取python3版本"><a href="#获取python3版本" class="headerlink" title="获取python3版本"></a>获取python3版本</h4><p><code>sudo apt-get install python3.5</code></p><h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><code>sudo apt-get install python-virtualenv</code></p><h5 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h5><p><code>virtualenv py2_env</code></p><blockquote><p>会创建目录为py2_env的文件夹在该目录下</p><p>ps: 移除文件夹 <code>rm -r py2_env/</code>或 <code>rm -f py2_env</code>移除文件，慎用<code>rm -rf py2_env</code></p></blockquote><h5 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h5><p><code>source py2_env/bin/activate</code></p><h5 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h5><p><code>deactivate</code></p><h5 id="创建python3的虚拟环境"><a href="#创建python3的虚拟环境" class="headerlink" title="创建python3的虚拟环境"></a>创建python3的虚拟环境</h5><p><code>virtualenv -p python3 py3_env</code></p><h5 id="安装pip3版本"><a href="#安装pip3版本" class="headerlink" title="安装pip3版本"></a>安装pip3版本</h5><p><code>sudo apt-get install python3-pip</code></p><blockquote><p>遇到 “OSError: Command /home/ubuntu/Myvirtualenv/py2_env/bin/python2 - setuptools pkg_resources pip wheel failed with error code 1”这个问题，解决方法：</p><ol><li><code>export LC_ALL=&quot;en_US.UTF-8&quot;</code></li><li><code>export LC_CTYPE=&quot;en_US.UTF-8&quot;</code></li><li><code>pip install setuptools</code></li></ol><p>参考： <a href="https://github.com/certbot/certbot/issues/2883" target="_blank" rel="noopener">setuptools pkg_resources pip wheel failed with error code 1</a></p></blockquote><h5 id="更新pip版本"><a href="#更新pip版本" class="headerlink" title="更新pip版本"></a>更新pip版本</h5><p><code>pip install --upgrade pip</code></p><h4 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p><code>pip install virtualenvwrapper</code></p><h5 id="查找路径"><a href="#查找路径" class="headerlink" title="查找路径"></a>查找路径</h5><p><code>sudo find / -name virtualenvwrapper.sh</code></p><blockquote><p>/home/ubuntu/.local/bin/virtualenvwrapper.sh</p></blockquote><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ol><li>进入<code>vim ~/.bashrc</code></li><li>在最后一行添加</li></ol><blockquote><p>export WORKON_HOME=$HOME/.virtualenvs<br>source /home/ubuntu/.local/bin/virtualenvwrapper.sh</p></blockquote><ol><li>ESC <code>:wq</code>保存</li><li><code>source ~/.bashrc</code> 运行生效</li></ol><h5 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h5><p><code>mkvirtualenv py2_workon_env</code></p><h5 id="目录安装所在地"><a href="#目录安装所在地" class="headerlink" title="目录安装所在地"></a>目录安装所在地</h5><p><code>cd ~/.virtualenvs</code></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li><code>workon</code> 查找全部的虚拟目录</li><li><code>workon py2_workon_env</code> 使用该虚拟目录</li><li><code>deactivate</code> 退出虚拟环境</li></ol><h5 id="创建python3的虚拟环境-1"><a href="#创建python3的虚拟环境-1" class="headerlink" title="创建python3的虚拟环境"></a>创建python3的虚拟环境</h5><p><code>mkvirtualenv --python=python3 py3_workon_env</code></p><blockquote><p>ubuntu@VM-65-204-ubuntu:~$ workon<br>py2_workon_env<br>py3_workon_env</p></blockquote><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>参考：</p><ul><li><a href="https://nodejs.org/dist/v8.9.3/" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.3/</a></li><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs download</a></li><li><a href="https://cnodejs.org/topic/53a92af6c3ee0b58203258fe" target="_blank" rel="noopener">Linux（Ubuntu）下安装NodeJs</a></li><li><a href="https://cnodejs.org/topic/53cb1242c9507b40442875f6" target="_blank" rel="noopener">linux下安装nodejs+express(最新版)</a></li><li><a href="https://jingyan.baidu.com/article/cdddd41ca7b87853cb00e1af.html" target="_blank" rel="noopener">Linux下nodejs的安装配置</a></li></ul><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><ul><li><code>sudo apt-get install g++</code></li><li><code>sudo apt-get install libssl-dev</code></li><li><code>sudo apt-get install build-essential</code></li></ul><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><p><code>wget https://nodejs.org/dist/v8.9.3/node-v8.9.3.tar.gz</code></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p><code>tar zxvf node-v8.9.3.tar.gz</code></p><blockquote><p>移动文件 mv source_file new_file</p></blockquote><h4 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h4><ol><li>进入到<strong>node-v8.9.3</strong>文件里</li><li><code>./configure</code></li><li><code>make</code></li></ol><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p><code>make install</code></p><h4 id="修改环境配置"><a href="#修改环境配置" class="headerlink" title="修改环境配置"></a>修改环境配置</h4><p>参考</p><h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><ul><li><code>sudo apt-get install nodejs-legacy</code></li><li><code>sudo apt-get install npm</code></li></ul><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><p> <a href="https://npm.taobao.org" target="_blank" rel="noopener">淘宝 NPM 镜像</a></p><p>可以使用这个代替npm，国内镜像，下载速度可以更快</p><h3 id="安装htop"><a href="#安装htop" class="headerlink" title="安装htop"></a>安装htop</h3><p><code>sudo apt-get install htop</code></p><blockquote><p>可以查看系统运行的状态</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要下载的资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm-edu/download/#section=mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pycharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/webstorm/download/#section=mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebStorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/products/workbench/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mysql Workbench&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Httpie</title>
    <link href="http://jaelyn.coding.me/2018/02/08/httpie/"/>
    <id>http://jaelyn.coding.me/2018/02/08/httpie/</id>
    <published>2018-02-08T03:19:38.000Z</published>
    <updated>2018-02-08T03:23:44.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><ul><li>HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。</li><li>其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。</li><li>这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。</li><li>HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。<a id="more"></a></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>直观的语法</li><li>格式化和色彩化的终端输出</li><li>内置 JSON 支持</li><li>支持上传表单和文件</li><li>HTTPS、代理和认证</li><li>任意请求数据</li><li>自定义头部</li><li>持久性会话</li><li>类 Wget 下载</li><li>支持 Python 2.6, 2.7 和 3.x</li><li>支持 Linux, Mac OS X 和 Windows</li><li>插件</li><li>文档</li><li>测试覆盖率</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip install httpie</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/pzw_0612/article/details/46521965" target="_blank" rel="noopener">HTTPie 工具使用入门</a></li><li><a href="https://httpie.org/doc" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。&lt;/li&gt;
&lt;li&gt;其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。&lt;/li&gt;
&lt;li&gt;这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。&lt;/li&gt;
&lt;li&gt;HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。
    
    </summary>
    
      <category term="工具集" scheme="http://jaelyn.coding.me/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="httpie" scheme="http://jaelyn.coding.me/tags/httpie/"/>
    
  </entry>
  
  <entry>
    <title>Byobu &quot;多窗口&quot;的Terminal</title>
    <link href="http://jaelyn.coding.me/2018/02/07/byobu/"/>
    <id>http://jaelyn.coding.me/2018/02/07/byobu/</id>
    <published>2018-02-07T01:52:59.000Z</published>
    <updated>2018-02-07T02:29:00.153Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 测试密码工具，密码是： lim "/> <label for="pass"> 测试密码工具，密码是： lim </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19oHmjJj4/BoUfXA9qna2RJATve7FTJHwup/l1+yv6wCAoKJlZvdi+DqbQAnS1ro3fU2DTgJnXY5GiFeY+Qn332GptvNy9GNFkYa1FPZOh4GH6ooKarz4A95u7Ydn52piqURcptPGgsezapUpIFJgtayE0NPpLxUwA/IHx3x9Z1LoQ/NvwDWeEzPj6GGOlGx+0qo/0G4Y+PfBAobH8IGAk/NtbczrPcUtZt8UTf/qSRFdlhQ+Hhs2a3YOyWFu00/yuH6mUagY838V91fB4uvzo23WKCjavDU2/Kx221J+MSPlMu7Ee9h+g127rpmr2/abVkLplnfgv/5yi+nzRs5DeIyycMT8kXo76u2LfdlFvzfWgMNoKGZHboeGsanUCqFqkvtyTnFbpR5akNTWZ8Ip+cew54SIz5gVtwW6lLXwXnfNSywtyErCF8f4MAcafDXSRMHt4EOwxaA2ZBuwzmStVf51G3kaKeuLDOGonJebKf86IBxVdfxNUILm4SFGPjIv3pX/3+QqBl/yYV115Nm33t2R2/a11NgDuF4o4GYLXH0tGiMXNsH04SOmK+eA8ygrTzHdf7TFBE3ovF5+kZmGwdeLYKaKciHZtblOHClfGhl9HeXr5po/xOUvQcFVd0ORhp88cC5FxiCuzXPxEwBPsQkb13Jj3UJz0D1HNGT1dZh4EqrNMq3eCaZVcTm2eNZDctvg9luosjbN3EZkzeOi5eCbq9olVeixf3BPHrLhjzXqrCNIlW0rh3p25N+V0SOBdrTO9hGLKnQdk6cOqC2Whsa8ZaWHZEkxzC1tAijSqurYeIje3X1quzh7PltqNMcAbGFHiGh8xmLIlorfRzd2VVUrTBhgw/crqNjqa9LqG0K6ImPXaZKDHNjFdSjTGrW6/TX7Qi86FtWrOme7hScYUpqgfDA/Bxn7cUzWESVaHt1ooiFlC/8vfbzclVV8Pkrs/VCtZk28JUcItgWzqe3Vcir9I5kh+dc+RjKdPojcwZ2pU/HvM9c38coIgyD40C8tnhzt+rMA11vomV5uggQzCf2IE10kWYvep9YkIBXto3b1k1PIuKze0HqGc8QQLJJOywbcDHuht6+ZDNFdNV3fUHaNx63m7QjhKHC17d0Ri6F+Bm4M91pw0L70YqJbQE5Dy5PpXPMMjC00CCATERZoNvcxtQYkhRyrbAmzY2lWe9x3tUoDbLG7c8jfGzbm/xZ5fMU7GmDehZ1QJlV55EqFecE1AP2I56wnp6JVNBDLnWmK3ekV9WVrPmy/2N871UVSFcC3Jm6nIJmuwwG5F49Yql+DiBo9JpFPS+V/7KpRfLXLjVXkaum+f+jiq4rs0hXstjMjFGN9prF0JeNUrcSrUBoEgNfZByZX+BhVVwCfFw90PfaYsaLonCmuZCTpdh+d6kY4if03627QAsYnXCVgKV/laBe7kD7Mx8UiRf7C2mobca0k2uO7v8r9ooXeyVdfBwIHA3qpWozmUGqkoRnaYVeGvci2Rdw7g944IvHxInQ895AgjBgQzSf6JpMaHBH2xyNfQJzdIZjVuafUzJEZdlGcaCOM0a2eS2a1Hq3JqRzQVkaCTqhe+ct7ROgMqf/wdkCQfSVMADNc2aidgVwM9PQs2rHtISWTYfLhq7sQipcjqwoZEwfMypDcdjzDH4Fu+LaF4onF2zr2k/uRf7w0idqUyKGrSGOZOz29iYJEsNJd0EoVj0gA/64Gascv4G/Jf46GaNrR/wC177EzD9zthMM2EHCvAIq64jQOTZUPMEQnviTPmfIDgeJY9upkuqzYbh8wYpaIm5ivpkdjF4tHO1q3kMXjQQR4jeliUXr+LGG864cbpOXaJ3PDRfhUbMnfMWrsPm/ey2SqtWbM+kLfWufDl5+mgS5PjdTOeLk+VtFIMUy0K4ni7+9AfdAQSiSBnKjv4MJbdpq1YgQWgqsT4V+QnAfUYepMeA0aJAOCD4N+VH8Vk+IxUdE3hUYFEN159+5VGqMJ9k/vswG2EyJzgrjHSfnyEY3rGz9NsgUr2qZSqcRSbR5jAGB0Hs96WUHWlRUMbh5NzO6zkaJnDaEOC+/TlpFFJoVG/5nJo4X+fMbiY2n8EKdBb8nq2+poxk/8TrILUoO9Lf4/HsqXGhvhXX3EbM+0bo/iyUfBN+rmlpef6JSIclxfzz+jFVbuUc5bVpOIWY/YEUSp1zaa5A76YkTGnhJfQPOng1KsWYf7RPXzpPRsaxhpA9qOT70MstoWTeWID27uvWXt0AGKAU2MtPycBJnYujWUx1KASNf6lpy0oqP5d1Bg79OrnHobjm9zyNyJVLZbYtmsjWqy7XbSerrGyOnA94XCx8oDvw/Xmk2Lt/cOwmJlutSehhUVekXuQOEJhJla1LE//b0bNOiGvmwM6J4guVT+QhCNLDy2sRxs+vrKbePOI+Mjq14Uacoc4pu/PGn0kYqCourUs+eJmmhFmRiJknpdizJ381HBJJsU9dv8K994oG7wouec1fIBrWW3P0kvJnfSISBbdXfDkwhlMo9y92MHwkuL1mJckDqpJgUPb+HrmD0lnICyWkEOGTgoaim84WnvCHtOxUYszeO60G5q1XYZGY5kXH/dCZDdv8EPaxgzOvuWWTSS2esUkCJ0MtDxWdTL7fqpcGcLvMgzqw+z+dqJZ25fGIb0Pl/I3t5q6ckJhWFmW7c/nEkBe0xy3sx8edclF7e3OrkOpwC35VCzPZ8nc7wpiXKCGQpOcYmLS0Aqw3588EThBA9+6Iu419NX7ZHQ+T+WDIiqzZ9HhaGh+86N+LFVrZYtq/xVRe8NQ/TfBgOrveVaGXWyfFrFTTbt+Dg/jLKWL4LUAxEbbKTIQzcmLt0tiWw3VeZNd478iAFq5D+xZwg3vlbXVvHoDeZd8Lk2yANN66vxOD3E1Nyte662pcz42eE9/SPN0i9eVsjcwEMUGmEB2VZMfyssRETbqd5z9S8XCrKom8dDzGB/0osDmD2xeNVsNRGcroCFCPPneY+zOa0mi+6tDMezU4v8uYPj5fMwVddCfCYpzmIUPxjkvEPZO5LkEJAlIpU/M/IHHOdIldShAsjCQH+Tynx1atH5fp+3Ux+N20G0VBmFT2FEKRPUqnNYiAlHDLwBZ6Fd0SqEsJSFKJp+OnV6+NOv0/1Snpk/i+kaJ/8BzLMGae2jUd2qQr84YHfc95kZBqfxfd3xrEf1RuWcUCcEmvvGvG6NUggv99RlIBcgIdM5nwXJydXxUMTjMii7dO74uv5HHLME8Rh8MyqKiOSpA41T8ovlAaD1oIDdWiMf7vV+rVQzZO1QqO/Tv6EQBpm+RM1mqhVm4McrR8ubxwB142SVL+A/MKzvr3Nuu8/mkAd1PSBCVInirqxlUebfCv7n8BOIuDg4s8NTA5Od5kliGX8MGPtZea72ZAYV/LYsxzBVabKo99ZFBxszsXay3xpxzkR93jQYXT1+qCzXmQY8GpAbZy6pzekxFULerIu8LC+B1jA6PXWSL1GRa3v28c7FUNozPRgk3atdrRS7z3DY9/LTsCp9cl5HmoAAt4qKHTdTS2gN4+OdkOwJ5NCJfu6VMdC0y1leS5mZJooYuae9uwxPPq1MgK4bxnkv0KAsdv7wRnP5H0rKxxciJvKyH3bJdZS7k+iH/BiV5eVoKD8mAxay3jsi2K5Wj3xMngqgXW1VEgRA0lwh8WWQWLuqAhuNcSAm1ySXVnZB4ZYOaiLxa0mdQAwAyLF5M7ldiBqvJbp3FYy8Q8guqMyPyfHD0fwa/K6lwXVcz1SMtjglVYedh52mUafAbl2Ld3fgAQ50ph2X1pESxR6r68Cqv7pGb01Z+709n0tMc0set4vA2nEAAxgERDD2MwrwgRR03emcDmj3J2xJzltEdyneoywytG3JOw/Sa3kYxGfp1LXm8/5+mhqKWsXleTifP3npHFsk8HZZujIfQsuN04I2H0iJ65TuZS7qg+qHqfnvkqAl+OmUw7GFZp1TYwjdFKrugmzRZT3BpXrcuZQctIi1HtMibt3Ng8ztcNM1z4tpzyFjIA5hVfJXIr4D6x9AI1wdhh+lazwuiTAdyshlqRzQVlhwqr+Vw4Xhq3zk7qE84xOu2eISHn37ixxMH4R7l2hNwL+dStK6NEE1TbqcD9bObGqrakdxijoYKra7oXqQF+lprvsHoHYwp4R3SJ7UGgYHqh6IahiSv36LYvi+o7yIIfiOioDXt5KILWtyD2/kfNXoibWW8wJSYMQUW68JnM62OSkqLxamuTXm2kTuzmp8IQ1sDHhqTDRZcxE9HONid6Se0reBNWT7AYs+8J0JES5EG6HJxHbgeq+sk1Jm8RT7u7CLVLVS3fcb+6sYpIRsJzE+e0DiAQxW5LmkvzQdSgVUhIP/82gfchy1/KMb5CtO03kcFFC7L3xLlXgX6gsEYyZxAX5nRR5piy3T1SFEGnHzgvxjLWaxgBOaYIz2qYIDIeOMRooqkwxfTsStZDn6EVvFJoVWekht3qpFuX43pytrEh4GYtBfDuuU3J7Dyo5oOm1Gf7B/VYl1rSDc1oBIgI+yKJkV07JSxakvQH8HijbJf5q+k7rrqie68EiuhRYFIsE0GVpC/6wUVptV2OFfy35hkm4+BMAA0P5kvSMVF0rsRmyLwVUMt94M9EZwUS4JzTVIUBuo5TWKIIc3yPEbJrRM+Ff96/TuhK6ejSTif7nsGawcnAJQHaU1CNRM63eOb6YIL9HCSbdHReRCAlF+jv+vq6OUMNTq0qe57la8uy6FelvJLCmGYbEKAUBRmCI/j8eCpz1vepSutzdt9exBk6qoH6971pYhSnlMCxvkZ94wUPQtJXPTFD1l0dG0cAmhY9MNV+IFVEjV3dTmZg7CI24cz0fKJ2vObxGSuP/KiTri+Z2io7Tox9m3bxUpOOEGStktBgdYkhjS2BfCIfh7+rKEP64WYO0pORho9fJdCxKT01zoJek4YXz6vyR3LFjuvXfvn698AtwozJpnrVB4LH6eCnW1hBDu+nNDn0AlAY9OJCw/98tlkgftW3sNLx3ksKoDefik1yHGRgFbYP1n+W8H5esNPknBrKUQJvnM2y1sHnfoBKrG/2QOeZqfHdqlCRLNfs4suO3FBwNC9ShBeNofmCy1C8/GqKYSecOIOvawI2fupGDC1V6PrzVg+q3kTFPjZE84OXtUdGFBS0r88YzfmZ5L7UlVLo3kKl/cIEK1uJMW9bINh2FkLzBUAS//DluqtKITYLsp3ZTWifnQh8c/3xDafEIYG4u23GHmKKeReQTu8giuycOps9xJgper5HXCIVbuIdGGMTBlAfwvimAW5uRvJHFxn02GZMpUAZBuIIoHHF1O+aZugstYxNlyrZ7WlOYjyvAu7whPlKze5qN73zhplFUULi9JPLmWqbisVHifZICupnZITnejQXdyANBBdG7O0SwDsYte3tfAkRJPPU0fGKzEtWwEe9mD/htLUd/QnuQuxc0JPtVMc5bXDjlx+VPowcXv3SfnSYyzxeXV+9O2qhilNbG04gX7vxZGNCZyCSNDhcc3OJnJRDqjvxfeQ0g5zc4Oyy00QHFwd7XIzDGtA0uPR3xBjJ45N0hhA6M4RNrkhfMqoraWqJQClVu2LsSXd0EZXgrKgL/87giO7laOklSXrd7Q/iIg6jecDiMKh3erHQtCGU6RomK+j+2MHF67g4+tiVUZBbd2sW/qCqN2YeCaSqiQiU/zmf9PfY6aHTr+RBUTtugDmM2HRGywr7yWXrQp8QS62uUTfEKB0DmC2yRNn6X3pSBzpkeCrJRjYkpvc+NDYXe9UTnBLtXK2vmMwQWl5UFU0V148hvxoSr7ToMZekAzGOx59XIpko0Nk/Z3noIIYHBvKsY8mRw4VuFbBY7tP1huuYqGxnmE9xiH48HXhg6OtutoLM8BM/X3JiFlZ59vqJHeg1+6xy30WqOw5kjuhouOmv2wN/ZkED05xYpNuxvZDUgFE+Mb7ZAix90WQ8XCexHDvLmVuzfl289QYSBIITqf80s1hFfjJhBtKPpPvh8msUZp3L7+cqUOPkrwZpJ4eCGgiaBkcaK35zLyhTZNtPTb0bFtkSl1fKqHTAyo5+ESwMOyXHyRte1QYrf5LeAjQzWlUDRZ92pBwUIg1x/vM3waz3kWsIBGA+CVEb1xll9xpAN7IvXaBwyFkOl3xkEx1RYkAG1buPfeZ+4ZMfikq3Xk64frU53LKn2ylQjQIj/0hHaNS4KsGwQlQXhIt6RlNV1QMrGCJA29C0WqxEbtIcAuo798pPP9L+0pOongy1bKZXck7ta3qgwfk7bEkvEtSWu13HcmF4yHcnn9PQmevXYQcNm/lrFZ5iRij8honT0qhm8u8yarycGH0p7hUs6NEto9s+O8yk7iG1gAfRlWmglKJ9amMyRZn/ulZep9qVNVPYHIdBdvMDsIxk9AiMEAPLy5tqaxkfNqecTnDiP2JMIJVEBP/M46v9IL6cQbwIEJousVdK9GkHfUiNOtJ/lW8nbCy4zzXHq6AkL1bgv10ZiDnOgbf87+asC1F0GS83a7kWf5Xgfjx3Ct21p69Yu3kznghVVi5BWj4PzCQ9MLXxPl0AYX2c2OCfLoeHQjuiC0ulRAFYevFycTAp8QxDwwGDExW4U6fxkHySl1JqRJIwPbbGAYqX4E/oJA80yQarWgARWsmC/cwyHCYYcqcPqB1yAs83UceKAXU+vRagc3DbNxvoIKWgy4DXHeShaR26WppWsNXNW3Pk/XJXXyxbkVfKUUK1Ppu5iWmHseRwjUa83oXLf29T3aXooVSndi8YawGKTJ+ds+wvBRPqD8sAGp9VTopL1xCjXZQ8eI2QSgTigc6ax0dKaGt81DPiu3jexUpMmTQy6QyW2D03AK06QXGsJWNDGo6JzNZEDBK+q7zTsGRTlhF2VzU9vr7q7I/H26TrBhrWlytcOD+ZwUQERD8AqlKoXm2Fm1Z2SuTjIUbS8XuSJ0BTmqiQM+g2obtD1r0w+07jdliK6KpQSPmigVkowNeTD+Bp5bxlLxUPwrXe4EGeEl0y5EqxrZ2FOTVU3XpvcTsxI+W2fHz2aWLwmCbq7nlWFmXg/vHCiOoEnN9FPFAzzMEXhN23NWgqrAin8olbLTUYTdUknO7y5alsrx0Un+qq4GH0NVYQXNX4U4Ob8CKXiqxfobvm3OlhexpjJwH1IEw5pRmDxkFUi2GPodai4m/lwU71k653H8jjfiLgHMDZaHW3hCYVKA9psZmt2R+D1mqo3FsG/iEEA5R0NfsmxaZRDWVsKvW74k6q0y3o1P4gI3HC91iImy1bQfPNOsTcyeuZfyzErHAXpo0AObkgexiDTvvRFMH+8cRsZd8HUPsc3tDsws3RNxGtLkHP2FkBL/z8CkkynRXIXae7R+3WnrPy7UaD0KoIQF8T3AOW3npz4buJ4otTmp6I5HM++ydy5X4AbnUuDlBMiClj+tWMN/TWLLyXBTNBgp824wBI3SR4FGpo5Sxz5AnWghQGe4VWQlDma/P/aofntJwsMIB2/X2LPcgcNn1mjAoOdVAWE92H8kSoWVbn9L1C43Y2VzUVuJoqI2DWp/Xec1fr0U82Mj+mLPvxrB6vLDolAlcTXmHIsrpcnkknNe+XVg+In/MHi72hk8lYBMihpImMh5MsHlVJ5iywDfsQRHBtaSSQWstWApz5Ry32yDBRQdV8bIgPgugrdD4j24pclTNjHNZV4yCXYG93gn0dlAPoVeM9aiEoGzm2YGudRQ1rQVFioWWROch+YNOl1A6BhCa5OHlAkXXbtdQTqPvxeTN5dK3uYpl8wv1yRuyQh136ZBV79gRlNoKCMTM43QrST/uYvoCLG7IkdShLC5p4IxH6sz+lxrylnWBtfvYyumw3HwzCGKsK1v3pPC8iB9RwT6xEcaWDfTMWLKmjCcXVSK5fEHd2luGPYjzHUvteEEgtTfsi2oO6zA9ZhCKuoovs9NiGsAIUTkW0XeDLV5MuJim/mei8h8S8chXrKD4/ftNbgyPGIbXzYsKDNmJsqtGZ7D/jjm+w13ZYvHlhjuueOKot/T7TXmUyC+SRuXlO4YEpHr6AhpV42argzZAYsxd6fKcyDYKHYgSii7Gmgt6mIcer9HFkeDbWjxKCI9Qu36ZnM8/Qq3eTVrSTrK9JL9zfL11Wjh0nGJxvCek2yBh1NZfe6nxeYK74EljThu2BmhnTK6KjNExiabQdGFtsiM8H3K8ABhRoeZMC36Bpb+RCfo9crgtgUfZyHBYTNOS7eFHGcZfe6+s2Z4+gshEEMKR7TFBofvoGGYNFJFuEjwYlE/K8E7TLEGzMewkvoL3dufRDnQE1Cq2HgC756u2yoJgHksTLM45pguVco+VNSzxdt1so1wHTpr2c4chkhkhtWePB7rT5E9eQNh0lo8GbiRLiE4VBG4QdDlYBUgK8BTXtOyHQpXe9lIgt/eUvZbsW+0xtYnCDJy220x7+0ieMhxgOqN7DIMao8tAmZqXA3nEJz3krPJFmnWcYcomTbEcEArfeKJTEi2USi+TNcnnfJgsm6ELwBxbpPBuuKNdxIpqBtTdxfZog5zEbx5+mLpFjwMFewswQ9R477tdUS+BR2M9isRu9BtD9CNs9blTER6agmSGvPr/25ajZdoJ9DUlvK9h3Kh5mbDvHqm+jtX6i6haYjqrc3pTOunhvwCkYysEF+TfW9Itl4+UEiNlKEskcsa0f9ZBQHVdGi3nvNtRrszp21vF6t4lxm7sR1q9QnS05+I1PRgz4JoB6SJrQqpflyHoQiHsmcuwJUfe7VMGGRubxo08W2gA1x1vh17HV04CRwpdtfspYeds7W322fe31z5ZFze9PxYkYm0/+J2zHmaKtpfN1AIkE76V+rtnJqBOg/IzkOGtPw4SKYUQ46dEp2VElo93kZl+Z8N3PX9FmXCJ4948tidmjtuFHOlnXPyD/Djzugq7E8VMoabLccAtq/tQOpS+7y34o+Y06+a7qzijdhAT1UaCMOeTEqFhUpe2qL64lyjva3dl7xQeeh65TIGka+ldYy5AERNeiy/KEytCHKQhk8CYimOfLP2F6k0FkbbKmlaJTW0uiqZ8Su83/VHnIOJviUfcuePks7h9va8YTT5cCrIAajNzPnBwZvRtbboZhh6o8dNqZS8JtR4Ru5EiQQojV+sf0hykpCJ260O642BXJuN/qOadu7KVrSUWlDMIw77XI6TGMVE7w58wOaAjOqLgJLzY84NE5KJvvYlQRpgZDk72+Y3CBy8lwgrYjgiGnpvSw7BXnooklGBni84Sia2/J4cDRxkFflui15QsLqasgnCoM7otj4Ti83O64wcwB1LZjf+2vdSBt3CFe5VJMkX3f+kb/+fHwZ1IYZ+f6JZjf5GxEdrylVfqpeU+y90KsiXgGgXjMoSFHN0mhB+gAhGrnJKJrOMMZedu4rjf583wBYU+stXLkySP/WkQna6rmi7PYnY3aLBuffvMGt1VC2yND5oTmRb2ReTPpuCWxmSfHOhwAfjWl/RjZnbWc8YohkbTsMCvXCofZYpNj1wjNuyfp9onsu8q5Xm7GbPK1J1VbipiW9XnitdsqVv+1WIDpgMSm </div>]]></content>
    
    <summary type="html">
    
      Byobu是一个日本术语，用于装饰、多面板屏幕，可作为折叠室的分隔物。作为一个开源软件项目，Byobu是一种优雅的功能，它是一种简单的、实用的、实用的GNU屏幕。Byobu包括了一个增强的概要文件、配置实用程序和GNU屏幕窗口管理器的系统状态通知，以及Tmux终端多路复用器。Byobu是在GPLv3下开发和发布的免费软件。
    
    </summary>
    
      <category term="工具集" scheme="http://jaelyn.coding.me/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="byobu" scheme="http://jaelyn.coding.me/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>Django 学习笔记—基础01</title>
    <link href="http://jaelyn.coding.me/2018/01/27/DjangoLearning1/"/>
    <id>http://jaelyn.coding.me/2018/01/27/DjangoLearning1/</id>
    <published>2018-01-27T05:50:16.000Z</published>
    <updated>2018-02-07T03:16:37.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://python.usyiyi.cn/translate/django_182/index.html" target="_blank" rel="noopener">Django 1.8.2中文文档</a></li><li><a href="https://docs.djangoproject.com/en/2.0/" target="_blank" rel="noopener">Django 2.0 官方文档</a></li><li><a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">Django 中文教学 自强学院</a></li></ul><a id="more"></a><h2 id="所需指令"><a href="#所需指令" class="headerlink" title="所需指令"></a>所需指令</h2><h3 id="用指令创建项目"><a href="#用指令创建项目" class="headerlink" title="用指令创建项目"></a>用指令创建项目</h3><p><code>django-admin startproject project</code></p><blockquote><p>一般不用，直接用pycharm创建就行</p></blockquote><h3 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h3><p><code>python manage.py runserver 8080</code></p><p>运行后，才能根据所生成的网址，访问服务器，后面填写服务器的端口</p><blockquote><p>也可以不写端口，如果没写端口，默认使用8000端口</p></blockquote><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p><code>python manage.py startapp djangoAppName(这里填写所需创建应用的名字)</code><br>或<br><code>django-admin startapp djangoAppName</code><br>可以直接在apps目录下创建</p><blockquote><p>有点类似于模块的意思，分模块开发项目，一个模块对应了view, model等内容，需要创建新的模块的时候，需要使用这个指令。</p></blockquote><h3 id="生成迁移（makemigrations）"><a href="#生成迁移（makemigrations）" class="headerlink" title="生成迁移（makemigrations）"></a>生成迁移（<code>makemigrations</code>）</h3><p>创建迁移文件</p><p><code>python manage.py makemigrations</code></p><blockquote><p> 创建之后，在所对应的<code>migrations</code>文件夹下面会多出一个<code>.py</code>文件</p></blockquote><p><strong>如果使用的是Django2.0 并且数据库model中使用了<code>ForeignKey</code>，需要在后面添加 <code>on_delete</code> 关键字</strong></p><blockquote><p>在使用这个命令的时候，需要在<code>settings.py</code>文件中的<code>INSTALLED_APPS</code>注册应用信息</p></blockquote><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><p>根据迁移文件，形成sql语句，创建对应的表</p><p><code>python manage.py migrate</code></p><h3 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h3><p><code>python manage.py createsuperuser</code></p><p>接下来按照提示填写用户名、邮箱、密码</p><blockquote><p>后台URL: 在网址后面添加admin</p></blockquote><h3 id="显示所有的指令"><a href="#显示所有的指令" class="headerlink" title="显示所有的指令"></a>显示所有的指令</h3><p><code>python manage.py</code></p><p>会显示所有的指令，并且在后面输入<code>help name</code>就可以查看对应指令的具体信息</p><h2 id="Model创建"><a href="#Model创建" class="headerlink" title="Model创建"></a>Model创建</h2><ul><li>在对应的模版项目下的<code>models.py</code>文件下创建数据库模型文件</li><li>创建模型的时候不用创建主键id，系统会自动生成这个主键的列</li></ul><h3 id="Models-py"><a href="#Models-py" class="headerlink" title="Models.py"></a>Models.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName1</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    date = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'title name is &#123;&#125;, crate at &#123;&#125;'</span>.format(self.title, self.date)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    hname = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    hgender = models.BooleanField()</span><br><span class="line">    content = models.CharField(max_length=<span class="number">1000</span>)</span><br><span class="line">    modelName1ForeignKey = models.ForeignKey(ModelName1, on_delete=models.CASCADE) <span class="comment">#外键</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.hgender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    gender.short_description = <span class="string">'性别'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br><span class="line"></span><br><span class="line">    name.short_description = <span class="string">'名字'</span></span><br></pre></td></tr></table></figure><h3 id="Django2-0-ForeignKey-变化"><a href="#Django2-0-ForeignKey-变化" class="headerlink" title="Django2.0 ForeignKey 变化"></a>Django2.0 ForeignKey 变化</h3><p>在创建外键的时候遇到报错：</p><p><code>TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</code></p><p>查询一番后发现Django2.0版本创建外键时需要在后面加上<strong>on_delete</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    manufacturer = models.ForeignKey(</span><br><span class="line">        <span class="string">'Manufacturer'</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="站点管理"><a href="#站点管理" class="headerlink" title="站点管理"></a>站点管理</h2><h3 id="界面本地化"><a href="#界面本地化" class="headerlink" title="界面本地化"></a>界面本地化</h3><p>修改<code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><blockquote><p>修改语言和时区</p></blockquote><h3 id="向admin中注册应用"><a href="#向admin中注册应用" class="headerlink" title="向admin中注册应用"></a>向admin中注册应用</h3><p>在 <strong>booktest/admin.py</strong> 文件，注册模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> ModelName</span><br><span class="line">admin.site.register(ModelName)</span><br></pre></td></tr></table></figure><ol><li>导入<strong>model</strong> 类</li><li>在admin中注册该模型类 <code>admin.site.register(ModelName)</code></li></ol><h3 id="自定义管理页面"><a href="#自定义管理页面" class="headerlink" title="自定义管理页面"></a>自定义管理页面</h3><ul><li>Django提供了admin.ModelAdmin类</li><li>通过定义ModelAdmin的子类，来定义模型在Admin界面的显示方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelNameAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br><span class="line">    list_filter = [<span class="string">'title'</span>]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'base'</span>,&#123;<span class="string">'fields'</span>:[<span class="string">'title'</span>]&#125;),</span><br><span class="line">        (<span class="string">'super'</span>,&#123;<span class="string">'fields'</span>:[<span class="string">'date'</span>]&#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br></pre></td></tr></table></figure><h4 id="列表页属性"><a href="#列表页属性" class="headerlink" title="列表页属性"></a>列表页属性</h4><h5 id="list-display"><a href="#list-display" class="headerlink" title="list_display"></a>list_display</h5><ul><li>显示字段，可以点击列头进行排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_display = [<span class="string">'pk'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>列表里面填写的是字段的列表名字，表示要在后台页面中显示什么列表字段，先后顺序决定显示顺序</p></blockquote><h5 id="list-filter"><a href="#list-filter" class="headerlink" title="list_filter"></a>list_filter</h5><ul><li>过滤字段，过滤框会出现在右侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = [<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><h5 id="search-fields"><a href="#search-fields" class="headerlink" title="search_fields"></a>search_fields</h5><ul><li>搜索字段，搜索框会出现在上侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = [<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>支持模糊查询，根据列表中的字段进行查询</p></blockquote><h5 id="list-per-page"><a href="#list-per-page" class="headerlink" title="list_per_page"></a>list_per_page</h5><ul><li>分页，分页框会出现在下侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_per_page = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="添加、修改页属性"><a href="#添加、修改页属性" class="headerlink" title="添加、修改页属性"></a>添加、修改页属性</h4><h5 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h5><ul><li>属性的先后顺序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fields = [<span class="string">'date'</span>, <span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><h5 id="fieldsets"><a href="#fieldsets" class="headerlink" title="fieldsets"></a>fieldsets</h5><ul><li>属性分组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fieldsets = [</span><br><span class="line">    (<span class="string">'basic'</span>,&#123;<span class="string">'fields'</span>: [<span class="string">'title'</span>]&#125;),</span><br><span class="line">    (<span class="string">'more'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'date'</span>]&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><ul><li>对于模型类，有两种注册方式<ul><li>方式一：与传统模型类相同</li><li>方式二：关联注册</li></ul></li><li>按照BookInfor的注册方式完成HeroInfo的注册</li><li>接下来实现关联注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># StackedInline TabularInline</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Line</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    model = HeroInfo</span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName1Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br><span class="line">    list_filter = [<span class="string">'title'</span>]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'base'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'title'</span>]&#125;),</span><br><span class="line">        (<span class="string">'super'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'date'</span>]&#125;)</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ModelName2Line]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'content'</span>, <span class="string">'modelName1ForeignKey'</span>]</span><br><span class="line">    list_filter = [<span class="string">'hgender'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(ModelName1, ModelName1Admin)</span><br><span class="line">admin.site.register(ModelName2, ModelName2Admin)</span><br></pre></td></tr></table></figure><ul><li>可以将内嵌的方式改为表格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Line</span><span class="params">(admin.TabularInline)</span></span></span><br></pre></td></tr></table></figure><h3 id="布尔值的显示"><a href="#布尔值的显示" class="headerlink" title="布尔值的显示"></a>布尔值的显示</h3><ul><li>发布性别的显示不是一个直观的结果，可以使用方法进行封装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.hgender:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line">gender.short_description = <span class="string">'性别'</span></span><br></pre></td></tr></table></figure><ul><li>在admin注册中使用gender代替hgender</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'content'</span>]</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>在django中，视图对WEB请求进行回应</li><li>视图接收reqeust对象作为第一个参数，包含了请求的信息</li><li>视图就是一个Python函数，被定义在views.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request,id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"detail %s"</span> % id)</span><br></pre></td></tr></table></figure><ul><li>定义完成视图后，需要配置<code>urls.py</code>，否则无法处理请求</li></ul><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> DjangoLearn1 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>,views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>此时，就可以访问了，不过考虑到如果这样填写，模块一多，URL的量一大的话，就会出现多个路由，不方便配置，所以推荐如下</p></blockquote><ul><li>在对应模块里面创建一个 urls.py 的文件，将路由信息写到里面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>之后，在向主urls.py文件中include进去</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'DjangoLearn1.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul><li><p>模板是html页面，可以根据视图中传递的数据填充值</p></li><li><p>在模板中访问视图传递的数据</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 输出值，可以是变量，也可以是对象.属性 &#125;&#125;</span><br><span class="line">&#123;% 执行代码段 %&#125;</span><br></pre></td></tr></table></figure><h3 id="定义HTML模板"><a href="#定义HTML模板" class="headerlink" title="定义HTML模板"></a>定义HTML模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;%for ModeleName1 in ModeleName1List%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;ModeleName1.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;ModeleName1.title&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在模板中访问对象成员时，都以属性的方式访问，即方法也不能加括号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>详细<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;ModeleName1.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;%for Modele in ModeleName1.ModelName2_set.all%&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;Modele.name&#125;&#125;---&#123;&#123;Modele.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;%endfor%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><ul><li>编辑views.py文件，在方法中调用模板</li><li>Django提供了函数Render()简化视图调用模板、构造上下文</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> ModeleName1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(reqeust)</span>:</span></span><br><span class="line">    ModeleName1List = ModeleName1.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(reqeust, <span class="string">'booktest/index.html'</span>, &#123;<span class="string">'ModeleName1List'</span>: ModeleName1List&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(reqeust, id)</span>:</span></span><br><span class="line">    ModeleName1 = ModeleName1.objects.get(pk=id)</span><br><span class="line">    <span class="keyword">return</span> render(reqeust, <span class="string">'booktest/detail.html'</span>, &#123;<span class="string">'ModeleName1'</span>: ModeleName1&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>视图 Views： 接受请求，逻辑处理，调用数据，输出响应</li><li>配置ulr在自己的应用中匹配url</li><li>模型Model：负责与数据库交互</li><li>面向对象：模型对象，列表</li><li>定义模型类：指出属性及类型，以确定表的结构，迁移</li><li>后台管理：创建管理员，启动服务器，admin，注册admin.py</li><li>模版：定义显示的样子<ol><li>加载：读取文件内容到内存</li><li>渲染：填内容</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 1.8.2中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 2.0 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.ziqiangxuetang.com/django/django-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 中文教学 自强学院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + nexT 学习笔记</title>
    <link href="http://jaelyn.coding.me/2017/12/30/HexoLearn-re/"/>
    <id>http://jaelyn.coding.me/2017/12/30/HexoLearn-re/</id>
    <published>2017-12-30T10:02:53.000Z</published>
    <updated>2018-02-17T11:10:16.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/hexo-head.jpeg" alt="hexo-head"></p><blockquote><ul><li>本文内容主要是个人在学习hexo和next中所遇到的一些“坑”和解决方法,而详细的流程网上有很多，在文章的结尾我会贴出我在学习中查找到的比较好的文章。</li><li>注意本文不是详细操作步骤，如果需要详细步骤，请直接翻到文章结尾。</li></ul></blockquote><a id="more"></a><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">nexT</a></li></ul><h2 id="Hexo-和-nexT-的安装"><a href="#Hexo-和-nexT-的安装" class="headerlink" title="Hexo 和 nexT 的安装"></a>Hexo 和 nexT 的安装</h2><blockquote><p>在安装 Hexo 之前，需要确保电脑环境要有 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> 环境, 当然，为了更好的安装 Hexo 还需要 <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>.</p></blockquote><p>下面是我所使用的版本：<br><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/gitnpmnodeversion.png" alt="gitnpmnodeversion"></p><p>安装之后，最常使用的指令如下：</p><ol><li>生成静态页面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol><li>在本地运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol><li>部署到GitHub pages（coding）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ol><li>清除生成的静态文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="打开-GitHub-Pages"><a href="#打开-GitHub-Pages" class="headerlink" title="打开 GitHub Pages"></a>打开 GitHub Pages</h2><p>在第一次创建完仓库之后，打开settings选项，向下翻到GitHub Pages选项会发现不能打开，会有一个提示信息：</p><blockquote><p>GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site</p></blockquote><p>是因为该GitHub Pages没有内容，此时只要点击下面的Choose a theme按钮选择一个主题就可以打开和访问了。</p><h2 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h2><ul><li>先查看本机用户home目录下是否存在.ssh目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>如果有就不用再创建了，如果想重新创建，可以创建一个不同名字的，也可以将原来的删除，再创建。</li><li>使用下面指令删除已存在的SSH：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br><span class="line">rm -r ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>再创建新的SSH密钥(keys)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这将按照你提供的邮箱地址，创建一对密钥</p></blockquote><ul><li>将生成的<code>id_rsa.pub</code>文件里面的内容拷贝到GitHub 项目中添加公钥，这里推荐在对应 xxx.github.io 项目中加。（settings-&gt;deploy keys）</li></ul><ul><li>最后再用下面指令测试是否连接成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><blockquote><p>可参考<a href="https://www.zhihu.com/question/21402411" target="_blank" rel="noopener">github提示Permission denied (publickey)，如何才能解决？</a></p></blockquote><h2 id="同步到GitHub"><a href="#同步到GitHub" class="headerlink" title="同步到GitHub"></a>同步到GitHub</h2><ul><li>配置<code>站点文件</code>下的<code>_config.xml</code>文件下的<code>deploy</code>信息。</li></ul><ul><li>安装<code>hexo-deployer-git</code>插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>关于 https 的问题，如果需要使用自己的域名的话，GitHub pages 是不能打开 Enforce HTTPS 的。所以在配置<code>deploy</code>信息的时候就推荐使用 Clone with SSH 的链接。</p></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li>在source文件夹下面创建<code>CNAME</code>文件（没有后缀），里面填上自己的域名。</li><li>之后在自己的域名商将自己的域名用<code>CNAME</code>方式指向自己GitHub pages的域名。</li></ul><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/cname-dns.png" alt="cname-dns"></p><blockquote><p>个人使用的是<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a></p></blockquote><p>最后需要注意，需要在<code>站点文件</code>的<code>_config.xml</code>文件配置中的<code>skip_render</code>添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - CNAME</span><br></pre></td></tr></table></figure><p>表示跳过该文件的渲染。</p><h2 id="nexT-主题配置"><a href="#nexT-主题配置" class="headerlink" title="nexT 主题配置"></a>nexT 主题配置</h2><p>一些我觉得比较实用的效果，参考<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a>.</p><h3 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h3><p>在<code>站点文件</code>的<code>source</code>目录下添加一个<code>README.md</code>文件，之后修改<code>站点文件</code>下的<code>_config.xml</code>，将<code>skip_render</code>添加<code>README.md</code>，跳过该文件的渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - CNAME</span><br><span class="line"> - README.md</span><br></pre></td></tr></table></figure><h3 id="Schemes"><a href="#Schemes" class="headerlink" title="Schemes"></a>Schemes</h3><p>个人比较喜欢<code>Gemini</code>样式，相比<code>Pisces</code>样式，该样式不会每篇文章相连过于紧密，会以分块的形式显示出来，比较好看，特别在手机端上效果更显著。具体可以亲自去设置去看看效果。</p><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><p>就是网站右下角的萌物”小人，具体可以参考<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a>。下面简要介绍我的做法：</p><ol><li>在<code>站点文件</code>打开终端输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol><li>在<code>站点文件</code>下的<code>_config.xml</code>最后配置：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  model: z16</span><br></pre></td></tr></table></figure><blockquote><p>具体的配置可以看文档，可以修改挺多内容的。模型外观参考<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">截图预览</a>.</p></blockquote><h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>Canvas-nest</code>可以发现有4个动态背景，可以逐个尝试，也可以同时设置为<code>true</code>，个人只选择了<code>Canvas-nest</code>。</p><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><p>可以将网站最下的不想要显示的内容设置为<code>false</code>，在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>footer</code>，我的设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2017</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon: user</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure><h3 id="busuanzi访问人数"><a href="#busuanzi访问人数" class="headerlink" title="busuanzi访问人数"></a>busuanzi访问人数</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>busuanzi_count</code>，修改配置，可以在网站底部和文章中显示访问的人数，我的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class="line">  site_uv_footer: |</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 访问总量</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 阅读次数</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure><h3 id="显示统计字数"><a href="#显示统计字数" class="headerlink" title="显示统计字数"></a>显示统计字数</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>post_wordcount</code>，修改配置，可以在网站底部和文章中显示所统计的字数，我的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><h3 id="增加本地搜索功能"><a href="#增加本地搜索功能" class="headerlink" title="增加本地搜索功能"></a>增加本地搜索功能</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>local_search</code>，设置为<code>true</code>。</p><p>参考：</p><ul><li><a href="http://www.sqlsec.com/2017/12/hexosearch.html" target="_blank" rel="noopener">Hexo博客无法搜索的终极解决方法</a></li></ul><h3 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>post_copyright</code>，设置为<code>true</code>。</p><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>参考： <a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a></p><ul><li>安装： <code>npm install hexo-blog-encrypt</code>  </li><li>首先在 _config.yml 中启用该插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><ul><li>在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line">    - fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>一般使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx</span><br></pre></td></tr></table></figure><blockquote><p>xxx表示文件的名字，同时也会自动设置为文章标题（后面可改）<br>以之间创建<code>.md</code>文件，添加文章头信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title:  // 文章标题</span><br><span class="line">date: // 创建时间</span><br><span class="line">updated: //跟新文章的时间</span><br><span class="line">tags: // 文章的标签，如果有多个，[tags1, tags2, ...]</span><br><span class="line">categories: // 文章分类</span><br><span class="line">keywords: // 文章关键词，如果有多个，[key1, key2, ...]</span><br><span class="line">description: //文章描述</span><br></pre></td></tr></table></figure><p>其中需要注意：</p><ul><li>如果想要有<code>updated</code>，需要在<code>主题文件</code>下的<code>_config.xml</code>文件中配置<code>post_meta</code>，将<code>updated_at</code>设置为<code>true</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure><ul><li><code>keywords</code>和<code>description</code>的作用是为了搜索引擎寻找关键字。</li><li>其中<code>description</code>关键字，在主页上显示的时候就会显示这里面的内容，而不是显示前150个字符。还有另一种方法推荐，就是不写<code>description</code>，而是在文章中插入<code>&lt;!-- more --&gt;</code>注释，这样主页就会显示该注释前的内容。</li></ul><h2 id="可添加内容"><a href="#可添加内容" class="headerlink" title="可添加内容"></a>可添加内容</h2><p>下面的内容是推广和维护网站相关。</p><h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><p>个人使用的是<a href="http://mta.qq.com" target="_blank" rel="noopener">腾讯移动分析</a>，而且nexT也可以直接支持，在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>Tencent MTA ID</code>，将自己在网站上注册的 ID 填写上去就可以统计了。</p><h3 id="seo推广"><a href="#seo推广" class="headerlink" title="seo推广"></a>seo推广</h3><p>这里推荐参考<a href="http://harleywang93.com/2017/03/07/Hexo-GitHub-Coding-Pages-搭建博客/" target="_blank" rel="noopener">Hexo+nexT主题搭建个人博客</a>中seo推广部分。</p><blockquote><p>参考<a href="http://ziyuan.baidu.com" target="_blank" rel="noopener">百度搜索资源平台</a></p></blockquote><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/index.html" target="_blank" rel="noopener">Hexo+nexT主题搭建个人博客</a></li><li><a href="https://www.jianshu.com/p/e7c58f57f60e" target="_blank" rel="noopener">hexo初探—让写作飞起来</a></li><li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a></li><li><a href="http://harleywang93.com/2017/03/07/Hexo-GitHub-Coding-Pages-搭建博客/" target="_blank" rel="noopener">Hexo + GitHub (Coding) Pages 搭建博客</a></li><li><a href="http://col.dog/2015/11/12/hello-world/" target="_blank" rel="noopener">基于 Hexo 和 GitHub Pages 搭建博客</a></li><li><a href="http://blog.csdn.net/xiaoliuge01/article/details/50997754" target="_blank" rel="noopener">Hexo搭建独立博客，托管到Github和Coding上教程</a></li><li><a href="http://blog.junyu.io/posts/0008-blog-seo.html" target="_blank" rel="noopener">让更多人看到你的博客</a></li><li><a href="http://blog.csdn.net/qq_21165007/article/details/72587999#git报错warning-lf-will-be-replaced-by-crlf问题" target="_blank" rel="noopener">在github上搭建个人网站</a></li><li><a href="https://www.zhihu.com/question/30898326" target="_blank" rel="noopener">如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？</a></li><li><a href="http://blog.niices.com/Hexo-Next-Algolia-Search/" target="_blank" rel="noopener">Hexo+Next主题集成Algolia搜索</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/hexo-head.jpeg&quot; alt=&quot;hexo-head&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文内容主要是个人在学习hexo和next中所遇到的一些“坑”和解决方法,而详细的流程网上有很多，在文章的结尾我会贴出我在学习中查找到的比较好的文章。&lt;/li&gt;
&lt;li&gt;注意本文不是详细操作步骤，如果需要详细步骤，请直接翻到文章结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客技术" scheme="http://jaelyn.coding.me/categories/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://jaelyn.coding.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>今天算是把我的博客网站建立起来了</title>
    <link href="http://jaelyn.coding.me/2017/12/27/hellomyblog/"/>
    <id>http://jaelyn.coding.me/2017/12/27/hellomyblog/</id>
    <published>2017-12-27T10:56:40.000Z</published>
    <updated>2017-12-31T10:02:47.282Z</updated>
    
    <content type="html"><![CDATA[<p>花了三天时间，终于搞定了，这也表示我的文章之旅要开始了。<br>enjoy it !</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了三天时间，终于搞定了，这也表示我的文章之旅要开始了。&lt;br&gt;enjoy it !&lt;/p&gt;
    
    </summary>
    
      <category term="diary" scheme="http://jaelyn.coding.me/categories/diary/"/>
    
    
      <category term="diary" scheme="http://jaelyn.coding.me/tags/diary/"/>
    
  </entry>
  
</feed>
