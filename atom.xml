<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaelyn&#39;s Blog</title>
  
  <subtitle>jaelyn-lim</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaelyn.coding.me/"/>
  <updated>2018-05-29T10:01:49.375Z</updated>
  <id>http://jaelyn.coding.me/</id>
  
  <author>
    <name>Jaelyn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python Cookbook 笔记</title>
    <link href="http://jaelyn.coding.me/2018/05/29/python-cookbook-learning/"/>
    <id>http://jaelyn.coding.me/2018/05/29/python-cookbook-learning/</id>
    <published>2018-05-29T09:42:42.000Z</published>
    <updated>2018-05-29T10:01:49.375Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/preface.html" target="_blank" rel="noopener">《Python CookBook 3》</a></li></ul><p>这个文章是在我学习这本书过程的笔记（复制粘贴），主要用于自己方便查看。还有记录了我的觉得比较有用（没学过）的操作。<br><a id="more"></a></p><h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><h2 id="星号（-）表达式"><a href="#星号（-）表达式" class="headerlink" title="星号（*）表达式"></a>星号（*）表达式</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p02_unpack_elements_from_iterables.html" target="_blank" rel="noopener">解压可迭代对象赋值给多个变量</a></li></ul><p>可以使用 * （星号表达式）来匹配不确定数量的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_first_last</span><span class="params">(grades)</span>:</span></span><br><span class="line">    first, *middle, last = grades</span><br><span class="line">    print(middle) <span class="comment"># 输出： [3, 4, 5]</span></span><br><span class="line">    <span class="keyword">return</span> middle</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    drop_first_last([<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure><blockquote><p><strong>带有星号的变量永远都是列表类型</strong>，包括长度是0的空列表，所以用到该变量的代码就不需要做多余的类型检查去确认它是否是列表类型。</p></blockquote><p>扩展的迭代解压语法是专门为解压不确定个数或任意个数元素的可迭代对象而设计的。 通常，这些可迭代对象的元素结构有确定的规则（比如第 1 个元素后面都是电话号码）， 星号表达式让开发人员可以很容易的利用这些规则来解压出元素来。 而不是通过一些比较复杂的手段去获取这些关联的元素值。</p><blockquote><p>星号表达式能做很多事情，包括对字符串的处理，对可变长数组，元组的处理。</p></blockquote><h2 id="xrange"><a href="#xrange" class="headerlink" title="xrange"></a>xrange</h2><p>在Python 3中，range()与xrange()合并为range( )。</p><p>如果直接使用 <code>range</code> ，会直接占用内存的空间，例如如果要加载一个很大的文件，就有可能会照成内存的爆满。这时候可以使用 <code>xrange</code> 在代替，这个返回的是一个生成器，而不是数列，每次只会返回其中的一个值。</p><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html" target="_blank" rel="noopener">Python yield 使用浅析</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> isgeneratorfunction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    print(<span class="string">"++++++++++"</span>)</span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        print(<span class="string">"12312312---"</span>+str(b))</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(isgeneratorfunction(fab))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>):</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">++++++++++</span><br><span class="line">1</span><br><span class="line">12312312---1</span><br><span class="line">1</span><br><span class="line">12312312---1</span><br><span class="line">2</span><br><span class="line">12312312---2</span><br><span class="line">3</span><br><span class="line">12312312---3</span><br><span class="line">5</span><br><span class="line">12312312---5</span><br></pre></td></tr></table></figure><blockquote><p>一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p></blockquote><p>其中，可以使用 <code>isgeneratorfunction</code> 来判断函数是否是一个特殊的 <code>generator</code> 函数。</p><p>其中 <code>yield</code> 的例子来源于文件读取。如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(fpath)</span>:</span></span><br><span class="line">   BLOCK_SIZE = <span class="number">1024</span></span><br><span class="line">   <span class="keyword">with</span> open(fpath, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">           block = f.read(BLOCK_SIZE)</span><br><span class="line">           <span class="keyword">if</span> block:</span><br><span class="line">               <span class="keyword">yield</span> block</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="collections-deque"><a href="#collections-deque" class="headerlink" title="collections.deque"></a>collections.deque</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p03_keep_last_n_items.html" target="_blank" rel="noopener">保留最后 N 个元素</a>  </li></ul><blockquote><p>使用 <code>deque(maxlen=N)</code> 构造函数会新建一个固定大小的队列。当新的元素加入并且这个队列已满的时候， 最老的元素会自动被移除掉。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">lines = deque(maxlen=<span class="number">3</span>)</span><br><span class="line">    lines.append(<span class="string">"1"</span>)</span><br><span class="line">    lines.append(<span class="string">"2"</span>)</span><br><span class="line">    lines.append(<span class="string">"3"</span>)</span><br><span class="line">    lines.append(<span class="string">"4"</span>)</span><br><span class="line">    lines.append(<span class="string">"5"</span>)</span><br><span class="line">    print(lines)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出： deque(['3', '4', '5'], maxlen=3)</span></span><br></pre></td></tr></table></figure><p>还可以在队列的两端插入和弹出元素，（左边插入：<code>q.appendleft</code>；左边弹出：<code>q.popleft</code>）</p><blockquote><p>在队列两端插入或删除元素时间复杂度都是 O(1) ，区别于列表，在列表的开头插入或删除元素的时间复杂度为 O(N) 。</p></blockquote><h2 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p04_find_largest_or_smallest_n_items.html" target="_blank" rel="noopener">查找最大或最小的 N 个元素</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">43</span>,<span class="number">523</span>,<span class="number">423</span>,<span class="number">423</span>,<span class="number">4</span>,<span class="number">234</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">53</span>,<span class="number">5654</span>,<span class="number">6</span>,<span class="number">4356</span>,<span class="number">12</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>, nums))</span><br><span class="line">print(heapq.nsmallest(<span class="number">2</span>, nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># [5654, 4356, 523]</span></span><br><span class="line"><span class="comment"># [1, 1]</span></span><br></pre></td></tr></table></figure><p>还可以接受一个关键字参数，来进行更高级的对比：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">portfolio = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line">cheap = heapq.nsmallest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line">expensive = heapq.nlargest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</span><br><span class="line">print(cheap)</span><br><span class="line">print(expensive)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>堆数据结构最重要的特征是 <code>heap[0]</code> 永远是最小的元素。并且剩余的元素可以很容易的通过调用 <code>heapq.heappop()</code> 方法得到， 该方法会先将第一个元素弹出来，然后用下一个最小的元素来取代被弹出元素（这种操作时间复杂度仅仅是 O(log N)，N 是堆大小）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]</span><br><span class="line">&gt;&gt;&gt; import heapq</span><br><span class="line">&gt;&gt;&gt; heap = list(nums)</span><br><span class="line">&gt;&gt;&gt; heapq.heapify(heap)</span><br><span class="line">&gt;&gt;&gt; heap</span><br><span class="line">[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]</span><br></pre></td></tr></table></figure><blockquote><p>如果只是获取一个最大值（最小值），使用 <code>max()</code>（<code>min()</code>）函数会快一些。</p></blockquote><h2 id="collections-defaultdict"><a href="#collections-defaultdict" class="headerlink" title="collections.defaultdict"></a>collections.defaultdict</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p06_map_keys_to_multiple_values_in_dict.html" target="_blank" rel="noopener">字典中的键映射多个值</a></li></ul><p><code>defaultdict</code> 的一个特征是它会自动初始化每个 key 刚开始对应的值，所以你只需要关注添加元素操作了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">d = defaultdict(list)</span><br><span class="line">d[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line">d[<span class="string">'a'</span>].append(<span class="number">2</span>)</span><br><span class="line">d[<span class="string">'b'</span>].append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出： defaultdict(&lt;class 'list'&gt;, &#123;'a': [1, 2], 'b': [4]&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">d = defaultdict(set)</span><br><span class="line">d[<span class="string">'a'</span>].add(<span class="number">1</span>)</span><br><span class="line">d[<span class="string">'a'</span>].add(<span class="number">2</span>)</span><br><span class="line">d[<span class="string">'b'</span>].add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出： defaultdict(&lt;class 'set'&gt;, &#123;'a': &#123;1, 2&#125;, 'b': &#123;4&#125;&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>defaultdict</code> 会自动为将要访问的键（就算目前字典中并不存在这样的键）创建映射实体。</p></blockquote><h2 id="collections-OrderedDict"><a href="#collections-OrderedDict" class="headerlink" title="collections.OrderedDict"></a>collections.OrderedDict</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p07_keep_dict_in_order.html" target="_blank" rel="noopener">字典排序</a></li></ul><p>创建一个字典，并且在迭代或序列化这个字典的时候能够控制元素的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">d = OrderedDict()</span><br><span class="line">d[<span class="string">'foo'</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="string">'bar'</span>] = <span class="number">2</span></span><br><span class="line">d[<span class="string">'spam'</span>] = <span class="number">3</span></span><br><span class="line">d[<span class="string">'grok'</span>] = <span class="number">4</span></span><br><span class="line">d[<span class="string">'foo'</span>] = <span class="number">12</span></span><br><span class="line"><span class="comment"># Outputs "foo 1", "bar 2", "spam 3", "grok 4"</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key, d[key])</span><br><span class="line">j = json.dumps(d)</span><br><span class="line">print(j)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo 12</span><br><span class="line">bar 2</span><br><span class="line">spam 3</span><br><span class="line">grok 4</span><br><span class="line">&#123;&quot;foo&quot;: 12, &quot;bar&quot;: 2, &quot;spam&quot;: 3, &quot;grok&quot;: 4&#125;</span><br></pre></td></tr></table></figure><p><code>OrderedDict</code> 内部维护着一个根据键插入顺序排序的双向链表。每次当一个新的元素插入进来的时候， 它会被放到链表的尾部。对于一个已经存在的键的重复赋值不会改变键的顺序。</p><blockquote><p>需要注意的是，一个 <code>OrderedDict</code> 的大小是一个普通字典的两倍，因为它内部维护着另外一个链表。</p></blockquote><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p08_calculating_with_dict.html" target="_blank" rel="noopener">字典的运算</a></li></ul><p>对字典值执行计算操作，通常需要使用 zip() 函数先将键和值反转过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">prices = &#123;</span><br><span class="line">    <span class="string">'ACME'</span>: <span class="number">45.23</span>,</span><br><span class="line">    <span class="string">'AAPL'</span>: <span class="number">612.78</span>,</span><br><span class="line">    <span class="string">'IBM'</span>: <span class="number">205.55</span>,</span><br><span class="line">    <span class="string">'HPQ'</span>: <span class="number">37.20</span>,</span><br><span class="line">    <span class="string">'FB'</span>: <span class="number">10.75</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">min_price = min(zip(prices.values(), prices.keys()))</span><br><span class="line">print(min_price)</span><br><span class="line">max_price = max(zip(prices.values(), prices.keys()))</span><br><span class="line">print(max_price)</span><br><span class="line"></span><br><span class="line">prices_sort = sorted(zip(prices.values(), prices.keys()))</span><br><span class="line">print(prices_sort)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(10.75, &apos;FB&apos;)</span><br><span class="line">(612.78, &apos;AAPL&apos;)</span><br><span class="line">[(10.75, &apos;FB&apos;), (37.2, &apos;HPQ&apos;), (45.23, &apos;ACME&apos;), (205.55, &apos;IBM&apos;), (612.78, &apos;AAPL&apos;)]</span><br></pre></td></tr></table></figure><p>在使用<code>zip()</code>的时候，在使用<code>zip()</code>给一个变量赋值的时候，就不能再次使用该变量做其他操作，例如：<code>a = zip(prices.values(), prices.keys())</code>，之后调用<code>max(a)</code>，后面如果再次调用<code>min(a)</code>的话就会报错。<code># ValueError: max() arg is an empty sequence</code></p><h2 id="keys-and-values"><a href="#keys-and-values" class="headerlink" title="keys and values"></a>keys and values</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p09_find_commonalities_in_dicts.html" target="_blank" rel="noopener">查找两字典的相同点</a></li></ul><p>一个字典就是一个键集合与值集合的映射关系。 字典的 <code>keys()</code> 方法返回一个展现键集合的键视图对象。 键视图的一个很少被了解的特性就是它们也支持集合操作，比如集合并、交、差运算。 所以，如果你想对集合的键执行一些普通的集合操作，可以直接使用键视图对象而不用先将它们转换成一个 <code>set</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;</span><br><span class="line">    <span class="string">'x'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'y'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'z'</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = &#123;</span><br><span class="line">    <span class="string">'w'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'x'</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">'y'</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(a.keys() &amp; b.keys())</span><br><span class="line"><span class="comment"># &#123;'x', 'y'&#125; 在a字典和b字典中相同的key</span></span><br><span class="line">print(a.keys() - b.keys())</span><br><span class="line"><span class="comment"># &#123;'z'&#125; 在a字典中有的在b字典中没有的key</span></span><br><span class="line">print(a.items() &amp; b.items())</span><br><span class="line"><span class="comment"># &#123;('y', 2)&#125; 在a字典和在b字典中相同的健值对</span></span><br><span class="line">c = &#123;key: a[key] <span class="keyword">for</span> key <span class="keyword">in</span> a.keys() - &#123;<span class="string">'z'</span>&#125;&#125;</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># &#123;'x': 1, 'y': 2&#125;</span></span><br></pre></td></tr></table></figure><p>字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。 这个对象同样也支持集合操作，并且可以被用来查找两个字典有哪些相同的键值对。</p><blockquote><p>尽管字典的 values() 方法也是类似，但是它并不支持这里介绍的集合操作。</p></blockquote><h2 id="collections-Counter"><a href="#collections-Counter" class="headerlink" title="collections.Counter"></a>collections.Counter</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p12_determine_most_freqently_items_in_seq.html" target="_blank" rel="noopener">序列中出现次数最多的元素</a></li></ul><p><code>Counter</code> 对象可以接受任意的由可哈希（<code>hashable</code>）元素构成的序列对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">words = [</span><br><span class="line">    <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>,</span><br><span class="line">    <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'not'</span>, <span class="string">'around'</span>, <span class="string">'the'</span>,</span><br><span class="line">    <span class="string">'eyes'</span>, <span class="string">"don't"</span>, <span class="string">'look'</span>, <span class="string">'around'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'look'</span>, <span class="string">'into'</span>,</span><br><span class="line">    <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">"you're"</span>, <span class="string">'under'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word_counts = Counter(words)</span><br><span class="line"><span class="comment"># 计算列表中出现频率最多的三个单词</span></span><br><span class="line">top_three = word_counts.most_common(<span class="number">3</span>)</span><br><span class="line">print(top_three)</span><br><span class="line"><span class="comment"># [('eyes', 8), ('the', 5), ('look', 4)]</span></span><br></pre></td></tr></table></figure><p>同样的，也可增加新的列表来跟新新的列表中的元素的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">morewords = [<span class="string">'why'</span>,<span class="string">'are'</span>,<span class="string">'you'</span>,<span class="string">'not'</span>,<span class="string">'looking'</span>,<span class="string">'in'</span>,<span class="string">'my'</span>,<span class="string">'eyes'</span>]</span><br><span class="line">word_counts.update(morewords)</span><br><span class="line">print(word_counts.most_common(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>并且，<code>Counter</code>这个类也可以和数学运算符操作相结合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = Counter(words)</span><br><span class="line">b = Counter(morewords)</span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># Counter(&#123;'eyes': 9, 'the': 5, 'look': 4, 'my': 4, 'into': 3, 'not': 2, 'around': 2, "don't": 1, "you're": 1, 'under': 1, 'why': 1, 'are': 1, 'you': 1, 'looking': 1, 'in': 1&#125;)</span></span><br><span class="line">c = a - b</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># Counter(&#123;'eyes': 7, 'the': 5, 'look': 4, 'into': 3, 'my': 2, 'around': 2, "don't": 1, "you're": 1, 'under': 1&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="operator-itemgetter"><a href="#operator-itemgetter" class="headerlink" title="operator.itemgetter"></a>operator.itemgetter</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p13_sort_list_of_dicts_by_key.html" target="_blank" rel="noopener">通过某个关键字排序一个字典列表</a></li></ul><p>可以利用<code>itemgetter</code>的模块对列表中以某个字段来排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">rows = [</span><br><span class="line">    &#123;<span class="string">'fname'</span>: <span class="string">'Brian'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>, <span class="string">'uid'</span>: <span class="number">1003</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'fname'</span>: <span class="string">'David'</span>, <span class="string">'lname'</span>: <span class="string">'Beazley'</span>, <span class="string">'uid'</span>: <span class="number">1002</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'fname'</span>: <span class="string">'John'</span>, <span class="string">'lname'</span>: <span class="string">'Cleese'</span>, <span class="string">'uid'</span>: <span class="number">1001</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'fname'</span>: <span class="string">'Big'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>, <span class="string">'uid'</span>: <span class="number">1004</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rows_by_fname = sorted(rows, key=itemgetter(<span class="string">'fname'</span>))</span><br><span class="line">rows_by_uid = sorted(rows, key=itemgetter(<span class="string">'uid'</span>))</span><br><span class="line">print(rows_by_fname)</span><br><span class="line"><span class="comment"># [&#123;'fname': 'Big', 'lname': 'Jones', 'uid': 1004&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'Brian', 'lname': 'Jones', 'uid': 1003&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'David', 'lname': 'Beazley', 'uid': 1002&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'John', 'lname': 'Cleese', 'uid': 1001&#125;]</span></span><br><span class="line">print(rows_by_uid)</span><br><span class="line"><span class="comment"># [&#123;'fname': 'John', 'lname': 'Cleese', 'uid': 1001&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'David', 'lname': 'Beazley', 'uid': 1002&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'Brian', 'lname': 'Jones', 'uid': 1003&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'Big', 'lname': 'Jones', 'uid': 1004&#125;]</span></span><br></pre></td></tr></table></figure><p>同样，也能存在多个<code>key</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rows_by_lfname = sorted(rows, key=itemgetter(<span class="string">'lname'</span>,<span class="string">'fname'</span>))</span><br><span class="line">print(rows_by_lfname)</span><br><span class="line"><span class="comment"># [&#123;'fname': 'David', 'lname': 'Beazley', 'uid': 1002&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'John', 'lname': 'Cleese', 'uid': 1001&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'Big', 'lname': 'Jones', 'uid': 1004&#125;,</span></span><br><span class="line"><span class="comment"># &#123;'fname': 'Brian', 'lname': 'Jones', 'uid': 1003&#125;]</span></span><br></pre></td></tr></table></figure><p><code>rows</code> 被传递给接受一个关键字参数的 <code>sorted()</code> 内置函数。 这个参数是 <code>callable</code> 类型，并且从 <code>rows</code> 中接受一个单一元素，然后返回被用来排序的值。 <code>itemgetter()</code> 函数就是负责创建这个 <code>callable</code> 对象的。</p><p><code>operator.itemgetter()</code> 函数有一个被 <code>rows</code> 中的记录用来查找值的索引参数。可以是一个字典键名称， 一个整形值或者任何能够传入一个对象的 <code>__getitem__()</code> 方法的值。 如果你传入多个索引参数给 <code>itemgetter()</code> ，它生成的 <code>callable</code> 对象会返回一个包含所有元素值的元组， 并且 <code>sorted()</code> 函数会根据这个元组中元素顺序去排序。 但你想要同时在几个字段上面进行排序（比如通过姓和名来排序，也就是例子中的那样）的时候这种方法是很有用的。</p><blockquote><p>该模块也同样适用于 min() 和 max() 等函数。<br><code>min(rows, key=itemgetter(&#39;uid&#39;))</code> 或者 <code>max(rows, key=itemgetter(&#39;uid&#39;))</code></p></blockquote><h2 id="operator-attrgetter"><a href="#operator-attrgetter" class="headerlink" title="operator.attrgetter"></a>operator.attrgetter</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p14_sort_objects_without_compare_support.html" target="_blank" rel="noopener">排序不支持原生比较的对象</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_id)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'User(&#123;&#125;)'</span>.format(self.user_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">users = [User(<span class="number">34</span>),  User(<span class="number">23</span>), User(<span class="number">12</span>)]</span><br><span class="line">print(users)</span><br><span class="line"><span class="comment"># [User(34), User(23), User(12)]</span></span><br><span class="line">print(sorted(users, key=<span class="keyword">lambda</span> u: u.user_id))</span><br><span class="line"><span class="comment"># [User(12), User(23), User(34)]</span></span><br><span class="line">s = sorted(users, key=attrgetter(<span class="string">'user_id'</span>))</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># [User(12), User(23), User(34)]</span></span><br></pre></td></tr></table></figure><p>可以直接使用<code>lambda</code>表达式的计算来代替<code>attrgetter</code>，但是如果更加在意速度的话，<code>attrgetter()</code> 函数通常会运行的快点，并且还能同时允许多个字段进行比较。 这个跟 <code>operator.itemgetter()</code> 函数作用于字典类型很类似。也同样支持<code>min</code>和<code>max</code>的操作。</p><h2 id="itertools-groupby"><a href="#itertools-groupby" class="headerlink" title="itertools.groupby"></a>itertools.groupby</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p15_group_records_based_on_field.html" target="_blank" rel="noopener">通过某个字段将记录分组</a></li></ul><p><code>groupby()</code> 函数扫描整个序列并且查找连续相同值（或者根据指定 key 函数返回值相同）的元素序列。 在每次迭代的时候，它会返回一个值和一个迭代器对象， 这个迭代器对象可以生成元素值全部等于上面那个值的组中所有对象。</p><blockquote><p>一个非常重要的准备步骤是要根据指定的字段将数据排序。 因为 groupby() 仅仅检查连续的元素，如果事先并没有排序完成的话，分组函数将得不到想要的结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">rows = [</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'5412 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'5148 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'5800 E 58TH'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'2122 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/03/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'5645 N RAVENSWOOD'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'1060 W ADDISON'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'4801 N BROADWAY'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'address'</span>: <span class="string">'1039 W GRANVILLE'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;,</span><br><span class="line">]</span><br><span class="line">rows.sort(key=itemgetter(<span class="string">'date'</span>))</span><br><span class="line">a = groupby(rows, key=itemgetter(<span class="string">'date'</span>))</span><br><span class="line"><span class="keyword">for</span> date, items <span class="keyword">in</span> a:</span><br><span class="line">    print(date)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        print(<span class="string">' '</span>, item)</span><br></pre></td></tr></table></figure><p>如果需要按照分组来访问，可以使用<code>defaultdict()</code>来构建多值字典。</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p16_filter_sequence_elements.html" target="_blank" rel="noopener">过滤序列元素</a></li></ul><p>一般来说，如果我们需要对一个列表遍历，取出其中的某些特定的元素，我们可以使用列表推导。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="number">-7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br><span class="line">m = [i <span class="keyword">for</span> i <span class="keyword">in</span> mylist <span class="keyword">if</span> i &gt; <span class="number">0</span>]</span><br><span class="line">print(m)</span><br><span class="line"><span class="comment"># [1, 4, 10, 2, 3]</span></span><br></pre></td></tr></table></figure><p>使用列表推导的一个潜在缺陷就是如果输入非常大的时候会产生一个非常大的结果集，占用大量内存。 如果对内存比较敏感，可以使用生成器表达式迭代产生过滤的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pos = (n <span class="keyword">for</span> n <span class="keyword">in</span> mylist <span class="keyword">if</span> n &gt; <span class="number">0</span>)</span><br><span class="line">print(pos)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x101fa69e8&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pos:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 1 4 10 2 3</span></span><br></pre></td></tr></table></figure><p>如果过滤规则比较复杂，不能简单的在列表推导或者生成器表达式中表达出来。 比如，假设过滤的时候需要处理一些异常或者其他复杂情况。这时候可以将过滤代码放到一个函数中， 然后使用内建的 <code>filter()</code> 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">values = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'-3'</span>, <span class="string">'-'</span>, <span class="string">'4'</span>, <span class="string">'N/A'</span>, <span class="string">'5'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_int</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = int(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ivals = list(filter(is_int, values))</span><br><span class="line">print(ivals)</span><br><span class="line"><span class="comment"># ['1', '2', '-3', '4', '5']</span></span><br></pre></td></tr></table></figure><p><code>filter()</code> 函数创建了一个迭代器，因此如果你想得到一个列表的话，就得像示例那样使用 <code>list()</code> 去转换。</p><blockquote><p>另外一个值得关注的过滤工具就是 <code>itertools.compress()</code> ， 它以一个 <code>iterable</code> 对象和一个相对应的 <code>Boolean</code> 选择器序列作为输入参数。 然后输出 <code>iterable</code> 对象中对应选择器为 <code>True</code> 的元素。 当你需要用另外一个相关联的序列来过滤某个序列的时候，这个函数是非常有用的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> compress</span><br><span class="line"></span><br><span class="line">more5 = [n &gt; <span class="number">5</span> <span class="keyword">for</span> n <span class="keyword">in</span> counts]</span><br><span class="line">print(more5)</span><br><span class="line"><span class="comment"># [False, False, True, False, False, True, True, False]</span></span><br><span class="line">more6 = list(compress(addresses, more5))</span><br><span class="line">print(more6)</span><br><span class="line"><span class="comment"># ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY']</span></span><br></pre></td></tr></table></figure><p>这里的关键点在于先创建一个 <code>Boolean</code> 序列，指示哪些元素符合条件。 然后 <code>compress()</code> 函数根据这个序列去选择输出对应位置为 True 的元素。</p><blockquote><p>和 <code>filter()</code> 函数类似， <code>compress()</code> 也是返回的一个迭代器。因此，如果你需要得到一个列表， 那么你需要使用 <code>list()</code> 来将结果转换为列表类型。</p></blockquote><h2 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prices = &#123;</span><br><span class="line">    <span class="string">'ACME'</span>: <span class="number">45.23</span>,</span><br><span class="line">    <span class="string">'AAPL'</span>: <span class="number">612.78</span>,</span><br><span class="line">    <span class="string">'IBM'</span>: <span class="number">205.55</span>,</span><br><span class="line">    <span class="string">'HPQ'</span>: <span class="number">37.20</span>,</span><br><span class="line">    <span class="string">'FB'</span>: <span class="number">10.75</span></span><br><span class="line">&#125;</span><br><span class="line">p1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; <span class="number">200</span>&#125;</span><br><span class="line">print(p1)</span><br><span class="line"></span><br><span class="line">tech_names = &#123;<span class="string">'AAPL'</span>, <span class="string">'IBM'</span>, <span class="string">'HPQ'</span>, <span class="string">'MSFT'</span>&#125;</span><br><span class="line">p2 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> key <span class="keyword">in</span> tech_names&#125;</span><br><span class="line">print(p2)</span><br></pre></td></tr></table></figure><p>大多数情况下字典推导能做到的，通过创建一个元组序列然后把它传给 <code>dict()</code> 函数也能实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p3 = dict((key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; <span class="number">200</span>)</span><br><span class="line">print(p3)</span><br></pre></td></tr></table></figure><blockquote><p>字典推导方式表意更清晰，并且实际上也会运行的更快些</p></blockquote><h2 id="collections-namedtuple"><a href="#collections-namedtuple" class="headerlink" title="collections.namedtuple()"></a>collections.namedtuple()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p18_map_names_to_sequence_elements.html" target="_blank" rel="noopener">映射名称到序列元素</a></li></ul><p><code>collections.namedtuple()</code> 函数通过使用一个普通的元组对象来解决这个问题。 这个函数实际上是一个返回 <code>Python</code> 中标准元组类型子类的一个工厂方法。 你需要传递一个类型名和你需要的字段给它，然后它就会返回一个类，你可以初始化这个类，为你定义的字段传递值等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Subscriber = namedtuple(<span class="string">'Subscriber'</span>, [<span class="string">'addr'</span>, <span class="string">'joined'</span>])</span><br><span class="line">sub = Subscriber(<span class="string">'jonesy@example.com'</span>, <span class="string">'2012-10-19'</span>)</span><br><span class="line">print(sub)</span><br><span class="line"><span class="comment"># Subscriber(addr='jonesy@example.com', joined='2012-10-19')</span></span><br><span class="line">print(sub.addr)</span><br><span class="line"><span class="comment"># jonesy@example.com</span></span><br><span class="line">print(sub.joined)</span><br><span class="line"><span class="comment"># 2012-10-19</span></span><br></pre></td></tr></table></figure><p>尽管 <code>namedtuple</code> 的实例看起来像一个普通的类实例，但是它跟元组类型是可交换的，支持所有的普通元组操作，比如索引和解压。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = len(sub)</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">addr, joined = sub</span><br><span class="line">print(addr)</span><br><span class="line"><span class="comment"># jonesy@example.com</span></span><br><span class="line">print(joined)</span><br><span class="line"><span class="comment"># 2012-10-19</span></span><br></pre></td></tr></table></figure><blockquote><p>因此，如果你从数据库调用中返回了一个很大的元组列表，通过下标去操作其中的元素， 当你在表中添加了新的列的时候你的代码可能就会出错了。但是如果你使用了命名元组，那么就不会有这样的顾虑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Stock = namedtuple(<span class="string">'Stock'</span>, [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span><span class="params">(records)</span>:</span></span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> rec <span class="keyword">in</span> records:</span><br><span class="line">        s = Stock(*rec)</span><br><span class="line">        total += s.shares * s.price</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p>命名元组另一个用途就是作为字典的替代，因为字典存储需要更多的内存空间。 如果你需要构建一个非常大的包含字典的数据结构，那么使用命名元组会更加高效。 但是需要注意的是，不像字典那样，一个命名元组是不可更改的。</p><p>如果你真的需要改变属性的值，那么可以使用命名元组实例的 <code>_replace()</code> 方法， 它会创建一个全新的命名元组并将对应的字段用新的值取代。</p><pre><code>s = s._replace(shares=75)</code></pre><p><code>_replace()</code> 方法还有一个很有用的特性就是当你的命名元组拥有可选或者缺失字段时候， 它是一个非常方便的填充数据的方法。 你可以先创建一个包含缺省值的原型元组，然后使用 <code>_replace()</code> 方法创建新的值被更新过的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Stock = namedtuple(<span class="string">'Stock'</span>, [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>, <span class="string">'date'</span>, <span class="string">'time'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a prototype instance</span></span><br><span class="line">stock_prototype = Stock(<span class="string">''</span>, <span class="number">0</span>, <span class="number">0.0</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to convert a dictionary to a Stock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_to_stock</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> stock_prototype._replace(**s)</span><br></pre></td></tr></table></figure><blockquote><p>最后要说的是，如果你的目标是定义一个需要更新很多实例属性的高效数据结构，那么命名元组并不是你的最佳选择。 这时候你应该考虑定义一个包含 <code>__slots__</code> 方法的类</p></blockquote><h2 id="collections-ChainMap"><a href="#collections-ChainMap" class="headerlink" title="collections.ChainMap"></a>collections.ChainMap</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p20_combine_multiple_map_to_single_map.html" target="_blank" rel="noopener">合并多个字典或映射</a></li></ul><p>一个 <code>ChainMap</code> 接受多个字典并将它们在逻辑上变为一个字典。 然后，这些字典并不是真的合并在一起了， <code>ChainMap</code> 类只是在内部创建了一个容纳这些字典的列表 并重新定义了一些常见的字典操作来遍历这个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span> &#125;</span><br><span class="line">b = &#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line"></span><br><span class="line">c = ChainMap(a, b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># ChainMap(&#123;'x': 1, 'z': 3&#125;, &#123;'y': 2, 'z': 4&#125;)</span></span><br><span class="line">print(c[<span class="string">'x'</span>]) <span class="comment"># 1</span></span><br><span class="line">print(c[<span class="string">'z'</span>]) <span class="comment"># 3</span></span><br><span class="line">print(c[<span class="string">'y'</span>]) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><blockquote><p>如果出现重复键，那么第一次出现的映射值会被返回。<br>对于字典的更新或删除操作总是影响的是列表中第一个字典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">value = ChainMap()</span><br><span class="line">value[<span class="string">'x'</span>] = <span class="number">0</span></span><br><span class="line">value = value.new_child()</span><br><span class="line">value[<span class="string">'x'</span>] = <span class="number">1</span></span><br><span class="line">value = value.new_child()</span><br><span class="line">value[<span class="string">'y'</span>] = <span class="number">2</span></span><br><span class="line">value = value.new_child()</span><br><span class="line">value[<span class="string">'z'</span>] = <span class="number">3</span></span><br><span class="line">print(value)</span><br><span class="line"><span class="comment"># ChainMap(&#123;'z': 3&#125;, &#123;'y': 2&#125;, &#123;'x': 1&#125;, &#123;'x': 0&#125;)</span></span><br><span class="line">value = value.parents</span><br><span class="line"><span class="comment"># 删除最后加入的字典</span></span><br><span class="line">value = value.parents</span><br><span class="line">print(value)</span><br><span class="line"><span class="comment"># ChainMap(&#123;'x': 1&#125;, &#123;'x': 0&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>在原字典中的修改会直接反应到 <code>ChainMap</code> 中。</p></blockquote><h1 id="字符串和文本"><a href="#字符串和文本" class="headerlink" title="字符串和文本"></a>字符串和文本</h1><h2 id="字符串开头或结尾匹配"><a href="#字符串开头或结尾匹配" class="headerlink" title="字符串开头或结尾匹配"></a>字符串开头或结尾匹配</h2><p>检查字符串开头或结尾的一个简单方法是使用 <code>str.startswith()</code> 或者是 <code>str.endswith()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_list = os.listdir(<span class="string">'.'</span>)</span><br><span class="line">print(file_list)</span><br><span class="line"><span class="comment"># ['startandendwith.py', '__init__.py']</span></span><br><span class="line">end_with = [name <span class="keyword">for</span> name <span class="keyword">in</span> file_list <span class="keyword">if</span> name.endswith(<span class="string">'.py'</span>)]</span><br><span class="line">print(end_with)</span><br><span class="line"><span class="comment"># ['startandendwith.py', '__init__.py']</span></span><br><span class="line">start_with = [name <span class="keyword">for</span> name <span class="keyword">in</span> file_list <span class="keyword">if</span> name.startswith(<span class="string">'s'</span>)]</span><br><span class="line">print(start_with)</span><br><span class="line"><span class="comment"># ['startandendwith.py']</span></span><br><span class="line">has_end = any(name.endswith(<span class="string">'.py'</span>) <span class="keyword">for</span> name <span class="keyword">in</span> file_list)</span><br><span class="line">print(has_end)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">print(any([<span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>]))</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>startswith() 和 endswith() 方法提供了一个非常方便的方式去做字符串开头和结尾的检查。 类似的操作也可以使用切片来实现，但是代码看起来没有那么优雅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">choices = [<span class="string">'http:'</span>, <span class="string">'ftp:'</span>]</span><br><span class="line">t = tuple(choices)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><blockquote><p><code>tuple()</code> 可以将 <code>list</code> 或者 <code>set</code> 类型的选择项转换为元组类型。</p></blockquote><p>当和其他操作比如普通数据聚合相结合的时候 startswith() 和 endswith() 方法是很不错的。 比如，下面这个语句检查某个文件夹中是否存在指定的文件类型：</p><blockquote><p>if any(name.endswith((‘.c’, ‘.h’)) for name in listdir(dirname)):</p></blockquote><h2 id="fnmatch-和-fnmatchcase"><a href="#fnmatch-和-fnmatchcase" class="headerlink" title="fnmatch() 和 fnmatchcase()"></a>fnmatch() 和 fnmatchcase()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p03_match_strings_with_shell_wildcard.html" target="_blank" rel="noopener">用Shell通配符匹配字符串</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fnmatch <span class="keyword">import</span> fnmatch, fnmatchcase</span><br><span class="line"></span><br><span class="line">is_fnmatch_1 = fnmatch(<span class="string">'foo.txt'</span>, <span class="string">'*.txt'</span>)</span><br><span class="line">print(is_fnmatch_1)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">is_fnmatch_2 = fnmatch(<span class="string">'foo.txt'</span>, <span class="string">'?oo.txt'</span>)</span><br><span class="line">print(is_fnmatch_2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">is_fnmatch_3 = fnmatch(<span class="string">'Dat45.csv'</span>, <span class="string">'Dat[0-9]*'</span>)</span><br><span class="line">print(is_fnmatch_3)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">names = [<span class="string">'Dat1.csv'</span>, <span class="string">'Dat2.csv'</span>, <span class="string">'config.ini'</span>, <span class="string">'foo.py'</span>]</span><br><span class="line">name_list = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> fnmatch(name, <span class="string">'Dat*.csv'</span>)]</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># ['Dat1.csv', 'Dat2.csv']</span></span><br></pre></td></tr></table></figure><p><code>fnmatch()</code> 函数使用底层操作系统的大小写敏感规则(不同的系统是不一样的)来匹配模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># On OS X (Mac)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatch(<span class="string">'foo.txt'</span>, <span class="string">'*.TXT'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># On Windows</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatch(<span class="string">'foo.txt'</span>, <span class="string">'*.TXT'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>如果对这个区别很在意，可以使用 <code>fnmatchcase()</code> 来代替。它完全使用所规定的模式大小写匹配。</p><blockquote><p><code>fnmatch()</code> 函数匹配能力介于简单的字符串方法和强大的正则表达式之间。 如果在数据处理操作中只需要简单的通配符就能完成的时候，这通常是一个比较合理的方案。</p></blockquote><h2 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p05_search_and_replace_text.html" target="_blank" rel="noopener">字符串搜索和替换</a></li></ul><p><code>sub()</code> 函数中的第一个参数是被匹配的模式，第二个参数是替换模式。反斜杠数字比如 \3 指向前面模式的捕获组号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">'Today is 11/27/2012. PyCon starts 3/13/2013.'</span></span><br><span class="line">s = re.sub(<span class="string">r'(\d+)/(\d+)/(\d+)'</span>, <span class="string">r'\3-\1-\2'</span>, text)</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># Today is 2012-11-27. PyCon starts 2013-3-13.</span></span><br></pre></td></tr></table></figure><p>如果打算用相同的模式做多次替换，考虑先编译它来提升性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">datepat = re.compile(<span class="string">r'(\d+)/(\d+)/(\d+)'</span>)</span><br><span class="line">s2 = datepat.sub(<span class="string">r'\3-\1-\2'</span>, text)</span><br><span class="line">print(s2)</span><br><span class="line"><span class="comment"># Today is 2012-11-27. PyCon starts 2013-3-13.</span></span><br></pre></td></tr></table></figure><p>对于更加复杂的替换，可以传递一个替换回调函数来代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> month_abbr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chane_date</span><span class="params">(m)</span>:</span></span><br><span class="line">    mon_name = month_abbr[int(m.group(<span class="number">1</span>))]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(m.group(<span class="number">2</span>), mon_name, m.group(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">s3 = datepat.sub(chane_date, text)</span><br><span class="line">print(s3)</span><br><span class="line"><span class="comment"># Today is 27 Nov 2012. PyCon starts 13 Mar 2013.</span></span><br></pre></td></tr></table></figure><p>一个替换回调函数的参数是一个 match 对象，也就是 match() 或者 find() 返回的对象。 使用 group() 方法来提取特定的匹配部分。回调函数最后返回替换字符串。</p><p>如果除了替换后的结果外，还想知道有多少替换发生了，可以使用 <code>re.subn()</code> 来代替。函数返回一个元组来表示替换后的值和一共替换的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s4, n = datepat.subn(chane_date, text)</span><br><span class="line">print(s4, n)</span><br><span class="line"><span class="comment"># Today is 27 Nov 2012. PyCon starts 13 Mar 2013. 2</span></span><br></pre></td></tr></table></figure><h2 id="re-IGNORECASE"><a href="#re-IGNORECASE" class="headerlink" title="re.IGNORECASE"></a>re.IGNORECASE</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p06_search_replace_case_insensitive.html" target="_blank" rel="noopener">字符串忽略大小写的搜索替换</a></li></ul><p>以忽略大小写的方式搜索与替换文本字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'UPPER PYTHON, lower python, Mixed Python'</span></span><br><span class="line">a = re.findall(<span class="string">'python'</span>, text, flags=re.IGNORECASE)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># ['PYTHON', 'python', 'Python']</span></span><br></pre></td></tr></table></figure><blockquote><p><code>sub()</code> 函数除了接受替换字符串外，还能接受一个回调函数。</p></blockquote><h2 id="re-DOTALL"><a href="#re-DOTALL" class="headerlink" title="re.DOTALL"></a>re.DOTALL</h2><p><code>re.compile()</code> 函数接受一个标志参数叫 <code>re.DOTALL</code> ，在这里非常有用。 它可以让正则表达式中的点<code>(.)</code>匹配包括换行符在内的任意字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text2 = <span class="string">'''/* this is a</span></span><br><span class="line"><span class="string"> multiline comment */</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line">comment = re.compile(<span class="string">r'/\*(.*?)\*/'</span>, re.DOTALL)</span><br><span class="line">a = comment.findall(text2)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [' this is a\n multiline comment ']</span></span><br></pre></td></tr></table></figure><p>这样的对于那些需要换行的字符串就能很好的匹配， 同时，适用于那些文件的读取。也可以用<code>re.compile(r&#39;/\*((?:.|\n)*?)\*/&#39;)</code>来代替，也能达到跨行匹配字符串的效果。</p><h2 id="unicodedata"><a href="#unicodedata" class="headerlink" title="unicodedata"></a>unicodedata</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p09_normalize_unicode_text_to_regexp.html" target="_blank" rel="noopener">将Unicode文本标准化</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'Spicy Jalape\u00f1o'</span></span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># Spicy Jalapeño</span></span><br><span class="line">s2 = <span class="string">'Spicy Jalapen\u0303o'</span></span><br><span class="line">print(s2)</span><br><span class="line"><span class="comment"># Spicy Jalapeño</span></span><br><span class="line">print(s1==s2)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line">print(len(s1))</span><br><span class="line"><span class="comment"># 14</span></span><br><span class="line">print(len(s2))</span><br><span class="line"><span class="comment"># 15</span></span><br></pre></td></tr></table></figure><p>这里的文本”Spicy Jalapeño”使用了两种形式来表示。 第一种使用整体字符”ñ”(U+00F1)，第二种使用拉丁字母”n”后面跟一个”~”的组合字符(U+0303)。</p><p>在需要比较字符串的程序中使用字符的多种表示会产生问题。 为了修正这个问题，可以使用<code>unicodedata</code>模块先将文本标准化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"></span><br><span class="line">t1 = unicodedata.normalize(<span class="string">'NFC'</span>, s1)</span><br><span class="line">t2 = unicodedata.normalize(<span class="string">'NFC'</span>, s2)</span><br><span class="line">print(t1 == t2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">print(ascii(t1))</span><br><span class="line"><span class="comment"># 'Spicy Jalape\xf1o'</span></span><br><span class="line"></span><br><span class="line">t1 = unicodedata.normalize(<span class="string">'NFD'</span>, s1)</span><br><span class="line">t2 = unicodedata.normalize(<span class="string">'NFD'</span>, s2)</span><br><span class="line">print(t1 == t2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">print(ascii(t1))</span><br><span class="line"><span class="comment"># 'Spicy Jalapen\u0303o'</span></span><br></pre></td></tr></table></figure><p><code>normalize()</code> 第一个参数指定字符串标准化的方式。 <strong>NFC</strong>表示字符应该是整体组成(比如可能的话就使用单一编码)，而<strong>NFD</strong>表示字符应该分解为多个组合字符表示。</p><p>Python同样支持扩展的标准化形式<strong>NFKC</strong>和<strong>NFKD</strong>，它们在处理某些字符的时候增加了额外的兼容特性。</p><p>标准化对于任何需要以一致的方式处理Unicode文本的程序都是非常重要的。 当处理来自用户输入的字符串而你很难去控制编码的时候尤其如此。</p><h2 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h2><p>主要用来去除多余的空格，当然，也可也以去除多余的其他字符。<code>strip()</code> 方法能用于删除开始或结尾的字符。 <code>lstrip()</code> 和 <code>rstrip()</code> 分别从左和从右执行删除操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">' hello world \n'</span></span><br><span class="line">print(s.strip())</span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line">print(s.lstrip())</span><br><span class="line"><span class="comment"># hello world \n</span></span><br><span class="line">print(s.rstrip())</span><br><span class="line"><span class="comment">#  hello world</span></span><br></pre></td></tr></table></figure><p>添加参数就可以对应去除参数中的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="string">'-----hello====='</span></span><br><span class="line">print(t.lstrip(<span class="string">'-'</span>))</span><br><span class="line"><span class="comment"># hello=====</span></span><br><span class="line">print(t.strip(<span class="string">'-='</span>))</span><br><span class="line"><span class="comment"># hello</span></span><br></pre></td></tr></table></figure><p>这些 <code>strip()</code> 方法在读取和清理数据以备后续处理的时候是经常会被用到的。 比如，你可以用它们来去掉空格，引号和完成其他任务。</p><blockquote><p>但是需要注意的是去除操作不会对字符串的中间的文本产生任何影响。<br>如果想处理中间的空格，那么你需要求助其他技术。比如使用 <code>replace()</code> 方法或者是用正则表达式替换。</p></blockquote><h2 id="ljust、rjust、center"><a href="#ljust、rjust、center" class="headerlink" title="ljust、rjust、center"></a>ljust、rjust、center</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p13_aligning_text_strings.html" target="_blank" rel="noopener">字符串对齐</a></li></ul><p>通过参数的设定，可以指定字符串的长度，如果字符串长度不足，就不会添加字符进行填充。否则就会根据参数添加对应的字符进行添加填充，使得整个的字符串的长度达到参数所规定的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Hellow World'</span></span><br><span class="line">text = s.ljust(<span class="number">20</span>)</span><br><span class="line">print(text)</span><br><span class="line"><span class="comment"># Hellow World</span></span><br><span class="line"></span><br><span class="line">text = s.rjust(<span class="number">20</span>)</span><br><span class="line">print(text)</span><br><span class="line"><span class="comment">#         Hellow World</span></span><br><span class="line"></span><br><span class="line">text = s.rjust(<span class="number">20</span>, <span class="string">'-'</span>)</span><br><span class="line">print(text)</span><br><span class="line"><span class="comment"># --------Hellow World</span></span><br></pre></td></tr></table></figure><p>并且，<code>format</code>函数也可以对字符串进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(format(s, <span class="string">'+&gt;20s'</span>))</span><br><span class="line">print(format(s, <span class="string">'-&lt;20s'</span>))</span><br><span class="line">print(format(s, <span class="string">'=&gt;20s'</span>))</span><br><span class="line">print(format(s, <span class="string">'*^20s'</span>))</span><br><span class="line"><span class="comment"># ++++++++Hellow World</span></span><br><span class="line"><span class="comment"># Hellow World--------</span></span><br><span class="line"><span class="comment"># ========Hellow World</span></span><br><span class="line"><span class="comment"># ****Hellow World****</span></span><br></pre></td></tr></table></figure><p>也可以同时格式化多个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'&#123;:+&gt;10s&#125; &#123;:-&gt;10s&#125;'</span>.format(<span class="string">'Hello'</span>, <span class="string">'World'</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p>注意：需要写<code>：</code>号，后面的<code>s</code>只是表明变量是字符串类型的，当然，<code>format</code>也可以格式化其他的类型。</p></blockquote><p>所以，在需要对字符串进行格式化的时候，尽量使用<code>format</code>函数来格式化字符串，而不应该采用原来的代码<code>%s</code>类似的形式格式化。同时，这一种形式也可以替代<code>ljust</code>、<code>rjust</code>、<code>center</code>。</p><h2 id="format-map-和-vars"><a href="#format-map-和-vars" class="headerlink" title="format_map 和 vars"></a>format_map 和 vars</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'lim'</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'&#123;name&#125; is &#123;age&#125; years old.'</span></span><br><span class="line">print(s.format_map(vars()))</span><br><span class="line"><span class="comment"># lim is 12 years old.</span></span><br></pre></td></tr></table></figure><p> 这样可以直接在变量域中寻找字符串中碎对应的变量，与字符串相结合。</p><p><code>vars()</code> 还有一个有意思的特性就是它也适用于对象实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me = People(<span class="string">'jaelyn'</span>, <span class="number">17</span>)</span><br><span class="line">output = s.format_map(vars(me))</span><br><span class="line">print(output)</span><br><span class="line"><span class="comment"># jaelyn is 17 years old.</span></span><br></pre></td></tr></table></figure><p><code>format</code> 和 <code>format_map()</code> 的一个缺陷就是它们并不能很好的处理变量缺失的情况，</p><blockquote><p>一种避免这种错误的方法是另外定义一个含有 <code>__missing__()</code> 方法的字典对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;'</span> + key + <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">safesub</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;'</span> + key + <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me = People(<span class="string">'jaelyn'</span>, <span class="number">17</span>)</span><br><span class="line">output = s.format_map(safesub(vars(me)))</span><br><span class="line">print(output)</span><br><span class="line"><span class="comment"># jaelyn is &#123;age&#125; years old.</span></span><br></pre></td></tr></table></figure><h2 id="textwrap"><a href="#textwrap" class="headerlink" title="textwrap"></a>textwrap</h2><p>使用 <code>textwrap</code> 模块来格式化字符串的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Look into my eyes, look into my eyes, the eyes, the eyes, \</span></span><br><span class="line"><span class="string">the eyes, not around the eyes, don't look around the eyes, \</span></span><br><span class="line"><span class="string">look into my eyes, you're under."</span></span><br><span class="line"></span><br><span class="line">print(textwrap.fill(s, <span class="number">70</span>), end=<span class="string">'\n\n'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Look into my eyes, look into my eyes, the eyes, the eyes, the eyes,</span></span><br><span class="line"><span class="string">not around the eyes, don't look around the eyes, look into my eyes,</span></span><br><span class="line"><span class="string">you're under.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(textwrap.fill(s, <span class="number">30</span>), end=<span class="string">'\n\n'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Look into my eyes, look into</span></span><br><span class="line"><span class="string">my eyes, the eyes, the eyes,</span></span><br><span class="line"><span class="string">the eyes, not around the eyes,</span></span><br><span class="line"><span class="string">don't look around the eyes,</span></span><br><span class="line"><span class="string">look into my eyes, you're</span></span><br><span class="line"><span class="string">under.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(textwrap.fill(s, <span class="number">40</span>, initial_indent=<span class="string">'++++++'</span>), end=<span class="string">'\n\n'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">++++++Look into my eyes, look into my</span></span><br><span class="line"><span class="string">eyes, the eyes, the eyes, the eyes, not</span></span><br><span class="line"><span class="string">around the eyes, don't look around the</span></span><br><span class="line"><span class="string">eyes, look into my eyes, you're under.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(textwrap.fill(s, <span class="number">40</span>, subsequent_indent=<span class="string">'======'</span>), end=<span class="string">'\n\n'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Look into my eyes, look into my eyes,</span></span><br><span class="line"><span class="string">======the eyes, the eyes, the eyes, not</span></span><br><span class="line"><span class="string">======around the eyes, don't look around</span></span><br><span class="line"><span class="string">======the eyes, look into my eyes,</span></span><br><span class="line"><span class="string">======you're under.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><blockquote><p><code>textwrap</code> 模块对于字符串打印是非常有用的，特别是当你希望输出自动匹配终端大小的时候。 你可以使用 <code>os.get_terminal_size()</code> 方法来获取终端的大小尺寸。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">terminal_colum = os.get_terminal_size().columns</span><br><span class="line">print(terminal_colum)</span><br><span class="line"><span class="comment"># 261</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，上面的那条语句需要在控制台执行，不然会报 <code>OSError: [WinError 6] 句柄无效。</code> 的错误。</p></blockquote><h2 id="html-escape"><a href="#html-escape" class="headerlink" title="html.escape"></a>html.escape</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p17_handle_html_xml_in_text.html" target="_blank" rel="noopener">在字符串中处理html和xml</a></li></ul><p>想将HTML或者XML实体如 <code>&amp;entity;</code> 或 <code>&amp;#code;</code> 替换为对应的文本。 再者，需要转换文本中特定的字符(比如<code>&lt;</code>, <code>&gt;</code>, 或 <code>&amp;</code>)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">s = <span class="string">'Elements are written as "&lt;tag&gt;text&lt;/tag&gt;".'</span></span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># Elements are written as "&lt;tag&gt;text&lt;/tag&gt;".</span></span><br><span class="line">print(html.escape(s))</span><br><span class="line"><span class="comment"># Elements are written as &amp;quot;&amp;lt;tag&amp;gt;text&amp;lt;/tag&amp;gt;&amp;quot;.</span></span><br><span class="line">print(html.escape(s, quote=<span class="keyword">False</span>))</span><br><span class="line"><span class="comment"># Elements are written as "&amp;lt;tag&amp;gt;text&amp;lt;/tag&amp;gt;".</span></span><br></pre></td></tr></table></figure><p>如果正在处理的是ASCII文本，并且想将非ASCII文本对应的编码实体嵌入进去， 可以给某些I/O函数传递参数 <code>errors=&#39;xmlcharrefreplace&#39;</code> 来达到这个目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Spicy Jalapeño'</span></span><br><span class="line">print(s.encode(<span class="string">'ascii'</span>, errors=<span class="string">'xmlcharrefreplace'</span>))</span><br><span class="line"><span class="comment"># b'Spicy Jalape&amp;#241;o'</span></span><br></pre></td></tr></table></figure><blockquote><p>为了替换文本中的编码实体，需要使用另外一种方法。 如果正在处理HTML或者XML文本，试着先使用一个合适的HTML或者XML解析器。 通常情况下，这些工具会自动替换这些编码值，你无需担心。</p><p>有时候，如果你接收到了一些含有编码值的原始文本，需要手动去做替换， 通常你只需要使用HTML或者XML解析器的一些相关工具函数/方法即可。</p></blockquote><h2 id="字符串令牌解析"><a href="#字符串令牌解析" class="headerlink" title="字符串令牌解析"></a>字符串令牌解析</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p18_tokenizing_text.html" target="_blank" rel="noopener">字符串令牌解析</a></li></ul><p>第一步就是利用命名捕获组的正则表达式来定义所有可能的令牌。<code>?P&lt;TOKENNAME&gt;</code> 用于给一个模式命名，供后面使用。</p><p>为了令牌化，使用模式对象很少被人知道的 <code>scanner()</code> 方法。 这个方法会创建一个 <code>scanner</code> 对象， 在这个对象上不断的调用 <code>match()</code> 方法会一步步的扫描目标文本，每步一个匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">NAME = <span class="string">r'(?P&lt;NAME&gt;[a-zA-Z_][a-zA-Z_0-9]*)'</span></span><br><span class="line">NUM = <span class="string">r'(?P&lt;NUM&gt;\d+)'</span></span><br><span class="line">PLUS = <span class="string">r'(?P&lt;PLUS&gt;\+)'</span></span><br><span class="line">TIMES = <span class="string">r'(?P&lt;TIMES&gt;\*)'</span></span><br><span class="line">EQ = <span class="string">r'(?P&lt;EQ&gt;=)'</span></span><br><span class="line">WS = <span class="string">r'(?P&lt;WS&gt;\s+)'</span></span><br><span class="line"></span><br><span class="line">master_pat = re.compile(<span class="string">'|'</span>.join([NAME, NUM, PLUS, TIMES, EQ, WS]))</span><br><span class="line">print(master_pat)</span><br><span class="line"><span class="comment"># re.compile('(?P&lt;NAME&gt;[a-zA-Z_][a-zA-Z_0-9]*)|(?P&lt;NUM&gt;\\d+)|(?P&lt;PLUS&gt;\\+)|(?P&lt;TIMES&gt;\\*)|(?P&lt;EQ&gt;=)|(?P&lt;WS&gt;\\s+)')</span></span><br><span class="line">scanner = master_pat.scanner(<span class="string">'foo = 23 + 42 * 10'</span>)</span><br><span class="line">result = scanner.match()</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='foo'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_tokens</span><span class="params">(pat, text)</span>:</span></span><br><span class="line">    Token = namedtuple(<span class="string">'Token'</span>, [<span class="string">'type'</span>, <span class="string">'value'</span>])</span><br><span class="line">    scanner = pat.scanner(text)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> iter(scanner.match, <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">yield</span> Token(m.lastgroup, m.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> generate_tokens(master_pat, <span class="string">'foo = 23 + 42 * 10'</span>):</span><br><span class="line">    print(tok)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Token(type='NAME', value='foo')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='EQ', value='=')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='NUM', value='23')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='PLUS', value='+')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='NUM', value='42')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='TIMES', value='*')</span></span><br><span class="line"><span class="string">Token(type='WS', value=' ')</span></span><br><span class="line"><span class="string">Token(type='NUM', value='10')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><blockquote><p>通常来讲令牌化是很多高级文本解析与处理的第一步。 为了使用上面的扫描方法，你需要记住这里一些重要的几点。 第一点就是你必须确认你使用正则表达式指定了所有输入中可能出现的文本序列。 如果有任何不可匹配的文本出现了，扫描就会直接停止。这也是为什么上面例子中必须指定空白字符令牌的原因。</p></blockquote><p>令牌的顺序也是有影响的。 <code>re</code> 模块会按照指定好的顺序去做匹配。 因此，如果一个模式恰好是另一个更长模式的子字符串，那么你需要确定长模式写在前面。</p><blockquote><p><code>namedtuple</code> 这个函数是用来实例化一个对象用的，这样对于一些比较简单的对象，没有太多的内容的话，就可以用这个函数去实例化出来。<code>namedtuple</code> 是一个函数，它用来创建一个自定义的 <code>tuple</code> 对象，并且规定了 <code>tuple</code> 元素的个数，并可以用属性而不是索引来引用 <code>tuple</code> 的某个元素。</p></blockquote><h2 id="实现一个简单的递归下降分析器"><a href="#实现一个简单的递归下降分析器" class="headerlink" title="实现一个简单的递归下降分析器"></a>实现一个简单的递归下降分析器</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p19_writing_recursive_descent_parser.html" target="_blank" rel="noopener">实现一个简单的递归下降分析器</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Topic: 下降解析器</span></span><br><span class="line"><span class="string">Desc :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># Token specification</span></span><br><span class="line">NUM = <span class="string">r'(?P&lt;NUM&gt;\d+)'</span></span><br><span class="line">PLUS = <span class="string">r'(?P&lt;PLUS&gt;\+)'</span></span><br><span class="line">MINUS = <span class="string">r'(?P&lt;MINUS&gt;-)'</span></span><br><span class="line">TIMES = <span class="string">r'(?P&lt;TIMES&gt;\*)'</span></span><br><span class="line">DIVIDE = <span class="string">r'(?P&lt;DIVIDE&gt;/)'</span></span><br><span class="line">LPAREN = <span class="string">r'(?P&lt;LPAREN&gt;\()'</span></span><br><span class="line">RPAREN = <span class="string">r'(?P&lt;RPAREN&gt;\))'</span></span><br><span class="line">WS = <span class="string">r'(?P&lt;WS&gt;\s+)'</span></span><br><span class="line"></span><br><span class="line">master_pat = re.compile(<span class="string">'|'</span>.join([NUM, PLUS, MINUS, TIMES,</span><br><span class="line">                                  DIVIDE, LPAREN, RPAREN, WS]))</span><br><span class="line"><span class="comment"># Tokenizer</span></span><br><span class="line">Token = collections.namedtuple(<span class="string">'Token'</span>, [<span class="string">'type'</span>, <span class="string">'value'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_tokens</span><span class="params">(text)</span>:</span></span><br><span class="line">    scanner = master_pat.scanner(text)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> iter(scanner.match, <span class="keyword">None</span>):</span><br><span class="line">        tok = Token(m.lastgroup, m.group())</span><br><span class="line">        <span class="keyword">if</span> tok.type != <span class="string">'WS'</span>:</span><br><span class="line">            <span class="keyword">yield</span> tok</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parser</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionEvaluator</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Implementation of a recursive descent parser. Each method</span></span><br><span class="line"><span class="string">    implements a single grammar rule. Use the ._accept() method</span></span><br><span class="line"><span class="string">    to test and accept the current lookahead token. Use the ._expect()</span></span><br><span class="line"><span class="string">    method to exactly match and discard the next token on on the input</span></span><br><span class="line"><span class="string">    (or raise a SyntaxError if it doesn't match).</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.tokens = generate_tokens(text)</span><br><span class="line">        self.tok = <span class="keyword">None</span>  <span class="comment"># Last symbol consumed</span></span><br><span class="line">        self.nexttok = <span class="keyword">None</span>  <span class="comment"># Next symbol tokenized</span></span><br><span class="line">        self._advance()  <span class="comment"># Load first lookahead token</span></span><br><span class="line">        <span class="keyword">return</span> self.expr()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'Advance one token ahead'</span></span><br><span class="line">        self.tok, self.nexttok = self.nexttok, next(self.tokens, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_accept</span><span class="params">(self, toktype)</span>:</span></span><br><span class="line">        <span class="string">'Test and consume the next token if it matches toktype'</span></span><br><span class="line">        <span class="keyword">if</span> self.nexttok <span class="keyword">and</span> self.nexttok.type == toktype:</span><br><span class="line">            self._advance()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_expect</span><span class="params">(self, toktype)</span>:</span></span><br><span class="line">        <span class="string">'Consume next token if it matches toktype or raise SyntaxError'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._accept(toktype):</span><br><span class="line">            <span class="keyword">raise</span> SyntaxError(<span class="string">'Expected '</span> + toktype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Grammar rules follow</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expr</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"expression ::= term &#123; ('+'|'-') term &#125;*"</span></span><br><span class="line">        exprval = self.term()</span><br><span class="line">        <span class="keyword">while</span> self._accept(<span class="string">'PLUS'</span>) <span class="keyword">or</span> self._accept(<span class="string">'MINUS'</span>):</span><br><span class="line">            op = self.tok.type</span><br><span class="line">            right = self.term()</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">'PLUS'</span>:</span><br><span class="line">                exprval += right</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">'MINUS'</span>:</span><br><span class="line">                exprval -= right</span><br><span class="line">        <span class="keyword">return</span> exprval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">term</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"term ::= factor &#123; ('*'|'/') factor &#125;*"</span></span><br><span class="line">        termval = self.factor()</span><br><span class="line">        <span class="keyword">while</span> self._accept(<span class="string">'TIMES'</span>) <span class="keyword">or</span> self._accept(<span class="string">'DIVIDE'</span>):</span><br><span class="line">            op = self.tok.type</span><br><span class="line">            right = self.factor()</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">'TIMES'</span>:</span><br><span class="line">                termval *= right</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">'DIVIDE'</span>:</span><br><span class="line">                termval /= right</span><br><span class="line">        <span class="keyword">return</span> termval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"factor ::= NUM | ( expr )"</span></span><br><span class="line">        <span class="keyword">if</span> self._accept(<span class="string">'NUM'</span>):</span><br><span class="line">            <span class="keyword">return</span> int(self.tok.value)</span><br><span class="line">        <span class="keyword">elif</span> self._accept(<span class="string">'LPAREN'</span>):</span><br><span class="line">            exprval = self.expr()</span><br><span class="line">            self._expect(<span class="string">'RPAREN'</span>)</span><br><span class="line">            <span class="keyword">return</span> exprval</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> SyntaxError(<span class="string">'Expected NUMBER or LPAREN'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">descent_parser</span><span class="params">()</span>:</span></span><br><span class="line">    e = ExpressionEvaluator()</span><br><span class="line">    print(e.parse(<span class="string">'2'</span>))</span><br><span class="line">    print(e.parse(<span class="string">'2 + 3'</span>))</span><br><span class="line">    print(e.parse(<span class="string">'2 + 3 * 4'</span>))</span><br><span class="line">    print(e.parse(<span class="string">'2 + (3 + 4) * 5'</span>))</span><br><span class="line">    <span class="comment"># print(e.parse('2 + (3 + * 4)'))</span></span><br><span class="line">    <span class="comment"># Traceback (most recent call last):</span></span><br><span class="line">    <span class="comment">#    File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 40, in parse</span></span><br><span class="line">    <span class="comment">#    return self.expr()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 67, in expr</span></span><br><span class="line">    <span class="comment">#    right = self.term()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 77, in term</span></span><br><span class="line">    <span class="comment">#    termval = self.factor()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 93, in factor</span></span><br><span class="line">    <span class="comment">#    exprval = self.expr()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 67, in expr</span></span><br><span class="line">    <span class="comment">#    right = self.term()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 77, in term</span></span><br><span class="line">    <span class="comment">#    termval = self.factor()</span></span><br><span class="line">    <span class="comment">#    File "exprparse.py", line 97, in factor</span></span><br><span class="line">    <span class="comment">#    raise SyntaxError("Expected NUMBER or LPAREN")</span></span><br><span class="line">    <span class="comment">#    SyntaxError: Expected NUMBER or LPAREN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    descent_parser()</span><br></pre></td></tr></table></figure><blockquote><p>待研究学习，字符串相关</p></blockquote><h1 id="数字日期和时间"><a href="#数字日期和时间" class="headerlink" title="数字日期和时间"></a>数字日期和时间</h1><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p01_round_number.html" target="_blank" rel="noopener">数字的四舍五入</a></li></ul><p>对浮点数执行指定精度的舍入运算。<br>对于简单的舍入运算，使用内置的 <code>round(value, ndigits)</code> 函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(round(<span class="number">1.23</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 1.2</span></span><br><span class="line">print(round(<span class="number">1.27</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 1.3</span></span><br><span class="line">print(round(<span class="number">1.25361</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 1.254</span></span><br></pre></td></tr></table></figure><blockquote><p>当一个值刚好在两个边界的中间的时候， <code>round</code> 函数返回离它最近的偶数。 也就是说，对1.5或者2.5的舍入运算都会得到2。</p></blockquote><p>传给 <code>round()</code> 函数的 <code>ndigits</code> 参数可以是负数，这种情况下， 舍入运算会作用在十位、百位、千位等上面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1627731</span></span><br><span class="line">print(round(a, <span class="number">-1</span>))</span><br><span class="line"><span class="comment"># 1627730</span></span><br><span class="line">print(round(a, <span class="number">-2</span>))</span><br><span class="line"><span class="comment"># 1627700</span></span><br><span class="line">print(round(a, <span class="number">-3</span>))</span><br><span class="line"><span class="comment"># 1628000</span></span><br></pre></td></tr></table></figure><blockquote><p>不要将舍入和格式化输出搞混淆了。 如果你的目的只是简单的输出一定宽度的数，你不需要使用 <code>round()</code> 函数。 而仅仅只需要在格式化的时候指定精度即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1.23456</span></span><br><span class="line">print(format(x, <span class="string">'0.2f'</span>))</span><br><span class="line"><span class="comment"># 1.23</span></span><br></pre></td></tr></table></figure><h2 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p02_accurate_decimal_calculations.html" target="_blank" rel="noopener">执行精确的浮点数运算</a></li></ul><p>对浮点数执行精确的计算操作，并且不希望有任何小误差的出现。</p><blockquote><p>浮点数的一个普遍问题是它们并不能精确的表示十进制数。 并且，即使是最简单的数学运算也会产生小的误差。这些错误是由底层<strong>CPU</strong>和<strong>IEEE 754标准</strong>通过自己的浮点单位去执行算术时的特征。 由于Python的浮点数据类型使用底层表示存储数据，因此你没办法去避免这样的误差。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = Decimal(<span class="string">'4.2'</span>)</span><br><span class="line">b = Decimal(<span class="string">'2.1'</span>)</span><br><span class="line">print(a + b)</span><br><span class="line"><span class="comment"># 6.3</span></span><br><span class="line">print((a + b) == Decimal(<span class="string">'6.3'</span>))</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>初看起来，上面的代码好像有点奇怪，比如我们用字符串来表示数字。 然而， <code>Decimal</code> 对象会像普通浮点数一样的工作(支持所有的常用数学运算)。 如果你打印它们或者在字符串格式化函数中使用它们，看起来跟普通数字没什么两样。</p><blockquote><p>Python新手会倾向于使用 <code>decimal</code> 模块来处理浮点数的精确运算。 然而，先理解你的应用程序目的是非常重要的。 如果你是在做科学计算或工程领域的计算、电脑绘图，或者是科学领域的大多数运算， 那么使用普通的浮点类型是比较普遍的做法。 其中一个原因是，在真实世界中很少会要求精确到普通浮点数能提供的17位精度。 因此，计算过程中的那么一点点的误差是被允许的。 第二点就是，原生的浮点数计算要快的多-有时候你在执行大量运算的时候速度也是非常重要的。</p></blockquote><p>总的来说， <code>decimal</code> 模块主要用在涉及到金融的领域。 在这类程序中，哪怕是一点小小的误差在计算过程中蔓延都是不允许的。 因此， <code>decimal</code> 模块为解决这类问题提供了方法。 当Python和数据库打交道的时候也通常会遇到 <code>Decimal</code> 对象，并且，通常也是在处理金融数据的时候。</p><h2 id="fractions"><a href="#fractions" class="headerlink" title="fractions"></a>fractions</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p08_calculating_with_fractions.html" target="_blank" rel="noopener">分数运算</a></li></ul><p>用来执行包含分数的数学运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"></span><br><span class="line">a = Fraction(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">b = Fraction(<span class="number">7</span>, <span class="number">16</span>)</span><br><span class="line">print(a + b)</span><br><span class="line"><span class="comment"># 27/16</span></span><br></pre></td></tr></table></figure><p>也可以用 <code>numerator</code> 显示分子，用<code>denominator</code>显示分母。或者也可以使用<code>float</code>函数显示分数的浮点类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = a * b</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># 35/64</span></span><br><span class="line">print(c.numerator)</span><br><span class="line"><span class="comment"># 35</span></span><br><span class="line">print(c.denominator)</span><br><span class="line"><span class="comment"># 64</span></span><br><span class="line"></span><br><span class="line">print(float(c))</span><br><span class="line"><span class="comment"># 0.546875</span></span><br></pre></td></tr></table></figure><p>这个函数同样也有很多用法，例如，求出一个分数，该分数的分母不超过所设定的数，并且该分数的值最接近所求的浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(c.limit_denominator(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 5/9</span></span><br></pre></td></tr></table></figure><p>或者给出一个小数，求原来的分数，当然，求出来的值是最为接近的值，不代表完全一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3.75</span></span><br><span class="line">y = Fraction(*x.as_integer_ratio())</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment"># 15/4</span></span><br></pre></td></tr></table></figure><blockquote><p>在大多数程序中一般不会出现分数的计算问题，但是有时候还是需要用到的。 比如，在一个允许接受分数形式的测试单位并以分数形式执行运算的程序中， 直接使用分数可以减少手动转换为小数或浮点数的工作。</p></blockquote><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p09_calculating_with_large_num_arrays.html" target="_blank" rel="noopener">大型数组运算</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(x * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 1, 2, 3, 4]</span></span><br><span class="line">print(x + y)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>由此我们可以看出，python 原生的对与数列的处理就是普通的对于数列上的操作，由此看来，像 <code>*</code> 、 <code>+</code> 等操作，是以整个数列为最小单位的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">ax = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">ay = np.array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">print(ax * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># [2 4 6 8]</span></span><br><span class="line">print(ax + <span class="number">10</span>)</span><br><span class="line"><span class="comment"># [11 12 13 14]</span></span><br><span class="line">print(ax + ay)</span><br><span class="line"><span class="comment"># [ 6  8 10 12]</span></span><br><span class="line">print(ax * ay)</span><br><span class="line"><span class="comment"># [ 5 12 21 32]</span></span><br></pre></td></tr></table></figure><p>与原生的不同，<code>numpy</code> 的数列操作则是对应里面的每一个元素的操作。</p><p><code>NumPy</code> 中的标量运算(比如 <code>ax * 2</code> 或 <code>ax + 10</code> )会作用在每一个元素上。 另外，当两个操作数都是数组的时候执行元素对等位置计算，并最终生成一个新的数组。</p><blockquote><p>NumPy 还为数组操作提供了大量的通用函数，这些函数可以作为 math 模块中类似函数的替代。</p></blockquote><p>使用这些通用函数要比循环数组并使用 math 模块中的函数执行计算要快的多。 因此，只要有可能的话尽量选择 NumPy 的数组方案。</p><blockquote><p>底层实现中， NumPy 数组使用了C或者Fortran语言的机制分配内存。 也就是说，它们是一个非常大的连续的并由同类型数据组成的内存区域。 所以，你可以构造一个比普通Python列表大的多的数组。</p></blockquote><p>NumPy 是Python领域中很多科学与工程库的基础，同时也是被广泛使用的最大最复杂的模块。 即便如此，在刚开始的时候通过一些简单的例子和玩具程序也能帮我们完成一些有趣的事情。</p><p>通常我们导入 NumPy 模块的时候会使用语句 import numpy as np 。 这样的话你就不用再你的程序里面一遍遍的敲入 numpy ，只需要输入 np 就行了，节省了不少时间。</p><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p10_matrix_and_linear_algebra_calculation.html" target="_blank" rel="noopener">矩阵与线性代数运算</a></li></ul><p>NumPy 库有一个矩阵对象可以用来解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">m = np.matrix([[<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">-9</span>]])</span><br><span class="line">print(m)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 1 -2  3]</span></span><br><span class="line"><span class="string"> [ 0  4  5]</span></span><br><span class="line"><span class="string"> [ 7  8 -9]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(m.T)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出矩阵的转置</span></span><br><span class="line"><span class="string">[[ 1  0  7]</span></span><br><span class="line"><span class="string"> [-2  4  8]</span></span><br><span class="line"><span class="string"> [ 3  5 -9]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>可以在 <code>numpy.linalg</code> 子包中找到更多的操作函数。</p><p>这个函数有很多强大的功能，如果需要用到一些关于矩阵和线性代数相关的知识和运算的时候，可以参考这个函数，能轻松解决很多问题。</p><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p11_pick_things_at_random.html" target="_blank" rel="noopener">随机选择</a></li></ul><p>主要用于生成随机数的函数。</p><p><code>random</code> 模块有大量的函数用来产生随机数和随机选择元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表中随机生成一个数字</span></span><br><span class="line">a = random.choice(values)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表中随机生成多个数字组成的新列表</span></span><br><span class="line">b = random.sample(values, <span class="number">2</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机打乱列表的位置，没有返回值，会直接在原来的数组上修改，属于原地操作</span></span><br><span class="line">random.shuffle(values)</span><br><span class="line">print(values)</span><br><span class="line"><span class="comment"># [6, 5, 1, 2, 3, 4]</span></span><br><span class="line">print(values[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在1到10之间随机生成一个数字</span></span><br><span class="line">c = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在0到1之间随机生成浮点数</span></span><br><span class="line">d = random.random()</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 0.19051868016253204</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取N位随机位(二进制)的整数</span></span><br><span class="line">e = random.getrandbits(<span class="number">20</span>)</span><br><span class="line">print(e)</span><br><span class="line"><span class="comment"># 293829</span></span><br></pre></td></tr></table></figure><blockquote><p>random 模块使用 Mersenne Twister 算法来计算生成随机数。</p></blockquote><p>除了上述介绍的功能，<code>random</code>模块还包含基于均匀分布、高斯分布和其他分布的随机数生成函数。 比如， <code>random.uniform()</code> 计算均匀分布随机数， <code>random.gauss()</code> 计算正态分布随机数。</p><p>在 <code>random</code> 模块中的函数不应该用在和密码学相关的程序中。 如果你确实需要类似的功能，可以使用<code>ssl</code>模块中相应的函数。 比如， <code>ssl.RAND_bytes()</code> 可以用来生成一个安全的随机字节序列。</p><h2 id="datetime-amp-timedelta"><a href="#datetime-amp-timedelta" class="headerlink" title="datetime &amp; timedelta"></a>datetime &amp; timedelta</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p12_convert_days_to_seconds_and_others.html" target="_blank" rel="noopener">基本的日期与时间转换</a></li></ul><p>执行不同时间单位的转换和计算，请使用 <code>datetime</code> 模块。</p><p>如果你想表示指定的日期和时间，先创建一个 <code>datetime</code> 实例然后使用标准的数学运算来操作它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">a = timedelta(days=<span class="number">2</span>, hours=<span class="number">6</span>)</span><br><span class="line">b = timedelta(hours=<span class="number">4.5</span>)</span><br><span class="line">c = a + b</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># 2 days, 10:30:00</span></span><br><span class="line">print(c.days)</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">print(c.seconds)</span><br><span class="line"><span class="comment"># 37800</span></span><br><span class="line">print(c.microseconds)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line">print(c.total_seconds())</span><br><span class="line"><span class="comment"># 210600.0</span></span><br><span class="line"></span><br><span class="line">a = datetime(<span class="number">2012</span>, <span class="number">9</span>, <span class="number">23</span>)</span><br><span class="line">print(a + timedelta(days=<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 2012-10-03 00:00:00</span></span><br><span class="line"></span><br><span class="line">b = datetime(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>)</span><br><span class="line">d = b - a</span><br><span class="line">print(d.days)</span><br><span class="line"><span class="comment"># 89</span></span><br><span class="line">now = datetime.today()</span><br><span class="line">print(now)</span><br><span class="line"><span class="comment"># 2018-05-28 18:44:35.190897</span></span><br><span class="line">print(now + timedelta(minutes=<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 2018-05-28 18:54:35.190897</span></span><br><span class="line"></span><br><span class="line">a = datetime(<span class="number">2012</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">b = datetime(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">28</span>)</span><br><span class="line">print(a - b)</span><br><span class="line"><span class="comment"># 2 days, 0:00:00</span></span><br><span class="line">print((a-b).days)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>在计算的时候，需要注意的是 <code>datetime</code> 会自动处理闰年。</p><p>对大多数基本的日期和时间处理问题， <code>datetime</code> 模块已经足够了。 如果你需要执行更加复杂的日期操作，比如处理时区，模糊时间范围，节假日计算等等， 可以考虑使用 <code>dateutil</code> 模块。</p><blockquote><p>如果要执行大量的日期计算的话，最好安装第三方包 <code>python-dateutil</code> 来代替。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta</span><br><span class="line"><span class="keyword">from</span> dateutil.rrule <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = datetime.now()</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 2018-05-28 23:39:37.526316</span></span><br><span class="line">print(d + relativedelta(weekday=FR))</span><br><span class="line"><span class="comment"># 2018-06-01 23:39:37.526316</span></span><br><span class="line">print(d + relativedelta(weekday=FR(<span class="number">-1</span>)))</span><br><span class="line"><span class="comment"># 2018-05-25 23:39:37.526316</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p14_date_range_for_current_month.html" target="_blank" rel="noopener">计算当前月份的日期范围</a></li></ul><p>计算对应的月份的天数，可以用到<code>calendar.monthrange()</code>函数，这个函数会根据所传入的年份和月数量，返回一个元组，包括对应月份的的星期和天数。</p><p>这样的话就可以使用循环等操作，获得当月份的所有日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, timedelta</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_month_range</span><span class="params">(start_date=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start_date <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        start_date = date.today().replace(month=<span class="number">2</span>, day=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for year, month.</span></span><br><span class="line">    temp, days_in_month = calendar.monthrange(start_date.year, start_date.month)</span><br><span class="line">    print(temp)</span><br><span class="line">    <span class="comment"># 3</span></span><br><span class="line">    print(days_in_month)</span><br><span class="line">    <span class="comment"># 28</span></span><br><span class="line">    end_date = start_date + timedelta(days=days_in_month)</span><br><span class="line">    <span class="keyword">return</span> (start_date, end_date)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a_day = timedelta(days=<span class="number">1</span>)</span><br><span class="line">first_day, last_day = get_month_range()</span><br><span class="line"><span class="keyword">while</span> first_day &lt; last_day:</span><br><span class="line">    print(first_day)</span><br><span class="line">    first_day += a_day</span><br></pre></td></tr></table></figure><p>同样的，也可以采用生成器的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_range</span><span class="params">(start, stop, step)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> date_range(datetime(<span class="number">2012</span>, <span class="number">9</span>, <span class="number">1</span>), datetime(<span class="number">2012</span>, <span class="number">10</span>, <span class="number">1</span>), timedelta(hours=<span class="number">6</span>)):</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p15_convert_strings_into_datetimes.html" target="_blank" rel="noopener">字符串转换为日期</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'2012-09-20'</span></span><br><span class="line">y = datetime.strptime(text, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">z = datetime.now()</span><br><span class="line">diff = z- y</span><br><span class="line">print(diff)</span><br><span class="line"><span class="comment"># 2077 days, 11:13:12.631424</span></span><br></pre></td></tr></table></figure><blockquote><p><code>datetime.strptime()</code> 方法支持很多的格式化代码， 比如 <code>%Y</code> 代表4位数年份， <code>%m</code> 代表两位数月份。 还有一点值得注意的是这些格式化占位符也可以反过来使用，将日期输出为指定的格式字符串形式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z = datetime.now()</span><br><span class="line">nice_z = datetime.strftime(z, <span class="string">'%Y年%m月%d日'</span>)</span><br><span class="line">print(nice_z)</span><br><span class="line"><span class="comment"># 2018年05月29日</span></span><br></pre></td></tr></table></figure><blockquote><p>还有一点需要注意的是， <code>strptime()</code> 的性能要比你想象中的差很多， 因为它是使用纯Python实现，并且必须处理所有的系统本地设置。 如果你要在代码中需要解析大量的日期并且已经知道了日期字符串的确切格式，可以自己实现一套解析方案来获取更好的性能。</p></blockquote><ul><li><code>datetime.strptime(text, &#39;%Y-%m-%d&#39;)</code> 将字符串转为日期格式。</li><li><p><code>datetime.strftime(z, &#39;%Y年%m月%d日&#39;)</code> 将日期格式按照自己所设定的格式转为字符串。（这个函数运行的会很慢，如果需要大量的对字符串的操作，并且有很多格式相似，可以自己用字符串拆分等方式，拆字符串拼接，这样的方式可以比这个函数快7倍）</p></li><li><p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p16_manipulate_dates_involving_timezone.html" target="_blank" rel="noopener">结合时区的日期操作</a></p></li></ul><p><code>pytz</code> 模块一个主要用途是将 <code>datetime</code> 库创建的简单日期对象本地化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from pytz import timezone</span><br><span class="line"></span><br><span class="line">d = datetime(2018, 5, 28, 11, 22, 41)</span><br><span class="line">print(d)</span><br><span class="line">d = datetime.now()</span><br><span class="line"></span><br><span class="line">central = timezone(&apos;Asia/Shanghai&apos;)</span><br><span class="line">loc_d = central.localize(d)</span><br><span class="line">print(loc_d)</span><br><span class="line"># 2018-05-29 11:28:56.614715+08:00</span><br><span class="line"></span><br><span class="line">bang_d = loc_d.astimezone(timezone(&apos;US/Central&apos;))</span><br><span class="line">print(bang_d)</span><br><span class="line"># 2018-05-28 22:28:56.614715-05:00</span><br></pre></td></tr></table></figure><p>首先需要先本地化时间（<code>localize</code>方法），之后再调用 <code>astimezone</code> 方法用于切换时区时间。</p><blockquote><p>在使用的时候需要注意，在本地化时间上操作的时候，要考虑到夏令时的相关问题，不然会出现时间差 1 小时的情况。</p></blockquote><p>在使用的时候，如果不记得时区的表达方式，可以使用 <code>country_timezones</code> 来获得时区。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line">p = pytz.country_timezones[<span class="string">'IN'</span>]</span><br><span class="line">print(p)</span><br><span class="line"><span class="comment"># ['Asia/Kolkata']</span></span><br><span class="line"></span><br><span class="line">p = pytz.country_timezones[<span class="string">'CN'</span>]</span><br><span class="line">print(p)</span><br><span class="line"><span class="comment"># ['Asia/Shanghai', 'Asia/Urumqi']</span></span><br></pre></td></tr></table></figure><h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p>遍历迭代下一个元素，在文件中表示一行。在执行的时候，如果捕获到最后一行，或者捕获到自定义的结束字符的时候，就会返回<code>StopIteration</code>异常，结束读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">it = iter(items)</span><br><span class="line">print(next(it))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">print(next(it))</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">print(next(it))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">print(next(it))</span><br><span class="line"><span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="iter()"></a><strong>iter</strong>()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p02_delegating_iteration.html" target="_blank" rel="noopener">代理迭代</a></li></ul><p>如果在自己定义的类中需要有自己的定义的迭代，可以定义一个 <code>__iter__()</code> 方法，将迭代操作代理到容器内部的对象上去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._value = value</span><br><span class="line">        self._children = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># &#123;!r&#125; 其中 “!r” 对应 repr()； “!s” 对应 str(); “!a” 对应 ascii()。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;!r&#125;)'</span>.format(self._value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_children</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._children.append(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self._children)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root = Node(<span class="number">0</span>)</span><br><span class="line">    child1 = Node(<span class="number">1</span>)</span><br><span class="line">    child2 = Node(<span class="number">2</span>)</span><br><span class="line">    root.add_children(child1)</span><br><span class="line">    root.add_children(child2)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> root:</span><br><span class="line">        print(ch)</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>iter()</code> 函数的使用简化了代码， <code>iter(s)</code> 只是简单的通过调用 <code>s.__iter__()</code> 方法来返回对应的迭代器对象， 就跟 <code>len(s)</code> 会调用 <code>s.__len__()</code> 原理是一样的。</p></blockquote><h2 id="实现深度优先的遍历的树形结构"><a href="#实现深度优先的遍历的树形结构" class="headerlink" title="实现深度优先的遍历的树形结构"></a>实现深度优先的遍历的树形结构</h2><blockquote><p>可以在类中迭代方法的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._value = value</span><br><span class="line">        self._children = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;!r&#125;)'</span>.format(self._value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_child</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._children.append(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self._children)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth_first</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> self</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> c.depth_first()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root = Node(<span class="number">0</span>)</span><br><span class="line">    child1 = Node(<span class="number">1</span>)</span><br><span class="line">    child2 = Node(<span class="number">2</span>)</span><br><span class="line">    root.add_child(child1)</span><br><span class="line">    root.add_child(child2)</span><br><span class="line">    child1.add_child(Node(<span class="number">3</span>))</span><br><span class="line">    child1.add_child(Node(<span class="number">4</span>))</span><br><span class="line">    child2.add_child(Node(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> root.depth_first():</span><br><span class="line">        print(ch)</span><br></pre></td></tr></table></figure><p>在 <code>depth_first</code> 方法中，首先迭代自己，之后在 <code>__iter__</code> 的迭代中，开始迭代自己的下级，最后在循环中，<code>yield from c.depth_first()</code>放回自己的下级。</p><blockquote><p>在这段代码中，<code>depth_first()</code> 方法简单直观。 它首先返回自己本身并迭代每一个子节点并 通过调用子节点的 <code>depth_first()</code> 方法(使用 <code>yield from</code> 语句)返回对应元素。</p></blockquote><h2 id="reversed"><a href="#reversed" class="headerlink" title="reversed()"></a>reversed()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p05_iterating_in_reverse.html" target="_blank" rel="noopener">反向迭代</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(a):</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line">    <span class="comment"># 4 3 2 1</span></span><br></pre></td></tr></table></figure><p>反向迭代仅仅当对象的大小可预先确定或者对象实现了 <code>__reversed__()</code> 的特殊方法时才能生效。 如果两者都不符合，那必须先将对象转换为一个列表才行。</p><blockquote><p>可以通过在自定义类上实现 <code>__reversed__()</code> 方法来实现反向迭代。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countdown</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Forward iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = self.start</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> n</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reverse iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n &lt;= self.start:</span><br><span class="line">            <span class="keyword">yield</span> n</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rr <span class="keyword">in</span> reversed(Countdown(<span class="number">30</span>)):</span><br><span class="line">    print(rr)</span><br><span class="line"><span class="keyword">for</span> rr <span class="keyword">in</span> Countdown(<span class="number">30</span>):</span><br><span class="line">    print(rr)</span><br></pre></td></tr></table></figure><p>定义一个反向迭代器可以使得代码非常的高效， 因为它不再需要将数据填充到一个列表中然后再去反向迭代这个列表。</p><h2 id="带有外部状态的生成器函数"><a href="#带有外部状态的生成器函数" class="headerlink" title="带有外部状态的生成器函数"></a>带有外部状态的生成器函数</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p06_define_generator_func_with_extra_state.html" target="_blank" rel="noopener">带有外部状态的生成器函数</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linehistory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lines, histlen=<span class="number">3</span>)</span>:</span></span><br><span class="line">        self.lines = lines</span><br><span class="line">        self.history = deque(maxlen=histlen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> lineno, line <span class="keyword">in</span> enumerate(self.lines, <span class="number">1</span>):</span><br><span class="line">            self.history.append((lineno, line))</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'somefile.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = linehistory(f)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'python'</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">for</span> lineno, hline <span class="keyword">in</span> lines.history:</span><br><span class="line">                print(<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(lineno, hline), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为了使用这个类，你可以将它当做是一个普通的生成器函数。 然而，由于可以创建一个实例对象，于是你可以访问内部属性值， 比如 <code>history</code> 属性或者是 <code>clear()</code> 方法。</p></blockquote><p>一个需要注意的小地方是，如果你在迭代操作时不使用for循环语句，那么你得先调用 <code>iter()</code> 函数。</p><h2 id="itertools-islice"><a href="#itertools-islice" class="headerlink" title="itertools.islice()"></a>itertools.islice()</h2><ul><li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p07_taking_slice_of_iterator.html" target="_blank" rel="noopener">迭代器切片</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(n, end=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; end:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = count(<span class="number">1</span>, end=<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.islice(c, <span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><blockquote><p><code>itertools.islice</code>表示对迭代器或者生成器进行切片，不过不能使用标准的切片方法，标准的切片方法是基于原来的数组是固定长度的情况下才能使用的。这个切片是以函数的形式，接收开始的值和结束的值，位置（长度），之后将切片之后的迭代器返回。</p></blockquote><p>迭代器和生成器不能使用标准的切片操作，因为它们的长度事先我们并不知道(并且也没有实现索引)。 函数 <code>islice()</code> 返回一个可以生成指定元素的迭代器，它通过遍历并丢弃直到切片开始索引位置的所有元素。 然后才开始一个个的返回元素，并直到切片结束索引位置。</p><p><strong>这里要着重强调的一点是 <code>islice()</code> 会消耗掉传入的迭代器中的数据。 必须考虑到迭代器是不可逆的这个事实。 所以如果你需要之后再次访问这个迭代器的话，那你就得先将它里面的数据放入一个列表中。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://python3-cookbook.readthedocs.io/zh_CN/latest/preface.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Python CookBook 3》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个文章是在我学习这本书过程的笔记（复制粘贴），主要用于自己方便查看。还有记录了我的觉得比较有用（没学过）的操作。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://jaelyn.coding.me/categories/python/"/>
    
    
      <category term="python3" scheme="http://jaelyn.coding.me/tags/python3/"/>
    
      <category term="Python CookBook" scheme="http://jaelyn.coding.me/tags/Python-CookBook/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor 指令学习</title>
    <link href="http://jaelyn.coding.me/2018/05/15/supervisor-learn/"/>
    <id>http://jaelyn.coding.me/2018/05/15/supervisor-learn/</id>
    <published>2018-05-15T08:46:08.000Z</published>
    <updated>2018-05-15T08:52:30.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.restran.net/2015/10/04/supervisord-tutorial/" target="_blank" rel="noopener">* Python 进程管理工具 Supervisor 使用教程</a></li><li><a href="http://liuzxc.github.io/blog/supervisor/" target="_blank" rel="noopener">Supervisor 使用简介</a></li><li><a href="https://www.cnblogs.com/xueweihan/p/6195824.html" target="_blank" rel="noopener">supervisor 安装、配置、常用命令</a></li><li><a href="https://blog.csdn.net/shudaqi2010/article/details/51153961" target="_blank" rel="noopener">Supervisor重新加载配置启动新的进程</a></li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Supervisor 是一个进程管理工具，可以简单的进行进程的控制（启动，重启，停止等），可以设置网址，直接在浏览器上可视化的操作进程。</p><p>一般情况下，当我们需要以守护进程的方式启动某些进程的时候，例如后台任务（备份数据，同步数据，日志处理，消息推送等）和Web服务进程，经常被用来管理和启动一组<code>Tornado</code>进程实现负载均衡。</p><p>有两个重要的组成部分：<code>supervisord</code>和<code>supervisorctl</code>。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>sudo pip install supervisor</code></pre><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>这个命令可以将supervisor的默认配置输出到一个文件中，到时候直接在那上面修改会方便很多，</p><pre><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code></pre><p>箭头后面指向路径，如果出现没有权限的问题，可以使用这条命令</p><pre><code>sudo su - root -c &quot;echo_supervisord_conf &gt; /etc/supervisord.conf&quot;</code></pre><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>在默认的配置文件中，会将 <code>supervisord.pid</code> 以及 <code>supervisor.sock</code> 是放在 /tmp 目录下，但是 /tmp 目录是存放临时文件，里面的文件是会被 Linux 系统删除的，一旦这些文件丢失，就无法再通过 <code>supervisorctl</code> 来执行 <code>restart</code> 和 <code>stop</code> 命令了，将只会得到 unix:///tmp/supervisor.sock 不存在的错误 。（引用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">unix_http_server]</span><br><span class="line">;file=/tmp/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">;修改为 /home/supervisor 目录，避免被系统删除</span><br><span class="line">file=/home/supervisor/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">;logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">;修改为 /var/log 目录，避免被系统删除</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">;日志文件多大时进行分割</span><br><span class="line">logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="line">;最多保留多少份日志文件</span><br><span class="line">logfile_backups=10           ; (num of main logfile rotation backups;default 10)</span><br><span class="line">loglevel=info                ; (log level;default info; others: debug,warn,trace)</span><br><span class="line">;pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">;修改为 /home/supervisor 目录，避免被系统删除</span><br><span class="line">pidfile=/home/supervisor/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">;设置启动supervisord的用户，一般情况下不要轻易用root用户来启动，除非你真的确定要这么做</span><br><span class="line">;user=chrism                 ; (default is current user, required if root)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">; 必须和&apos;unix_http_server&apos;里面的设定匹配</span><br><span class="line">;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line">;修改为 /home/supervisor 目录，避免被系统删除</span><br><span class="line">serverurl=unix:///home/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</span><br><span class="line">;username=chris              ; should be same as http_username if set</span><br><span class="line">;password=123                ; should be same as http_password if set</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="使用浏览器来管理"><a href="#使用浏览器来管理" class="headerlink" title="使用浏览器来管理"></a>使用浏览器来管理</h3><p>supervisor 同时提供了通过浏览器来管理进程的方法，只需要注释掉如下几行就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for ;all iface)</span><br><span class="line">;username=user              ; (default is no username (open server))</span><br><span class="line">;password=123               ; (default is no password (open server))</span><br><span class="line">[supervisorctl]</span><br><span class="line">...</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</span><br><span class="line">;username=chris              ; should be same as http_username if set</span><br><span class="line">;password=123                ; should be same as http_password if set</span><br></pre></td></tr></table></figure><h3 id="使用-include"><a href="#使用-include" class="headerlink" title="使用 include"></a>使用 include</h3><p>在配置文件的最后，有一个 [include] 的配置项，跟 Nginx 一样，可以 include 某个文件夹下的所有配置文件，这样我们就可以为每个进程或相关的几个进程的配置单独写成一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor.d/*.ini</span><br></pre></td></tr></table></figure><h3 id="进程的配置样例"><a href="#进程的配置样例" class="headerlink" title="进程的配置样例"></a>进程的配置样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">; 设置进程的名称，使用 supervisorctl 来管理进程时需要使用该进程名</span><br><span class="line">[program:your_program_name]</span><br><span class="line">command=python server.py --port=9000</span><br><span class="line">;numprocs=1                 ; 默认为1</span><br><span class="line">;process_name=%(program_name)s   ; 默认为 %(program_name)s，即 [program:x] 中的 x</span><br><span class="line">directory=/home/python/tornado_server ; 执行 command 之前，先切换到工作目录</span><br><span class="line">user=oxygen                 ; 使用 oxygen 用户来启动该进程</span><br><span class="line">; 程序崩溃时自动重启，重启次数是有限制的，默认为3次</span><br><span class="line">autorestart=true            </span><br><span class="line">redirect_stderr=true        ; 重定向输出的日志</span><br><span class="line">stdout_logfile = /var/log/supervisor/tornado_server.log</span><br><span class="line">loglevel=info</span><br></pre></td></tr></table></figure><h3 id="启动-supervisord"><a href="#启动-supervisord" class="headerlink" title="启动 supervisord"></a>启动 supervisord</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用默认的配置文件 /etc/supervisord.conf</span><br><span class="line">supervisord</span><br><span class="line"># 明确指定配置文件</span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line"># 使用 user 用户启动 supervisord</span><br><span class="line">supervisord -u user</span><br></pre></td></tr></table></figure><h3 id="supervisorctl-命令介绍"><a href="#supervisorctl-命令介绍" class="headerlink" title="supervisorctl 命令介绍"></a>supervisorctl 命令介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 停止某一个进程，program_name 为 [program:x] 里的 x</span><br><span class="line">supervisorctl stop program_name</span><br><span class="line"># 启动某个进程</span><br><span class="line">supervisorctl start program_name</span><br><span class="line"># 重启某个进程</span><br><span class="line">supervisorctl restart program_name</span><br><span class="line"># 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)</span><br><span class="line">supervisorctl stop groupworker:</span><br><span class="line"># 结束 groupworker:name1 这个进程 (start，restart 同理)</span><br><span class="line">supervisorctl stop groupworker:name1</span><br><span class="line"># 停止全部进程，注：start、restart、stop 都不会载入最新的配置文件</span><br><span class="line">supervisorctl stop all</span><br><span class="line"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class="line">supervisorctl reload</span><br><span class="line"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h3 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reread (只更新配置文件)</span><br><span class="line">supervisorctl update (只启动有改动的进程)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.restran.net/2015/10/04/supervisord-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;* Python 进程管理工具 Supervisor 使用教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liuzxc.github.io/blog/supervisor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Supervisor 使用简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/xueweihan/p/6195824.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;supervisor 安装、配置、常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/shudaqi2010/article/details/51153961&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Supervisor重新加载配置启动新的进程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Supervisor 是一个进程管理工具，可以简单的进行进程的控制（启动，重启，停止等），可以设置网址，直接在浏览器上可视化的操作进程。&lt;/p&gt;
&lt;p&gt;一般情况下，当我们需要以守护进程的方式启动某些进程的时候，例如后台任务（备份数据，同步数据，日志处理，消息推送等）和Web服务进程，经常被用来管理和启动一组&lt;code&gt;Tornado&lt;/code&gt;进程实现负载均衡。&lt;/p&gt;
&lt;p&gt;有两个重要的组成部分：&lt;code&gt;supervisord&lt;/code&gt;和&lt;code&gt;supervisorctl&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具集" scheme="http://jaelyn.coding.me/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="Supervisor" scheme="http://jaelyn.coding.me/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 指令学习</title>
    <link href="http://jaelyn.coding.me/2018/05/02/ubuntu-code-learning/"/>
    <id>http://jaelyn.coding.me/2018/05/02/ubuntu-code-learning/</id>
    <published>2018-05-02T07:01:09.000Z</published>
    <updated>2018-05-02T07:55:34.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu-指令学习"><a href="#Ubuntu-指令学习" class="headerlink" title="Ubuntu 指令学习"></a>Ubuntu 指令学习</h2><h4 id="显示端口对应的信息"><a href="#显示端口对应的信息" class="headerlink" title="显示端口对应的信息"></a>显示端口对应的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 显示8081端口信息</span><br><span class="line">lsof -i:8081</span><br></pre></td></tr></table></figure><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 杀死23919进程</span><br><span class="line">kill -9 23919</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在进程中查询新信息</span><br><span class="line">ps -aux | grep &quot;basic.py&quot;</span><br></pre></td></tr></table></figure><h4 id="显示结尾的信息"><a href="#显示结尾的信息" class="headerlink" title="显示结尾的信息"></a>显示结尾的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 显示信息，并且在之间查询</span><br><span class="line">tail -f -n -10000 uwsgi.log | grep &quot;ERROR&quot;</span><br></pre></td></tr></table></figure><h4 id="更新信息，升级"><a href="#更新信息，升级" class="headerlink" title="更新信息，升级"></a>更新信息，升级</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure><blockquote><p>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来.</p><p>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它. (所以通常这个会被认为是有点风险的升级) </p></blockquote><h4 id="查看磁盘空间大小"><a href="#查看磁盘空间大小" class="headerlink" title="查看磁盘空间大小"></a>查看磁盘空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查看磁盘剩余空间</span><br><span class="line">df -hl</span><br><span class="line"></span><br><span class="line"># 查看每个根路径的分区大小 </span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"># 返回该目录的大小</span><br><span class="line">du -sh [目录名] </span><br><span class="line"></span><br><span class="line"># 返回该文件夹总M数</span><br><span class="line">du -sm [文件夹] </span><br><span class="line"></span><br><span class="line"># 查看更多功能</span><br><span class="line">df --help </span><br><span class="line"></span><br><span class="line"># 查看硬盘的分区</span><br><span class="line">sudo fdisk -l</span><br><span class="line"></span><br><span class="line"># 查看IDE硬盘信息 </span><br><span class="line">sudo hdparm -i /dev/hda</span><br><span class="line"></span><br><span class="line"># 查看STAT硬盘信息 </span><br><span class="line">sudo hdparm -I /dev/sda </span><br><span class="line">sudo apt-get install blktool </span><br><span class="line">sudo blktool /dev/sda id</span><br><span class="line"></span><br><span class="line"># 查看硬盘剩余空间 </span><br><span class="line">df -h #df -H</span><br><span class="line"></span><br><span class="line"># 查看目录占用空间 </span><br><span class="line">du -hs 目录名</span><br><span class="line"></span><br><span class="line"># 优盘没法卸载 </span><br><span class="line">sync fuser -km /media/usbdisk</span><br></pre></td></tr></table></figure><h4 id="ubuntu-终端常用命令"><a href="#ubuntu-终端常用命令" class="headerlink" title="ubuntu 终端常用命令"></a>ubuntu 终端常用命令</h4><p>ctrl + l - 清屏 </p><p>ctrl + c - 终止命令</p><p>ctrl + d - 退出 shell，好像也可以表示EOF</p><p>ctrl + z - 将当前进程置于后台，fg还原。 </p><p>ctrl + r - 从命令历史中找 </p><p>ctrl + a - 光标移到行首 </p><p>ctrl + e - 光标移到行尾</p><p>ctrl + u - 清除光标到行首的字符 </p><p>ctrl + w - 清除光标之前一个单词 </p><p>ctrl + k - 清除光标到行尾的字符</p><p>ctrl + t - 交换光标前两个字符 </p><p>ctrl + y - 粘贴前一ctrl+u类命令删除的字符</p><p>ctrl + p - 上一条命令</p><p>ctrl + n - 下一条命令 </p><p>ctrl + v - 输入控制字符 如ctrl+v <enter> ,会输入^M </enter></p><p>ctrl + f - 光标后移一个字符</p><p>ctrl + b - 光标前移一个字符 </p><p>ctrl + h - 删除光标前一个字符 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ubuntu-指令学习&quot;&gt;&lt;a href=&quot;#Ubuntu-指令学习&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 指令学习&quot;&gt;&lt;/a&gt;Ubuntu 指令学习&lt;/h2&gt;&lt;h4 id=&quot;显示端口对应的信息&quot;&gt;&lt;a href=&quot;#显示端口对应的信息&quot; class=&quot;headerlink&quot; title=&quot;显示端口对应的信息&quot;&gt;&lt;/a&gt;显示端口对应的信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 显示8081端口信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsof -i:8081&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;杀死进程&quot;&gt;&lt;a href=&quot;#杀死进程&quot; class=&quot;headerlink&quot; title=&quot;杀死进程&quot;&gt;&lt;/a&gt;杀死进程&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 杀死23919进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kill -9 23919&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://jaelyn.coding.me/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://jaelyn.coding.me/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>我的vim配置</title>
    <link href="http://jaelyn.coding.me/2018/04/13/myvim/"/>
    <id>http://jaelyn.coding.me/2018/04/13/myvim/</id>
    <published>2018-04-13T06:26:04.000Z</published>
    <updated>2018-05-16T08:42:27.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在这里保留下自己的vim配置"><a href="#在这里保留下自己的vim配置" class="headerlink" title="在这里保留下自己的vim配置"></a>在这里保留下自己的vim配置</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br><span class="line"></span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">set confirm</span><br><span class="line"></span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set expandtab</span><br><span class="line">set smarttab</span><br><span class="line"></span><br><span class="line">set autoindent</span><br><span class="line">set smartindent</span><br><span class="line"></span><br><span class="line">set hlsearch</span><br><span class="line">set showmatch</span><br><span class="line"></span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">set foldenable</span><br><span class="line">set foldmethod=manual</span><br><span class="line">autocmd InsertLeave * se nocul</span><br><span class="line"></span><br><span class="line">autocmd InsertEnter * se cul</span><br><span class="line"></span><br><span class="line">if version &gt;= 603</span><br><span class="line">    set helplang=cn</span><br><span class="line">    set encoding=utf-8</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>需要在 <code>vim ~/.vimrc</code> 中配置，配置完成之后需要应用 <code>source ~/.bashrc</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在这里保留下自己的vim配置&quot;&gt;&lt;a href=&quot;#在这里保留下自己的vim配置&quot; class=&quot;headerlink&quot; title=&quot;在这里保留下自己的vim配置&quot;&gt;&lt;/a&gt;在这里保留下自己的vim配置&lt;/h2&gt;
    
    </summary>
    
      <category term="vim" scheme="http://jaelyn.coding.me/categories/vim/"/>
    
    
      <category term="vim" scheme="http://jaelyn.coding.me/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>学习Django过程中遇到的问题及解决方案</title>
    <link href="http://jaelyn.coding.me/2018/04/03/problem-solving/"/>
    <id>http://jaelyn.coding.me/2018/04/03/problem-solving/</id>
    <published>2018-04-03T06:32:12.000Z</published>
    <updated>2018-04-03T06:34:30.595Z</updated>
    
    <content type="html"><![CDATA[<p>​    在学习过程中，遇到的一些问题和最后找的解决方案，在此记录保存，不定期更新。这其中的问题可能涉及到Django框架的操作，python语言的编写错误，或着uwsgi的一些错误，都在此记录。</p><a id="more"></a><h3 id="UWSGI-出现-“invalid-request-block-size-xxxx-max-4096-”的错误"><a href="#UWSGI-出现-“invalid-request-block-size-xxxx-max-4096-”的错误" class="headerlink" title="UWSGI 出现 “invalid request block size: xxxx (max 4096)”的错误"></a>UWSGI 出现 “invalid request block size: xxxx (max 4096)”的错误</h3><p>​    对于uwsgi来说，默认会设置一个比较小的缓存（buffer 4k）来接收来接收每个请求的头信息,如果在日志中看见”invalid request block size”,它意味着你需要一个大一点的buffer。</p><p>​    简单的来说，就是URL的地址长度超过了4096个字符，而4096就是uwsgi配置中buffer-size的默认值，所以只需要将buffer-size改大一点即可。</p><ul><li>可以在命令中加上buffer-size指出需要的大小</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi -x uwsgi.ini --buffer-size 32768</span><br></pre></td></tr></table></figure><ul><li>或者在配置文件中添加<code>buffer-size  = 8192</code></li></ul><blockquote><p>注意：如果你的日志中接收到了请求块大小为‘21573’，那这可能意味着你使用HTTP协议与一个使用uwsgi协议的实例进行通信。</p></blockquote><p>​    问题基本解决，至于为什么这个问题是偶尔出现？那是因为openid登陆的时候会携带一个参数叫next_url，这个地址是用来指定登陆成功之后返回到哪里地址，如果这个next_url太长就会导致url地址超过4096，有时候next_url=/，即网站根地址，url地址长度就不会超过4096。另外还和openid返回的登陆人信息长度有关系，导致有些人从来不会出现这个错误，有些人偶尔出现这个问题。</p><p>参考：<a href="https://yq.aliyun.com/ziliao/29027" target="_blank" rel="noopener">uwsgi部署到nginx出现invalid request block size: 4161 (max 4096)</a></p><h3 id="Django-数据库初始化时出现-django-core-exceptions-AppRegistryNotReady-Apps-aren’t-loaded-yet"><a href="#Django-数据库初始化时出现-django-core-exceptions-AppRegistryNotReady-Apps-aren’t-loaded-yet" class="headerlink" title="Django 数据库初始化时出现 django.core.exceptions.AppRegistryNotReady: Apps aren’t loaded yet."></a>Django 数据库初始化时出现 django.core.exceptions.AppRegistryNotReady: Apps aren’t loaded yet.</h3><p>主要的报错原因是因为在数据库中使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">User = get_user_model()</span><br></pre></td></tr></table></figure><p>​    来获得当前用户，这个是一个先查询的，就是说系统运行到这的时候，会先去查询这个用户类是否已经加载好，如果没有加载好就会出现这个错误。</p><p>目前没有想打一个比较好的办法解决，就初始阶段的解决方法有两个：</p><ol><li>适当调整<em>setting.py</em>中<code>INSTALLED_APPS</code>的先后顺序，使得设计的<code>AUTH_USER_MODEL</code>比较先加载。</li><li>修改数据库代码，不这样获得用户，而是直接用字符串的方式获得</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Project.settings <span class="keyword">import</span> AUTH_USER_MODEL</span><br></pre></td></tr></table></figure><p>之后在外键中直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_info = models.OneToOneField(AUTH_USER_MODEL)</span><br></pre></td></tr></table></figure><h3 id="Django中文编码错误问题"><a href="#Django中文编码错误问题" class="headerlink" title="Django中文编码错误问题"></a>Django中文编码错误问题</h3><p>​    编码报错UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xb0 in position 1······</p><p>​    这类的问题，其中一个原因可能是在对方调用该接口的时候，传递过来的数据编码于本系统的编码格式不一致问题，在商量好双方的接口编码规则之后，可以尝试直接在出错问题的文件中修改系统的默认编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">defaultencoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="keyword">if</span> sys.getdefaultencoding() != defaultencoding:</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(defaultencoding)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    在学习过程中，遇到的一些问题和最后找的解决方案，在此记录保存，不定期更新。这其中的问题可能涉及到Django框架的操作，python语言的编写错误，或着uwsgi的一些错误，都在此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>WARNING REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
    <link href="http://jaelyn.coding.me/2018/03/17/ssh-remote/"/>
    <id>http://jaelyn.coding.me/2018/03/17/ssh-remote/</id>
    <published>2018-03-17T06:40:57.000Z</published>
    <updated>2018-03-17T06:44:25.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</h3><p>在我们连接云主机的时候，相关的配置会保存在<code>/Users/apple/.ssh</code>中的<code>known_hosts</code>文件内，如果云主机修改等操作后，就有可能会出现在这个问题。</p><p>解决方式很简单，进入到这个文件内，将相关的IP删除，之后在重新连接，即可。</p><a id="more"></a><ul><li>进入到相关文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>vim 操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim known_hosts</span><br></pre></td></tr></table></figure><ul><li>删除对应的行</li><li>重新连接</li></ul><p><em>也可以使用<code>ssh-keygen -R &quot;IP&quot;</code>命令，直接删除相关远程连接的云主机IP</em></p><p>不推荐直接删除这个文件</p><blockquote><p><strong>known_hosts是记录远程主机的公钥</strong>的文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED&quot;&gt;&lt;a href=&quot;#在SSH连接云主机的时候出现-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED&quot; class=&quot;headerlink&quot; title=&quot;在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&quot;&gt;&lt;/a&gt;在SSH连接云主机的时候出现 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&lt;/h3&gt;&lt;p&gt;在我们连接云主机的时候，相关的配置会保存在&lt;code&gt;/Users/apple/.ssh&lt;/code&gt;中的&lt;code&gt;known_hosts&lt;/code&gt;文件内，如果云主机修改等操作后，就有可能会出现在这个问题。&lt;/p&gt;
&lt;p&gt;解决方式很简单，进入到这个文件内，将相关的IP删除，之后在重新连接，即可。&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jaelyn.coding.me/categories/ubuntu/"/>
    
    
      <category term="ssh" scheme="http://jaelyn.coding.me/tags/ssh/"/>
    
      <category term="ubuntu" scheme="http://jaelyn.coding.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>python 虚拟环境</title>
    <link href="http://jaelyn.coding.me/2018/03/10/python-vertualenv/"/>
    <id>http://jaelyn.coding.me/2018/03/10/python-vertualenv/</id>
    <published>2018-03-10T06:24:36.000Z</published>
    <updated>2018-03-10T06:43:00.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-虚拟环境设置"><a href="#python-虚拟环境设置" class="headerlink" title="python 虚拟环境设置"></a>python 虚拟环境设置</h2><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip install virtualenv</code></p><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p><code>virtualenv [新环境名]</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>source ./bin/activate</code></p><blockquote><p>执行所创建的虚拟环境下的根目录的activate文件</p></blockquote><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p><code>deactivate</code></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>直接删除创建的文件夹就行</p><a id="more"></a><h3 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>pip install virtualenvwrapper</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>创建虚拟环境管理目录: <code>mkdir $HOME/.local/virtualenvs</code></li><li>在~/.bashrc中添加行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export VIRTUALENV_USE_DISTRIBUTE=1</span><br><span class="line">export WORKON_HOME=$HOME/.local/virtualenvs</span><br><span class="line">if [ -e $HOME/.local/bin/virtualenvwrapper.sh ];then</span><br><span class="line">source $HOME/.local/bin/virtualenvwrapper.sh</span><br><span class="line">else if [ -e /usr/local/bin/virtualenvwrapper.sh ];then</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">export PIP_VIRTUALENV_BASE=$WORKON_HOME</span><br><span class="line">export PIP_RESPECT_VIRTUALENV=true</span><br></pre></td></tr></table></figure><ul><li>启动 virtualenvwrapper: <code>source ~/.bashrc</code></li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li>创建虚拟环境</li></ul><p><code>mkvirtualenv [环境名]</code></p><blockquote><p>也可以在创建的时候加上参数，确定python版本，<code>workon [环境名] --python=python3</code></p></blockquote><ul><li>删除</li></ul><p><code>rmvirtualenv [环境名]</code></p><ul><li>激活</li></ul><p><code>workon [环境名]</code></p><ul><li>退出</li></ul><p><code>deactivate</code></p><ul><li>列出所有环境</li></ul><p><code>workon</code> 或者 <code>lsvirtualenv -b</code></p><h4 id="查看所有指令"><a href="#查看所有指令" class="headerlink" title="查看所有指令"></a>查看所有指令</h4><p><code>virtualenvwrapper —help</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-虚拟环境设置&quot;&gt;&lt;a href=&quot;#python-虚拟环境设置&quot; class=&quot;headerlink&quot; title=&quot;python 虚拟环境设置&quot;&gt;&lt;/a&gt;python 虚拟环境设置&lt;/h2&gt;&lt;h3 id=&quot;virtualenv&quot;&gt;&lt;a href=&quot;#virtualenv&quot; class=&quot;headerlink&quot; title=&quot;virtualenv&quot;&gt;&lt;/a&gt;virtualenv&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建虚拟环境&quot;&gt;&lt;a href=&quot;#创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟环境&quot;&gt;&lt;/a&gt;创建虚拟环境&lt;/h4&gt;&lt;p&gt;&lt;code&gt;virtualenv [新环境名]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;&lt;code&gt;source ./bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行所创建的虚拟环境下的根目录的activate文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;退出&quot;&gt;&lt;a href=&quot;#退出&quot; class=&quot;headerlink&quot; title=&quot;退出&quot;&gt;&lt;/a&gt;退出&lt;/h4&gt;&lt;p&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除&quot;&gt;&lt;a href=&quot;#删除&quot; class=&quot;headerlink&quot; title=&quot;删除&quot;&gt;&lt;/a&gt;删除&lt;/h4&gt;&lt;p&gt;直接删除创建的文件夹就行&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://jaelyn.coding.me/categories/python/"/>
    
    
      <category term="virtualenv" scheme="http://jaelyn.coding.me/tags/virtualenv/"/>
    
      <category term="python" scheme="http://jaelyn.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 05</title>
    <link href="http://jaelyn.coding.me/2018/02/23/django-rest-vue05/"/>
    <id>http://jaelyn.coding.me/2018/02/23/django-rest-vue05/</id>
    <published>2018-02-23T09:21:17.000Z</published>
    <updated>2018-02-23T09:44:06.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>view</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewset</span><span class="params">(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">        商品分类列表数据</span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">        获取商品分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = GoodsCategory.objects.filter(category_type=<span class="number">1</span>)</span><br><span class="line">    serializer_class = CategorySerializer</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>Serializer</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><ul><li>url</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置category的url</span></span><br><span class="line">router.register(<span class="string">r'categorys'</span>, CategoryViewset, base_name=<span class="string">"categorys"</span>)</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="django-cors-headers"><a href="#django-cors-headers" class="headerlink" title="django-cors-headers"></a>django-cors-headers</h3><ul><li><a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="noopener">官网</a></li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li>INSTALLED_APPS</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>middleware</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [  <span class="comment"># Or MIDDLEWARE_CLASSES on Django &lt; 1.10</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>, <span class="comment"># 只要添加这个</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>要放在CommonMiddleware前面</p></blockquote><ol><li>设置CORS_ORIGIN_ALLOW_ALL</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="用户登录和注册"><a href="#用户登录和注册" class="headerlink" title="用户登录和注册"></a>用户登录和注册</h2><h3 id="权限认证（DRF自带的token认证）"><a href="#权限认证（DRF自带的token认证）" class="headerlink" title="权限认证（DRF自带的token认证）"></a>权限认证（DRF自带的token认证）</h3><ul><li><a href="http://www.django-rest-framework.org/api-guide/authentication/#authentication" target="_blank" rel="noopener">Authentication</a></li></ul><h4 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对应的Authentication也有三种，<a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication" target="_blank" rel="noopener">TokenAuthentication</a>在前后端分离的系统中比较常见</p></blockquote><ul><li><a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication" target="_blank" rel="noopener">TokenAuthentication</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework.authtoken'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="创建对应的Token"><a href="#创建对应的Token" class="headerlink" title="创建对应的Token"></a>创建对应的Token</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line">token = Token.objects.create(user=...)</span><br><span class="line"><span class="keyword">print</span> token.key</span><br></pre></td></tr></table></figure><h4 id="获取token的URL配置"><a href="#获取token的URL配置" class="headerlink" title="获取token的URL配置"></a>获取token的URL配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken <span class="keyword">import</span> views</span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>在输入用户名密码后会返回对应的token，用于前端保存使用，并且在提交的时候将这个token附加在httpheader中，确保用户的登录并且用于权限认证</p></blockquote><h4 id="在httpheader中添加token"><a href="#在httpheader中添加token" class="headerlink" title="在httpheader中添加token"></a>在httpheader中添加token</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token <span class="number">9944</span>b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span><br></pre></td></tr></table></figure><h4 id="在setting中配置token的认证方式"><a href="#在setting中配置token的认证方式" class="headerlink" title="在setting中配置token的认证方式"></a>在setting中配置token的认证方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.TokenAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将token认证放到view中"><a href="#将token认证放到view中" class="headerlink" title="将token认证放到view中"></a>将token认证放到view中</h3><ul><li>将setting中的<code>&#39;rest_framework.authentication.TokenAuthentication&#39;</code>去除</li><li>在view中添加认证<code>authentication_classes = (TokenAuthentication, )</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> TokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    </span><br><span class="line">    authentication_classes = (TokenAuthentication, )</span><br></pre></td></tr></table></figure><h3 id="JWT方式用户认证"><a href="#JWT方式用户认证" class="headerlink" title="JWT方式用户认证"></a>JWT方式用户认证</h3><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是 JWT – JSON WEB TOKEN</a></li><li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">JSON Web Token - 在Web应用间安全地传递信息</a></li><li><a href="https://www.jianshu.com/p/180a870a308a" target="_blank" rel="noopener">前后端分离之JWT用户认证</a></li><li><a href="http://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">REST framework JWT Auth</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure><h4 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h4><blockquote><ul><li><p>Python (2.7, 3.3, 3.4, 3.5)</p></li><li><p>Django (1.8, 1.9, 1.10)</p></li><li>Django REST Framework (3.0, 3.1, 3.2, 3.3, 3.4, 3.5)</li></ul></blockquote><h4 id="setting-1"><a href="#setting-1" class="headerlink" title="setting"></a>setting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Authorization: JWT &lt;your_token&gt;"</span> http://localhost:<span class="number">8000</span>/protected-url/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义用户认证"><a href="#自定义用户认证" class="headerlink" title="自定义用户认证"></a>自定义用户认证</h3><ul><li>setting</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'users.views.CustomBackend'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>view 中的逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义用户验证</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.get(Q(username=username)|Q(mobile=username))</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h2 id="简单的信息发送"><a href="#简单的信息发送" class="headerlink" title="简单的信息发送"></a>简单的信息发送</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YunPian</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, api_key)</span>:</span></span><br><span class="line">        self.api_key = api_key</span><br><span class="line">        self.single_send_url = <span class="string">"******"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_sms</span><span class="params">(self, code, mobile)</span>:</span></span><br><span class="line">        parmas = &#123;</span><br><span class="line">            <span class="string">"apikey"</span>: self.api_key,</span><br><span class="line">            <span class="string">"mobile"</span>: mobile,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"&#123;code&#125;。如非本人操作，请忽略本短信"</span>.format(code=code)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.post(self.single_send_url, data=parmas)</span><br><span class="line">        re_dict = json.loads(response.text)</span><br><span class="line">        <span class="keyword">return</span> re_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    yun_pian = YunPian(<span class="string">"****"</span>)</span><br><span class="line">    yun_pian.send_sms(<span class="string">"2017"</span>, <span class="string">"****"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以直接在百度搜索本地ip，就能获得本机对外的ip地址</p></blockquote><h2 id="Serializer信息验证"><a href="#Serializer信息验证" class="headerlink" title="Serializer信息验证"></a>Serializer信息验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code = serializers.CharField(required=<span class="keyword">True</span>, write_only=<span class="keyword">True</span>, max_length=<span class="number">4</span>, min_length=<span class="number">4</span>,label=<span class="string">"验证码"</span>,</span><br><span class="line">                                 error_messages=&#123;</span><br><span class="line">                                     <span class="string">"blank"</span>: <span class="string">"请输入验证码"</span>,</span><br><span class="line">                                     <span class="string">"required"</span>: <span class="string">"请输入验证码"</span>,</span><br><span class="line">                                     <span class="string">"max_length"</span>: <span class="string">"验证码格式错误"</span>,</span><br><span class="line">                                     <span class="string">"min_length"</span>: <span class="string">"验证码格式错误"</span></span><br><span class="line">                                 &#125;,</span><br><span class="line">                                 help_text=<span class="string">"验证码"</span>)</span><br></pre></td></tr></table></figure><h3 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#validators" target="_blank" rel="noopener">Validators</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"></span><br><span class="line">slug = SlugField(</span><br><span class="line">    max_length=<span class="number">100</span>,</span><br><span class="line">    validators=[UniqueValidator(queryset=BlogPost.objects.all())]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = serializers.CharField(label=<span class="string">"用户名"</span>, help_text=<span class="string">"用户名"</span>, required=<span class="keyword">True</span>, allow_blank=<span class="keyword">False</span>, validators=[UniqueValidator(queryset=User.objects.all(), message=<span class="string">"用户已经存在"</span>)])</span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h3 id="post-save-signal"><a href="#post-save-signal" class="headerlink" title="post_save signal"></a><code>post_save</code> signal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_save, sender=settings.AUTH_USER_MODEL)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_auth_token</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        Token.objects.create(user=instance)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_save, sender=User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        password = instance.password</span><br><span class="line">        instance.set_password(password)</span><br><span class="line">        instance.save()</span><br></pre></td></tr></table></figure><h3 id="CurrentUserDefault"><a href="#CurrentUserDefault" class="headerlink" title="CurrentUserDefault"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#currentuserdefault" target="_blank" rel="noopener">CurrentUserDefault</a></h3><blockquote><p>获取当前用户</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">owner = serializers.HiddenField(</span><br><span class="line">    default=serializers.CurrentUserDefault()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="UniqueTogetherValidator"><a href="#UniqueTogetherValidator" class="headerlink" title="UniqueTogetherValidator"></a><a href="http://www.django-rest-framework.org/api-guide/validators/#uniquetogethervalidator" target="_blank" rel="noopener">UniqueTogetherValidator</a></h3><blockquote><p>联合索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueTogetherValidator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># ToDo items belong to a parent list, and have an ordering defined</span></span><br><span class="line">        <span class="comment"># by the 'position' field. No two items in a given list may share</span></span><br><span class="line">        <span class="comment"># the same position.</span></span><br><span class="line">        validators = [</span><br><span class="line">            UniqueTogetherValidator(</span><br><span class="line">                queryset=ToDoItem.objects.all(),</span><br><span class="line">                fields=(<span class="string">'list'</span>, <span class="string">'position'</span>)</span><br><span class="line">                message=<span class="string">"巴拉巴拉"</span></span><br><span class="line">            )</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>也可以在数据库中添加联合索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFav</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户收藏</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, help_text=<span class="string">"商品id"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'用户收藏'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (<span class="string">"user"</span>, <span class="string">"goods"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.user.username</span><br></pre></td></tr></table></figure><h3 id="用户权限认证"><a href="#用户权限认证" class="headerlink" title="用户权限认证"></a>用户权限认证</h3><h4 id="IsAuthenticated"><a href="#IsAuthenticated" class="headerlink" title="IsAuthenticated"></a>IsAuthenticated</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'request was permitted'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><h4 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Object-level permission to only allow owners of an object to edit it.</span></span><br><span class="line"><span class="string">    Assumes the model instance has an `owner` attribute.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request,</span></span><br><span class="line">        <span class="comment"># so we'll always allow GET, HEAD or OPTIONS requests.</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Instance must have an attribute named `owner`.</span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavViewset</span><span class="params">(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                     mixins.DestroyModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    permission_classes = (IsAuthenticated, IsOwnerOrReadOnly)</span><br><span class="line">    serializer_class = UserFavSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> UserFav.objects.filter(user=self.request.user)</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="DRF增强"><a href="#DRF增强" class="headerlink" title="DRF增强"></a><a href="https://chibisov.github.io/drf-extensions/docs/" target="_blank" rel="noopener">DRF增强</a></h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install drf-extensions</span><br></pre></td></tr></table></figure><p>在view中添加<code>CacheResponseMixin</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>setting的一些配置（过期时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_CACHE_RESPONSE_TIMEOUT'</span>: <span class="number">60</span> * <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="django-redis"><a href="#django-redis" class="headerlink" title="django redis"></a>django redis</h3><p><a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">django-redis 中文文档</a></p><h2 id="API限速"><a href="#API限速" class="headerlink" title="API限速"></a>API限速</h2><p> <a href="http://www.django-rest-framework.org/api-guide/throttling/#throttling" target="_blank" rel="noopener">Throttling</a></p><ul><li>在setting中配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'100/day'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'1000/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在view中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'status'</span>: <span class="string">'request was permitted'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><h2 id="sentry"><a href="#sentry" class="headerlink" title="sentry"></a>sentry</h2><p>错误日志</p><ul><li><a href="https://sentry.io/welcome/" target="_blank" rel="noopener">sentry</a></li><li><a href="https://github.com/getsentry/raven-python" target="_blank" rel="noopener">sentry github</a></li><li><a href="https://docs.sentry.io/clients/python/integrations/django/" target="_blank" rel="noopener">django sentry</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install raven --upgrade</span><br></pre></td></tr></table></figure><p>setting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'raven.contrib.django.raven_compat'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> raven</span><br><span class="line"></span><br><span class="line">RAVEN_CONFIG = &#123;</span><br><span class="line">    <span class="string">'dsn'</span>: <span class="string">'https://&lt;key&gt;:&lt;secret&gt;@sentry.io/&lt;project&gt;'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h2><p>异步</p><ul><li><a href="http://projectsedu.com/2017/02/08/django通过celery添加异步任务/" target="_blank" rel="noopener">django通过celery添加异步任务</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;view&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CategoryViewset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    list:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        商品分类列表数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    retrieve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        获取商品分类详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queryset = GoodsCategory.objects.filter(category_type=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serializer_class = CategorySerializer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
      <category term="Django Rest Framework" scheme="http://jaelyn.coding.me/tags/Django-Rest-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 04</title>
    <link href="http://jaelyn.coding.me/2018/02/20/django-rest-vue04/"/>
    <id>http://jaelyn.coding.me/2018/02/20/django-rest-vue04/</id>
    <published>2018-02-20T15:02:11.000Z</published>
    <updated>2018-02-23T09:41:32.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用类继承View的方式写接口"><a href="#使用类继承View的方式写接口" class="headerlink" title="使用类继承View的方式写接口"></a>使用类继承View的方式写接口</h2><h3 id="导入基础view"><a href="#导入基础view" class="headerlink" title="导入基础view"></a>导入基础view</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure><h3 id="在类中继承"><a href="#在类中继承" class="headerlink" title="在类中继承"></a>在类中继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="数据字典化的方式（序列化）"><a href="#数据字典化的方式（序列化）" class="headerlink" title="数据字典化的方式（序列化）"></a>数据字典化的方式（序列化）</h2><h3 id="传统"><a href="#传统" class="headerlink" title="传统"></a>传统</h3><h4 id="查询-循环-赋值方式"><a href="#查询-循环-赋值方式" class="headerlink" title="查询-循环-赋值方式"></a>查询-循环-赋值方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">json_list = []</span><br><span class="line">goods = Goods.objects.all()[:<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> good <span class="keyword">in</span> goods:</span><br><span class="line">json_dict = &#123;&#125;</span><br><span class="line">json_dict[<span class="string">"name"</span>] = good.name</span><br><span class="line">json_dict[<span class="string">"category"</span>] = good.category.name</span><br><span class="line">json_dict[<span class="string">"market_price"</span>] = good.market_price</span><br><span class="line">json_dict[<span class="string">"add_time"</span>] = good.add_time <span class="comment"># 这里会出现错误，报错原因是时间格式不能序列化成json</span></span><br><span class="line">json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(json_list), content_tyoe=<span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure><h4 id="使用Django自带的model-to-dict"><a href="#使用Django自带的model-to-dict" class="headerlink" title="使用Django自带的model_to_dict"></a>使用Django自带的<em>model_to_dict</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line"><span class="keyword">for</span> good <span class="keyword">in</span> goods:</span><br><span class="line">json_dict = model_to_dict(good) <span class="comment"># 这里也有可能报错，有些字段不能序列化</span></span><br><span class="line">json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(json_list), content_tyoe=<span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure><h4 id="使用serializers"><a href="#使用serializers" class="headerlink" title="使用serializers"></a>使用serializers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line">json_data = serializers.serialize(<span class="string">'json'</span>, goods)</span><br><span class="line">json_data = json.loads(json_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">return</span> JsonResponse(json_data, safe=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="Django-rest-Framework"><a href="#Django-rest-Framework" class="headerlink" title="Django rest Framework"></a>Django rest Framework</h2><ul><li><a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">Django REST framework</a></li></ul><h3 id="一些依赖包"><a href="#一些依赖包" class="headerlink" title="一些依赖包"></a>一些依赖包</h3><p>The following packages are optional:</p><ul><li><a href="https://pypi.python.org/pypi/coreapi/" target="_blank" rel="noopener">coreapi</a> (1.32.0+) - Schema generation support.</li><li><a href="https://pypi.python.org/pypi/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - Markdown support for the browsable API.</li><li><a href="https://pypi.python.org/pypi/django-filter" target="_blank" rel="noopener">django-filter</a> (1.0.1+) - Filtering support.</li><li><a href="https://github.com/maraujop/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - Improved HTML display for filtering.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - Object level permissions support.</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install django-guardian</span><br><span class="line">pip install coreapi</span><br><span class="line">pip install django-filter</span><br><span class="line">pip install --upgrade django-crispy-forms</span><br><span class="line">pip install markdown</span><br></pre></td></tr></table></figure><p><em>注意这些包一定要装，不然后面有些依赖会报错</em></p><h3 id="使用文档（documentation）"><a href="#使用文档（documentation）" class="headerlink" title="使用文档（documentation）"></a>使用文档（documentation）</h3><ul><li>在url.py文件中引入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br></pre></td></tr></table></figure><ul><li>导入该url，注意结尾不要有“/”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    url(<span class="string">r'docs/'</span>, include_docs_urls(title=<span class="string">"doc"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="一些初始化"><a href="#一些初始化" class="headerlink" title="一些初始化"></a>一些初始化</h3><h4 id="setting-py文件"><a href="#setting-py文件" class="headerlink" title="setting.py文件"></a>setting.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'crispy_forms'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="url-py文件"><a href="#url-py文件" class="headerlink" title="url.py文件"></a>url.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="使用-class-based-views（基础的view）"><a href="#使用-class-based-views（基础的view）" class="headerlink" title="使用 class-based views（基础的view）"></a>使用 class-based views（基础的view）</h3><h4 id="使用自己的Serializer（参考）"><a href="#使用自己的Serializer（参考）" class="headerlink" title="使用自己的Serializer（参考）"></a>使用自己的Serializer（参考）</h4><ul><li>在对应的app下新建文件，serializers.py</li><li>基本内容内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="keyword">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ul><li>在view文件中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><p>备用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MEDIA_URL = <span class="string">"/media/"</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在setting.py中如果配置了这个媒体路径，Django rest framework 就会在媒体路径之上加上这个路径，这样就能获得图片路径的完整地址</p></blockquote><h4 id="将数据保存到数据库中"><a href="#将数据保存到数据库中" class="headerlink" title="将数据保存到数据库中"></a>将数据保存到数据库中</h4><ul><li>在serializers.py文件中，需要保存的字段中，覆写create方法</li><li>作为给前端添加数据的一个接口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="keyword">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create and return a new `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br></pre></td></tr></table></figure><ul><li>在view中添加一个post方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><h3 id="使用ModelSerializers"><a href="#使用ModelSerializers" class="headerlink" title="使用ModelSerializers"></a>使用ModelSerializers</h3><ul><li>在serializer中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：名字要和model中的一致，包括一开始使用的验证，名字也要相同</p></blockquote><h4 id="取出所有字段"><a href="#取出所有字段" class="headerlink" title="取出所有字段"></a>取出所有字段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = Snippet</span><br><span class="line">fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><h4 id="serializers的“外键”"><a href="#serializers的“外键”" class="headerlink" title="serializers的“外键”"></a>serializers的“外键”</h4><ul><li>只要在对应的serializers中添加字段覆盖对应的字段就行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, Category</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    Category = CategorySerializer()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-mixins-和-GenericAPIView"><a href="#使用-mixins-和-GenericAPIView" class="headerlink" title="使用 mixins 和 GenericAPIView"></a>使用 mixins 和 GenericAPIView</h3><p>GenericAPIView这是用的非常多的一个view，也是非常重要的view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>同样的，在listapiview中也有上面的方法，可以直接继承这个view，减少代码量</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_api03.png" alt="ListAPIView"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><p>一共有以下的view可以继承</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue04.png" alt="generics"></p><h3 id="配置分页"><a href="#配置分页" class="headerlink" title="配置分页"></a>配置分页</h3><h4 id="在setting中配置"><a href="#在setting中配置" class="headerlink" title="在setting中配置"></a>在setting中配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在view中配置"><a href="#在view中配置" class="headerlink" title="在view中配置"></a>在view中配置</h4><p>这个配置可以自定义自己的分页配置，这样的话就可以不用在setting中配置了，直接在view中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure><h3 id="使用viewsets"><a href="#使用viewsets" class="headerlink" title="使用viewsets"></a>使用viewsets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br></pre></td></tr></table></figure><p>里面的view比较少</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue05.png" alt="viewsets"></p><h4 id="GenericViewSet"><a href="#GenericViewSet" class="headerlink" title="GenericViewSet"></a>GenericViewSet</h4><ul><li>在view中继承ListModelMixin和GenericViewSet</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure><h5 id="viewset的url配置方法"><a href="#viewset的url配置方法" class="headerlink" title="viewset的url配置方法"></a>viewset的url配置方法</h5><ul><li>在url.py文件中配置url</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet</span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">    <span class="string">'post'</span>: <span class="string">'create'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   url(<span class="string">r'^snippets/$'</span>, snippet_list, name=<span class="string">'snippet-list'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="使用Routers-配置URL"><a href="#使用Routers-配置URL" class="headerlink" title="使用Routers 配置URL"></a>使用Routers 配置URL</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a router and register our viewsets with it.</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'snippets'</span>, views.SnippetViewSet)</span><br><span class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^'</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="一些view的继承"><a href="#一些view的继承" class="headerlink" title="一些view的继承"></a>一些view的继承</h3><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue06.png" alt="view"></p><h3 id="过滤功能"><a href="#过滤功能" class="headerlink" title="过滤功能"></a>过滤功能</h3><ul><li>在view中添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页, 分页， 搜索， 过滤， 排序</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># queryset = Goods.objects.all()</span></span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Goods.object.filter(shop_price__gt=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><h4 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a><a href="http://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend" target="_blank" rel="noopener">DjangoFilterBackend</a></h4><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><ul><li><a href="https://django-filter.readthedocs.io/en/master/" target="_blank" rel="noopener">django-filter</a></li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>首先安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><ul><li>将django-filter加到<code>INSTALLED_APPS</code>中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>设置个默认值（可以不设置）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    filter_backends = (DjangoFilterBackend,)</span><br></pre></td></tr></table></figure><blockquote><p>如果使用过滤器，就不需要使用get_queryset方法</p></blockquote><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    filter_fields = (<span class="string">'name'</span>, <span class="string">'shop_price'</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义Filters"><a href="#自定义Filters" class="headerlink" title="自定义Filters"></a>自定义Filters</h3><ul><li>新建filters.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> rest_framework <span class="keyword">as</span> filters</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFilter</span><span class="params">(filters.FilterSet)</span>:</span></span><br><span class="line">    min_price = filters.NumberFilter(name=<span class="string">"price"</span>, lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    max_price = filters.NumberFilter(name=<span class="string">"price"</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Product</span><br><span class="line">        fields = [<span class="string">'category'</span>, <span class="string">'in_stock'</span>, <span class="string">'min_price'</span>, <span class="string">'max_price'</span>]</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django_filters</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsFilter</span><span class="params">(django_filters.rest_framework.FilterSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品的过滤类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pricemin = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, help_text=<span class="string">"最低价格"</span>,lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    pricemax = django_filters.NumberFilter(name=<span class="string">'shop_price'</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line">    top_category = django_filters.NumberFilter(method=<span class="string">'top_category_filter'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_category_filter</span><span class="params">(self, queryset, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> queryset.filter(Q(category_id=value)|Q(category__parent_category_id=value)|Q(category__parent_category__parent_category_id=value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [<span class="string">'pricemin'</span>, <span class="string">'pricemax'</span>, <span class="string">'is_hot'</span>, <span class="string">'is_new'</span>]</span><br></pre></td></tr></table></figure><p>将view更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    <span class="comment"># filter_fields = ('name', 'shop_price')</span></span><br><span class="line">    filter_class = GoodsFilter</span><br></pre></td></tr></table></figure><ul><li>模糊查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = django_filters.CharFilter(name=<span class="string">'name'</span>, lookup_expr=<span class="string">'icontains'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>不加lookup_expr=’icontains’这个字段就是全匹配</p></blockquote><h3 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    filter_backends = (filters.SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</span><br></pre></td></tr></table></figure><p>例子：(view.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'^name'</span>, <span class="string">'goods_brief'</span>, <span class="string">'goods_desc'</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 在不同字段上使用下面的一些符号可以达到不同的效果</p><ul><li>‘^’ Starts-with search.</li><li>‘=’ Exact matches.</li><li>‘@’ Full-text search. (Currently only supported Django’s MySQL backend.)</li><li>‘$’ Regex search.</li></ul></blockquote><h3 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a><a href="http://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    filter_backends = (filters.OrderingFilter,)</span><br><span class="line">    ordering_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"><span class="keyword">from</span> goods.serializers <span class="keyword">import</span> GoodsSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">12</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    page_query_param = <span class="string">"page"</span></span><br><span class="line">    max_page_size = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品列表页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'^name'</span>, <span class="string">'goods_brief'</span>, <span class="string">'goods_desc'</span>)</span><br><span class="line">    ordering_fields = (<span class="string">'sale'</span>, <span class="string">'time'</span>)</span><br></pre></td></tr></table></figure><h2 id="API-Guide"><a href="#API-Guide" class="headerlink" title="API Guide"></a><a href="http://www.django-rest-framework.org/#api-guide" target="_blank" rel="noopener">API Guide</a></h2><p>The API guide is your complete reference manual to all the functionality provided by REST framework.</p><ul><li><a href="http://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="noopener">Requests</a></li><li><a href="http://www.django-rest-framework.org/api-guide/responses/" target="_blank" rel="noopener">Responses</a></li><li><a href="http://www.django-rest-framework.org/api-guide/views/" target="_blank" rel="noopener">Views</a></li><li><a href="http://www.django-rest-framework.org/api-guide/generic-views/" target="_blank" rel="noopener">Generic views</a></li><li><a href="http://www.django-rest-framework.org/api-guide/viewsets/" target="_blank" rel="noopener">Viewsets</a></li><li><a href="http://www.django-rest-framework.org/api-guide/routers/" target="_blank" rel="noopener">Routers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/parsers/" target="_blank" rel="noopener">Parsers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/renderers/" target="_blank" rel="noopener">Renderers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="noopener">Serializers</a></li><li><a href="http://www.django-rest-framework.org/api-guide/fields/" target="_blank" rel="noopener">Serializer fields</a></li><li><a href="http://www.django-rest-framework.org/api-guide/relations/" target="_blank" rel="noopener">Serializer relations</a></li><li><a href="http://www.django-rest-framework.org/api-guide/validators/" target="_blank" rel="noopener">Validators</a></li><li><a href="http://www.django-rest-framework.org/api-guide/authentication/" target="_blank" rel="noopener">Authentication</a></li><li><a href="http://www.django-rest-framework.org/api-guide/permissions/" target="_blank" rel="noopener">Permissions</a></li><li><a href="http://www.django-rest-framework.org/api-guide/throttling/" target="_blank" rel="noopener">Throttling</a></li><li><a href="http://www.django-rest-framework.org/api-guide/filtering/" target="_blank" rel="noopener">Filtering</a></li><li><a href="http://www.django-rest-framework.org/api-guide/pagination/" target="_blank" rel="noopener">Pagination</a></li><li><a href="http://www.django-rest-framework.org/api-guide/versioning/" target="_blank" rel="noopener">Versioning</a></li><li><a href="http://www.django-rest-framework.org/api-guide/content-negotiation/" target="_blank" rel="noopener">Content negotiation</a></li><li><a href="http://www.django-rest-framework.org/api-guide/metadata/" target="_blank" rel="noopener">Metadata</a></li><li><a href="http://www.django-rest-framework.org/api-guide/schemas/" target="_blank" rel="noopener">Schemas</a></li><li><a href="http://www.django-rest-framework.org/api-guide/format-suffixes/" target="_blank" rel="noopener">Format suffixes</a></li><li><a href="http://www.django-rest-framework.org/api-guide/reverse/" target="_blank" rel="noopener">Returning URLs</a></li><li><a href="http://www.django-rest-framework.org/api-guide/exceptions/" target="_blank" rel="noopener">Exceptions</a></li><li><a href="http://www.django-rest-framework.org/api-guide/status-codes/" target="_blank" rel="noopener">Status codes</a></li><li><a href="http://www.django-rest-framework.org/api-guide/testing/" target="_blank" rel="noopener">Testing</a></li><li><a href="http://www.django-rest-framework.org/api-guide/settings/" target="_blank" rel="noopener">Settings</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用类继承View的方式写接口&quot;&gt;&lt;a href=&quot;#使用类继承View的方式写接口&quot; class=&quot;headerlink&quot; title=&quot;使用类继承View的方式写接口&quot;&gt;&lt;/a&gt;使用类继承View的方式写接口&lt;/h2&gt;&lt;h3 id=&quot;导入基础view&quot;&gt;&lt;a href=&quot;#导入基础view&quot; class=&quot;headerlink&quot; title=&quot;导入基础view&quot;&gt;&lt;/a&gt;导入基础view&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.views.generic.base &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; View&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在类中继承&quot;&gt;&lt;a href=&quot;#在类中继承&quot; class=&quot;headerlink&quot; title=&quot;在类中继承&quot;&gt;&lt;/a&gt;在类中继承&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GoodsListView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
      <category term="Django Rest Framework" scheme="http://jaelyn.coding.me/tags/Django-Rest-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 03</title>
    <link href="http://jaelyn.coding.me/2018/02/17/django-rest-vue03/"/>
    <id>http://jaelyn.coding.me/2018/02/17/django-rest-vue03/</id>
    <published>2018-02-17T08:08:58.000Z</published>
    <updated>2018-02-23T09:41:42.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前后端分离的优缺点"><a href="#前后端分离的优缺点" class="headerlink" title="前后端分离的优缺点"></a>前后端分离的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>pc，app，pad多端适应</li><li>SPA开发模式开始流行</li><li>前后端开发职责不清</li><li>开发效率问题，前后端互相等待</li><li>前端一直配合着后端，能力受限</li><li>后端开发语言和模版高度耦合，导致开发语言依赖严重</li></ul><a id="more"></a><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>前后端学习门槛增加</li><li>数据依赖导致文档重要性增加</li><li>前端工作量加大</li><li>SEO的难度加大</li><li>后端开发模式迁移增加成本</li></ul><h3 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h3><blockquote><p>restful api目前是前后端分离最佳实践</p></blockquote><ol><li>轻量，直接通过http，不需要额外的协议，post/get/put/delete操作</li><li>面向资源，具有解释性</li><li>数据描述简单，一般通过json或者xml做数据通信</li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></li></ul><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><h4 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h4><ul><li><a href="http://www.cnblogs.com/ihardcoder/p/5378290.html" target="_blank" rel="noopener">浅析前端工程化</a></li><li><a href="https://zhuanlan.zhihu.com/p/30192759" target="_blank" rel="noopener">前端工程化小记</a></li><li><a href="http://www.cnblogs.com/yexiaochai/p/4901341.html" target="_blank" rel="noopener">前端优化带来的思考，浅谈前端工程化</a></li></ul><h4 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h4><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">mvvm</a></li><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue.js</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">MVC，MVP 和 MVVM 的图示</a></li></ul><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><ul><li><a href="http://blog.csdn.net/chenchun91/article/details/53375041" target="_blank" rel="noopener">前端组件化开发</a></li><li><a href="https://www.zhihu.com/question/29735633" target="_blank" rel="noopener">什么叫组件化开发？</a></li></ul><h3 id="vue开发的几个概念"><a href="#vue开发的几个概念" class="headerlink" title="vue开发的几个概念"></a>vue开发的几个概念</h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p></blockquote><ul><li><a href="https://doc.webpack-china.org/concepts/" target="_blank" rel="noopener">中文官网</a></li></ul><h4 id="vue，vuex，vue-router，axios"><a href="#vue，vuex，vue-router，axios" class="headerlink" title="vue，vuex，vue-router，axios"></a>vue，vuex，vue-router，axios</h4><blockquote><p>vue全家桶</p></blockquote><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue.js</a></li></ul><h4 id="ES6，babel"><a href="#ES6，babel" class="headerlink" title="ES6，babel"></a>ES6，babel</h4><blockquote><p>ES6语法，babel可以将ES6转换成ES5</p></blockquote><ul><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前后端分离的优缺点&quot;&gt;&lt;a href=&quot;#前后端分离的优缺点&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的优缺点&quot;&gt;&lt;/a&gt;前后端分离的优缺点&lt;/h3&gt;&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;pc，app，pad多端适应&lt;/li&gt;
&lt;li&gt;SPA开发模式开始流行&lt;/li&gt;
&lt;li&gt;前后端开发职责不清&lt;/li&gt;
&lt;li&gt;开发效率问题，前后端互相等待&lt;/li&gt;
&lt;li&gt;前端一直配合着后端，能力受限&lt;/li&gt;
&lt;li&gt;后端开发语言和模版高度耦合，导致开发语言依赖严重&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 02</title>
    <link href="http://jaelyn.coding.me/2018/02/16/django-rest-vue02/"/>
    <id>http://jaelyn.coding.me/2018/02/16/django-rest-vue02/</id>
    <published>2018-02-16T14:58:48.000Z</published>
    <updated>2018-02-23T09:41:50.300Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Unofficial Windows Binaries for Python Extension Packages</a></li></ul><h3 id="Django-REST-framework"><a href="#Django-REST-framework" class="headerlink" title="Django REST framework"></a>Django REST framework</h3><ul><li><a href="http://django-rest-framework.org" target="_blank" rel="noopener">官网</a></li></ul><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>进入到虚拟环境</p><p><code>pip install djangorestframework</code></p><p>安装Django，默认安装最新版本</p><p><code>pip install -i https://pypi.douban.com/simple django</code> </p><p>安装markdown，Markdown support for the browsable API.</p><p><code>pip install markdown</code></p><p>还需要安装</p><p><code>pip install django-filter</code></p><h3 id="使用mysql"><a href="#使用mysql" class="headerlink" title="使用mysql"></a>使用mysql</h3><h4 id="setting-py-文件中修改："><a href="#setting-py-文件中修改：" class="headerlink" title="setting.py 文件中修改："></a><strong>setting.py</strong> 文件中修改：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'teacherAndStudentSystem'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8mb4'</span>, </span><br><span class="line">            <span class="string">'init_command'</span>: <span class="string">'SET default_storage_engine=INNODB;'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MySQLWorkbench 中新建数据库</p><h4 id="安装python的mysql驱动"><a href="#安装python的mysql驱动" class="headerlink" title="安装python的mysql驱动"></a>安装python的mysql驱动</h4><p><code>pip install mysqlclient</code></p><blockquote><p>运行发现报错 “django.db.utils.OperationalError: (1193, “Unknown system variable ‘storage_engine’”)”</p><p>参考： </p><ul><li><a href="http://www.cnblogs.com/chenyang13677/p/7780799.html" target="_blank" rel="noopener">博客园</a></li><li><a href="https://stackoverflow.com/questions/37175295/cant-migrate-django-databases-on-mysql-after-upgrading-to-ubuntu-16-04" target="_blank" rel="noopener">stackoverflow</a></li></ul><p>因为版本的关系，所以只需要改为 <code>SET default_storage_engine=INNODB;</code> 即可</p><p>这个表示选择另一种连接方式，后面使用第三方登录的时候要用上</p></blockquote><h3 id="安装-pillow"><a href="#安装-pillow" class="headerlink" title="安装 pillow"></a>安装 pillow</h3><p><code>pip install pillow</code></p><blockquote><p>这个是图形第三方插件</p></blockquote><h3 id="创建apps的package"><a href="#创建apps的package" class="headerlink" title="创建apps的package"></a>创建apps的package</h3><p><strong>注意需要创建的是Python Package，而不是Directory</strong></p><h4 id="修改setting"><a href="#修改setting" class="headerlink" title="修改setting"></a>修改setting</h4><p>将apps加入到python的根搜索路径下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</span><br></pre></td></tr></table></figure><p>目前项目目录：</p><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue01.png" alt="项目目录01"></p><h3 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h3><h4 id="安装需要的包"><a href="#安装需要的包" class="headerlink" title="安装需要的包"></a>安装需要的包</h4><p>在vue项目的根目录下执行</p><p><code>cnpm install</code> 或 <code>npm install</code></p><p>会生成一个model_modules的文件夹</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><code>cnpm run dev</code> 或使用 <code>npm run dev</code></p><h3 id="设计app和models"><a href="#设计app和models" class="headerlink" title="设计app和models"></a>设计app和models</h3><h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><p>Django-UEditor</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://www.cnblogs.com/fengzheng/p/3822266.html" target="_blank" rel="noopener">Django集成百度富文本编辑器uEditor</a></li></ul><h5 id="对应代码应用"><a href="#对应代码应用" class="headerlink" title="对应代码应用"></a>对应代码应用</h5><ul><li>把这第三方包复制到项目中</li><li>在<strong>setting</strong>中设置，加入改包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'users.apps.UsersConfig'</span>,</span><br><span class="line">    <span class="string">'DjangoUeditor'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在模型类中导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</span><br></pre></td></tr></table></figure><ul><li>模型中使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goods_desc = UEditorField(</span><br><span class="line">    verbose_name=<span class="string">u"内容"</span>, </span><br><span class="line">    imagePath=<span class="string">"goods/images/"</span>, </span><br><span class="line">    width=<span class="number">1000</span>, </span><br><span class="line">    height=<span class="number">300</span>, </span><br><span class="line">    filePath=<span class="string">"goods/files/"</span>, </span><br><span class="line">    default=<span class="string">''</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="模型类例子"><a href="#模型类例子" class="headerlink" title="模型类例子"></a>模型类例子</h4><p>在线购物平台的商品模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategory</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品类别</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    CATEGORY_TYPE = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"一级类目"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"二级类目"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"三级类目"</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别名"</span>, help_text=<span class="string">"类别名"</span>)</span><br><span class="line">    code = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别code"</span>, help_text=<span class="string">"类别code"</span>)</span><br><span class="line">    desc = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"类别描述"</span>, help_text=<span class="string">"类别描述"</span>)</span><br><span class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=<span class="string">"类目级别"</span>, help_text=<span class="string">"类目级别"</span>)</span><br><span class="line">    parent_category = models.ForeignKey(<span class="string">"self"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"父类目级别"</span>, help_text=<span class="string">"父目录"</span>,</span><br><span class="line">                                        related_name=<span class="string">"sub_cat"</span>)</span><br><span class="line">    is_tab = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否导航"</span>, help_text=<span class="string">"是否导航"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"商品类别"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategoryBrand</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    品牌名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'brands'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"品牌名"</span>, help_text=<span class="string">"品牌名"</span>)</span><br><span class="line">    desc = models.TextField(default=<span class="string">""</span>, max_length=<span class="number">200</span>, verbose_name=<span class="string">"品牌描述"</span>, help_text=<span class="string">"品牌描述"</span>)</span><br><span class="line">    image = models.ImageField(max_length=<span class="number">200</span>, upload_to=<span class="string">"brands/"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"品牌"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        db_table = <span class="string">"goods_goodsbrand"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    goods_sn = models.CharField(max_length=<span class="number">50</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"商品唯一货号"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"商品名"</span>)</span><br><span class="line">    click_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"点击数"</span>)</span><br><span class="line">    sold_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品销售量"</span>)</span><br><span class="line">    fav_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"收藏数"</span>)</span><br><span class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"库存数"</span>)</span><br><span class="line">    market_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"市场价格"</span>)</span><br><span class="line">    shop_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"本店价格"</span>)</span><br><span class="line">    goods_brief = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">"商品简短描述"</span>)</span><br><span class="line">    goods_desc = UEditorField(verbose_name=<span class="string">u"内容"</span>, imagePath=<span class="string">"goods/images/"</span>, width=<span class="number">1000</span>, height=<span class="number">300</span>,</span><br><span class="line">                              filePath=<span class="string">"goods/files/"</span>, default=<span class="string">''</span>)</span><br><span class="line">    ship_free = models.BooleanField(default=<span class="keyword">True</span>, verbose_name=<span class="string">"是否承担运费"</span>)</span><br><span class="line">    goods_front_image = models.ImageField(upload_to=<span class="string">"goods/images/"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"封面图"</span>)</span><br><span class="line">    is_new = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否新品"</span>)</span><br><span class="line">    is_hot = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否热销"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'商品'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexAd</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'category'</span>,verbose_name=<span class="string">"商品类目"</span>)</span><br><span class="line">    goods =models.ForeignKey(Goods, related_name=<span class="string">'goods'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'首页商品类别广告'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsImage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    商品轮播图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, related_name=<span class="string">"images"</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">""</span>, verbose_name=<span class="string">"图片"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'商品图片'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    轮播的商品</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'banner'</span>, verbose_name=<span class="string">"轮播图片"</span>)</span><br><span class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"轮播顺序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'轮播商品'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.goods.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotSearchWords</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    热搜词</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    keywords = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">20</span>, verbose_name=<span class="string">"热搜词"</span>)</span><br><span class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"排序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'热搜词'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.keywords</span><br></pre></td></tr></table></figure><h3 id="自定义User类"><a href="#自定义User类" class="headerlink" title="自定义User类"></a>自定义User类</h3><ul><li>在模型类中导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br></pre></td></tr></table></figure><ul><li>继承该<code>AbstractUser</code>类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>引用外键</li></ul><p>在另一个模型类中导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br></pre></td></tr></table></figure><p>在外键中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    购物车</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">u"用户"</span>)</span><br></pre></td></tr></table></figure><h3 id="独立使用Django的model"><a href="#独立使用Django的model" class="headerlink" title="独立使用Django的model"></a>独立使用<strong>Django</strong>的model</h3><h4 id="进行一些初始化"><a href="#进行一些初始化" class="headerlink" title="进行一些初始化"></a>进行一些初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">sys.path.append(pwd+<span class="string">"../"</span>)</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"Project.settings"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsCategory</span><br><span class="line"></span><br><span class="line">all_categorys = GoodsCategory.objects.all()</span><br></pre></td></tr></table></figure><p><em>顺序不能错</em></p><h3 id="让Django识别媒体文件"><a href="#让Django识别媒体文件" class="headerlink" title="让Django识别媒体文件"></a>让Django识别媒体文件</h3><h4 id="在settings-py中设置"><a href="#在settings-py中设置" class="headerlink" title="在settings.py中设置"></a>在settings.py中设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">"/media/"</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</span><br></pre></td></tr></table></figure><h4 id="在urls-py中配置"><a href="#在urls-py中配置" class="headerlink" title="在urls.py中配置"></a>在urls.py中配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Project.settings <span class="keyword">import</span> MEDIA_ROOT</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...more</span></span><br><span class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="目前项目目录"><a href="#目前项目目录" class="headerlink" title="目前项目目录"></a>目前项目目录</h3><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/django_rest_vue02.png" alt="项目目录02"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unofficial Windows Binaries for Python Extension Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Django-REST-framework&quot;&gt;&lt;a href=&quot;#Django-REST-framework&quot; class=&quot;headerlink&quot; title=&quot;Django REST framework&quot;&gt;&lt;/a&gt;Django REST framework&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://django-rest-framework.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest framework 学习笔记 01</title>
    <link href="http://jaelyn.coding.me/2018/02/14/django-rest-vue01/"/>
    <id>http://jaelyn.coding.me/2018/02/14/django-rest-vue01/</id>
    <published>2018-02-14T13:18:51.000Z</published>
    <updated>2018-03-17T14:29:55.739Z</updated>
    
    <content type="html"><![CDATA[<p>需要下载的资源</p><ul><li><a href="https://www.jetbrains.com/pycharm-edu/download/#section=mac" target="_blank" rel="noopener">Pycharm</a></li><li><a href="https://www.jetbrains.com/webstorm/download/#section=mac" target="_blank" rel="noopener">WebStorm</a></li><li><a href="http://nodejs.cn" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener">Mysql Workbench</a></li></ul><a id="more"></a><h3 id="Pycharm-快捷启动（Linux）"><a href="#Pycharm-快捷启动（Linux）" class="headerlink" title="Pycharm 快捷启动（Linux）"></a>Pycharm 快捷启动（Linux）</h3><ol><li><code>vim ~/.bashrc</code></li><li><code>alias pycharm=&quot;bash /hom/bobby/Downloads/pycharm-2016.3.2/bin/pycharm.sh&quot;</code></li><li><code>source ~/.bashrc</code></li><li><code>pycharm</code></li></ol><h3 id="Mysql-管理工具"><a href="#Mysql-管理工具" class="headerlink" title="Mysql 管理工具"></a>Mysql 管理工具</h3><ul><li><a href="https://navicat.com/en" target="_blank" rel="noopener">Navicat</a></li><li><a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener">Mysql Workbench</a></li></ul><h3 id="Mysql-安装（Linux）"><a href="#Mysql-安装（Linux）" class="headerlink" title="Mysql 安装（Linux）"></a>Mysql 安装（Linux）</h3><h4 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h4><p><code>sudo apt-get install mysql-server</code></p><h4 id="查看mysql的状态"><a href="#查看mysql的状态" class="headerlink" title="查看mysql的状态"></a>查看mysql的状态</h4><p><code>ps aux|grep mysqld</code></p><blockquote><p>看是否有启动成功，并且可以查看端口地址</p></blockquote><h4 id="进入mysql-shell中"><a href="#进入mysql-shell中" class="headerlink" title="进入mysql shell中"></a>进入mysql shell中</h4><p><code>mysql -uroot -p</code> </p><blockquote><p>之后输入登录密码</p></blockquote><h4 id="mysql-shell-的一些操作"><a href="#mysql-shell-的一些操作" class="headerlink" title="mysql shell 的一些操作"></a>mysql shell 的一些操作</h4><h5 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h5><p><code>show databases;</code></p><h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><p><code>exit;</code></p><h5 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h5><p><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></p><blockquote><p>修改其中的 <strong>bind-address</strong> 配置，将IP改为<strong>0.0.0.0</strong></p></blockquote><h5 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h5><p><code>sudo service mysql restart</code></p><h5 id="修改用户权限"><a href="#修改用户权限" class="headerlink" title="修改用户权限"></a>修改用户权限</h5><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code></p><p>刷新用户权限</p><p><code>flush privileges;</code></p><h5 id="字符集及排序规则"><a href="#字符集及排序规则" class="headerlink" title="字符集及排序规则"></a>字符集及排序规则</h5><p> 使用 <code>utf8 -- UTF-8 Unicode</code> 以及 <code>utf8_general_ci</code></p><h3 id="安装python（Linux）"><a href="#安装python（Linux）" class="headerlink" title="安装python（Linux）"></a>安装python（Linux）</h3><blockquote><p>安装的时候可以使用 python 豆瓣镜像 <code>-i https://pypi.douban.com/simple</code></p></blockquote><h4 id="获取python3版本"><a href="#获取python3版本" class="headerlink" title="获取python3版本"></a>获取python3版本</h4><p><code>sudo apt-get install python3.5</code></p><h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><code>sudo apt-get install python-virtualenv</code></p><h5 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h5><p><code>virtualenv py2_env</code></p><blockquote><p>会创建目录为py2_env的文件夹在该目录下</p><p>ps: 移除文件夹 <code>rm -r py2_env/</code>或 <code>rm -f py2_env</code>移除文件，慎用<code>rm -rf py2_env</code></p></blockquote><h5 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h5><p><code>source py2_env/bin/activate</code></p><h5 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h5><p><code>deactivate</code></p><h5 id="创建python3的虚拟环境"><a href="#创建python3的虚拟环境" class="headerlink" title="创建python3的虚拟环境"></a>创建python3的虚拟环境</h5><p><code>virtualenv -p python3 py3_env</code></p><h5 id="安装pip3版本"><a href="#安装pip3版本" class="headerlink" title="安装pip3版本"></a>安装pip3版本</h5><p><code>sudo apt-get install python3-pip</code></p><blockquote><p>遇到 “OSError: Command /home/ubuntu/Myvirtualenv/py2_env/bin/python2 - setuptools pkg_resources pip wheel failed with error code 1”这个问题，解决方法：</p><ol><li><code>export LC_ALL=&quot;en_US.UTF-8&quot;</code></li><li><code>export LC_CTYPE=&quot;en_US.UTF-8&quot;</code></li><li><code>pip install setuptools</code></li></ol><p>参考： <a href="https://github.com/certbot/certbot/issues/2883" target="_blank" rel="noopener">setuptools pkg_resources pip wheel failed with error code 1</a></p></blockquote><h5 id="更新pip版本"><a href="#更新pip版本" class="headerlink" title="更新pip版本"></a>更新pip版本</h5><p><code>pip install --upgrade pip</code></p><h4 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p><code>pip install virtualenvwrapper</code></p><h5 id="查找路径"><a href="#查找路径" class="headerlink" title="查找路径"></a>查找路径</h5><p><code>sudo find / -name virtualenvwrapper.sh</code></p><blockquote><p>/home/ubuntu/.local/bin/virtualenvwrapper.sh</p></blockquote><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ol><li>进入<code>vim ~/.bashrc</code></li><li>在最后一行添加</li></ol><blockquote><p>export WORKON_HOME=$HOME/.virtualenvs<br>source /home/ubuntu/.local/bin/virtualenvwrapper.sh</p></blockquote><ol><li>ESC <code>:wq</code>保存</li><li><code>source ~/.bashrc</code> 运行生效</li></ol><h5 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h5><p><code>mkvirtualenv py2_workon_env</code></p><h5 id="目录安装所在地"><a href="#目录安装所在地" class="headerlink" title="目录安装所在地"></a>目录安装所在地</h5><p><code>cd ~/.virtualenvs</code></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li><code>workon</code> 查找全部的虚拟目录</li><li><code>workon py2_workon_env</code> 使用该虚拟目录</li><li><code>deactivate</code> 退出虚拟环境</li></ol><h5 id="创建python3的虚拟环境-1"><a href="#创建python3的虚拟环境-1" class="headerlink" title="创建python3的虚拟环境"></a>创建python3的虚拟环境</h5><p><code>mkvirtualenv --python=python3 py3_workon_env</code></p><blockquote><p>ubuntu@VM-65-204-ubuntu:~$ workon<br>py2_workon_env<br>py3_workon_env</p></blockquote><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>参考：</p><ul><li><a href="https://nodejs.org/dist/v8.9.3/" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.3/</a></li><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs download</a></li><li><a href="https://cnodejs.org/topic/53a92af6c3ee0b58203258fe" target="_blank" rel="noopener">Linux（Ubuntu）下安装NodeJs</a></li><li><a href="https://cnodejs.org/topic/53cb1242c9507b40442875f6" target="_blank" rel="noopener">linux下安装nodejs+express(最新版)</a></li><li><a href="https://jingyan.baidu.com/article/cdddd41ca7b87853cb00e1af.html" target="_blank" rel="noopener">Linux下nodejs的安装配置</a></li></ul><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><ul><li><code>sudo apt-get install g++</code></li><li><code>sudo apt-get install libssl-dev</code></li><li><code>sudo apt-get install build-essential</code></li></ul><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><p><code>wget https://nodejs.org/dist/v8.9.3/node-v8.9.3.tar.gz</code></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p><code>tar zxvf node-v8.9.3.tar.gz</code></p><blockquote><p>移动文件 mv source_file new_file</p></blockquote><h4 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h4><ol><li>进入到<strong>node-v8.9.3</strong>文件里</li><li><code>./configure</code></li><li><code>make</code></li></ol><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p><code>make install</code></p><h4 id="修改环境配置"><a href="#修改环境配置" class="headerlink" title="修改环境配置"></a>修改环境配置</h4><p>参考</p><h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><ul><li><code>sudo apt-get install nodejs-legacy</code></li><li><code>sudo apt-get install npm</code></li></ul><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><p> <a href="https://npm.taobao.org" target="_blank" rel="noopener">淘宝 NPM 镜像</a></p><p>可以使用这个代替npm，国内镜像，下载速度可以更快</p><h3 id="安装htop"><a href="#安装htop" class="headerlink" title="安装htop"></a>安装htop</h3><p><code>sudo apt-get install htop</code></p><blockquote><p>可以查看系统运行的状态</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要下载的资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm-edu/download/#section=mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pycharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/webstorm/download/#section=mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebStorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/products/workbench/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mysql Workbench&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Httpie</title>
    <link href="http://jaelyn.coding.me/2018/02/08/httpie/"/>
    <id>http://jaelyn.coding.me/2018/02/08/httpie/</id>
    <published>2018-02-08T03:19:38.000Z</published>
    <updated>2018-02-08T03:23:44.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><ul><li>HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。</li><li>其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。</li><li>这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。</li><li>HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。<a id="more"></a></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>直观的语法</li><li>格式化和色彩化的终端输出</li><li>内置 JSON 支持</li><li>支持上传表单和文件</li><li>HTTPS、代理和认证</li><li>任意请求数据</li><li>自定义头部</li><li>持久性会话</li><li>类 Wget 下载</li><li>支持 Python 2.6, 2.7 和 3.x</li><li>支持 Linux, Mac OS X 和 Windows</li><li>插件</li><li>文档</li><li>测试覆盖率</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip install httpie</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/pzw_0612/article/details/46521965" target="_blank" rel="noopener">HTTPie 工具使用入门</a></li><li><a href="https://httpie.org/doc" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。&lt;/li&gt;
&lt;li&gt;其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。&lt;/li&gt;
&lt;li&gt;这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。&lt;/li&gt;
&lt;li&gt;HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。
    
    </summary>
    
      <category term="工具集" scheme="http://jaelyn.coding.me/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="httpie" scheme="http://jaelyn.coding.me/tags/httpie/"/>
    
  </entry>
  
  <entry>
    <title>Byobu &quot;多窗口&quot;的Terminal</title>
    <link href="http://jaelyn.coding.me/2018/02/07/byobu/"/>
    <id>http://jaelyn.coding.me/2018/02/07/byobu/</id>
    <published>2018-02-07T01:52:59.000Z</published>
    <updated>2018-05-15T02:28:30.806Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 测试密码工具，密码是： lim "/> <label for="pass"> 测试密码工具，密码是： lim </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Byobu是一个日本术语，用于装饰、多面板屏幕，可作为折叠室的分隔物。作为一个开源软件项目，Byobu是一种优雅的功能，它是一种简单的、实用的、实用的GNU屏幕。Byobu包括了一个增强的概要文件、配置实用程序和GNU屏幕窗口管理器的系统状态通知，以及Tmux终端多路复用器。Byobu是在GPLv3下开发和发布的免费软件。
    
    </summary>
    
      <category term="工具集" scheme="http://jaelyn.coding.me/categories/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
      <category term="byobu" scheme="http://jaelyn.coding.me/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>Django 学习笔记—基础01</title>
    <link href="http://jaelyn.coding.me/2018/01/27/DjangoLearning1/"/>
    <id>http://jaelyn.coding.me/2018/01/27/DjangoLearning1/</id>
    <published>2018-01-27T05:50:16.000Z</published>
    <updated>2018-02-07T03:16:37.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://python.usyiyi.cn/translate/django_182/index.html" target="_blank" rel="noopener">Django 1.8.2中文文档</a></li><li><a href="https://docs.djangoproject.com/en/2.0/" target="_blank" rel="noopener">Django 2.0 官方文档</a></li><li><a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">Django 中文教学 自强学院</a></li></ul><a id="more"></a><h2 id="所需指令"><a href="#所需指令" class="headerlink" title="所需指令"></a>所需指令</h2><h3 id="用指令创建项目"><a href="#用指令创建项目" class="headerlink" title="用指令创建项目"></a>用指令创建项目</h3><p><code>django-admin startproject project</code></p><blockquote><p>一般不用，直接用pycharm创建就行</p></blockquote><h3 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h3><p><code>python manage.py runserver 8080</code></p><p>运行后，才能根据所生成的网址，访问服务器，后面填写服务器的端口</p><blockquote><p>也可以不写端口，如果没写端口，默认使用8000端口</p></blockquote><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p><code>python manage.py startapp djangoAppName(这里填写所需创建应用的名字)</code><br>或<br><code>django-admin startapp djangoAppName</code><br>可以直接在apps目录下创建</p><blockquote><p>有点类似于模块的意思，分模块开发项目，一个模块对应了view, model等内容，需要创建新的模块的时候，需要使用这个指令。</p></blockquote><h3 id="生成迁移（makemigrations）"><a href="#生成迁移（makemigrations）" class="headerlink" title="生成迁移（makemigrations）"></a>生成迁移（<code>makemigrations</code>）</h3><p>创建迁移文件</p><p><code>python manage.py makemigrations</code></p><blockquote><p> 创建之后，在所对应的<code>migrations</code>文件夹下面会多出一个<code>.py</code>文件</p></blockquote><p><strong>如果使用的是Django2.0 并且数据库model中使用了<code>ForeignKey</code>，需要在后面添加 <code>on_delete</code> 关键字</strong></p><blockquote><p>在使用这个命令的时候，需要在<code>settings.py</code>文件中的<code>INSTALLED_APPS</code>注册应用信息</p></blockquote><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><p>根据迁移文件，形成sql语句，创建对应的表</p><p><code>python manage.py migrate</code></p><h3 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h3><p><code>python manage.py createsuperuser</code></p><p>接下来按照提示填写用户名、邮箱、密码</p><blockquote><p>后台URL: 在网址后面添加admin</p></blockquote><h3 id="显示所有的指令"><a href="#显示所有的指令" class="headerlink" title="显示所有的指令"></a>显示所有的指令</h3><p><code>python manage.py</code></p><p>会显示所有的指令，并且在后面输入<code>help name</code>就可以查看对应指令的具体信息</p><h2 id="Model创建"><a href="#Model创建" class="headerlink" title="Model创建"></a>Model创建</h2><ul><li>在对应的模版项目下的<code>models.py</code>文件下创建数据库模型文件</li><li>创建模型的时候不用创建主键id，系统会自动生成这个主键的列</li></ul><h3 id="Models-py"><a href="#Models-py" class="headerlink" title="Models.py"></a>Models.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName1</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    date = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'title name is &#123;&#125;, crate at &#123;&#125;'</span>.format(self.title, self.date)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    hname = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    hgender = models.BooleanField()</span><br><span class="line">    content = models.CharField(max_length=<span class="number">1000</span>)</span><br><span class="line">    modelName1ForeignKey = models.ForeignKey(ModelName1, on_delete=models.CASCADE) <span class="comment">#外键</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.hgender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    gender.short_description = <span class="string">'性别'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br><span class="line"></span><br><span class="line">    name.short_description = <span class="string">'名字'</span></span><br></pre></td></tr></table></figure><h3 id="Django2-0-ForeignKey-变化"><a href="#Django2-0-ForeignKey-变化" class="headerlink" title="Django2.0 ForeignKey 变化"></a>Django2.0 ForeignKey 变化</h3><p>在创建外键的时候遇到报错：</p><p><code>TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</code></p><p>查询一番后发现Django2.0版本创建外键时需要在后面加上<strong>on_delete</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    manufacturer = models.ForeignKey(</span><br><span class="line">        <span class="string">'Manufacturer'</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="站点管理"><a href="#站点管理" class="headerlink" title="站点管理"></a>站点管理</h2><h3 id="界面本地化"><a href="#界面本地化" class="headerlink" title="界面本地化"></a>界面本地化</h3><p>修改<code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><blockquote><p>修改语言和时区</p></blockquote><h3 id="向admin中注册应用"><a href="#向admin中注册应用" class="headerlink" title="向admin中注册应用"></a>向admin中注册应用</h3><p>在 <strong>booktest/admin.py</strong> 文件，注册模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> ModelName</span><br><span class="line">admin.site.register(ModelName)</span><br></pre></td></tr></table></figure><ol><li>导入<strong>model</strong> 类</li><li>在admin中注册该模型类 <code>admin.site.register(ModelName)</code></li></ol><h3 id="自定义管理页面"><a href="#自定义管理页面" class="headerlink" title="自定义管理页面"></a>自定义管理页面</h3><ul><li>Django提供了admin.ModelAdmin类</li><li>通过定义ModelAdmin的子类，来定义模型在Admin界面的显示方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelNameAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br><span class="line">    list_filter = [<span class="string">'title'</span>]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'base'</span>,&#123;<span class="string">'fields'</span>:[<span class="string">'title'</span>]&#125;),</span><br><span class="line">        (<span class="string">'super'</span>,&#123;<span class="string">'fields'</span>:[<span class="string">'date'</span>]&#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br></pre></td></tr></table></figure><h4 id="列表页属性"><a href="#列表页属性" class="headerlink" title="列表页属性"></a>列表页属性</h4><h5 id="list-display"><a href="#list-display" class="headerlink" title="list_display"></a>list_display</h5><ul><li>显示字段，可以点击列头进行排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_display = [<span class="string">'pk'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>列表里面填写的是字段的列表名字，表示要在后台页面中显示什么列表字段，先后顺序决定显示顺序</p></blockquote><h5 id="list-filter"><a href="#list-filter" class="headerlink" title="list_filter"></a>list_filter</h5><ul><li>过滤字段，过滤框会出现在右侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = [<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><h5 id="search-fields"><a href="#search-fields" class="headerlink" title="search_fields"></a>search_fields</h5><ul><li>搜索字段，搜索框会出现在上侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = [<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>支持模糊查询，根据列表中的字段进行查询</p></blockquote><h5 id="list-per-page"><a href="#list-per-page" class="headerlink" title="list_per_page"></a>list_per_page</h5><ul><li>分页，分页框会出现在下侧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_per_page = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="添加、修改页属性"><a href="#添加、修改页属性" class="headerlink" title="添加、修改页属性"></a>添加、修改页属性</h4><h5 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h5><ul><li>属性的先后顺序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fields = [<span class="string">'date'</span>, <span class="string">'title'</span>]</span><br></pre></td></tr></table></figure><h5 id="fieldsets"><a href="#fieldsets" class="headerlink" title="fieldsets"></a>fieldsets</h5><ul><li>属性分组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fieldsets = [</span><br><span class="line">    (<span class="string">'basic'</span>,&#123;<span class="string">'fields'</span>: [<span class="string">'title'</span>]&#125;),</span><br><span class="line">    (<span class="string">'more'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'date'</span>]&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><ul><li>对于模型类，有两种注册方式<ul><li>方式一：与传统模型类相同</li><li>方式二：关联注册</li></ul></li><li>按照BookInfor的注册方式完成HeroInfo的注册</li><li>接下来实现关联注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># StackedInline TabularInline</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Line</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    model = HeroInfo</span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName1Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'date'</span>]</span><br><span class="line">    list_filter = [<span class="string">'title'</span>]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'base'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'title'</span>]&#125;),</span><br><span class="line">        (<span class="string">'super'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'date'</span>]&#125;)</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ModelName2Line]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'content'</span>, <span class="string">'modelName1ForeignKey'</span>]</span><br><span class="line">    list_filter = [<span class="string">'hgender'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(ModelName1, ModelName1Admin)</span><br><span class="line">admin.site.register(ModelName2, ModelName2Admin)</span><br></pre></td></tr></table></figure><ul><li>可以将内嵌的方式改为表格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Line</span><span class="params">(admin.TabularInline)</span></span></span><br></pre></td></tr></table></figure><h3 id="布尔值的显示"><a href="#布尔值的显示" class="headerlink" title="布尔值的显示"></a>布尔值的显示</h3><ul><li>发布性别的显示不是一个直观的结果，可以使用方法进行封装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.hgender:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line">gender.short_description = <span class="string">'性别'</span></span><br></pre></td></tr></table></figure><ul><li>在admin注册中使用gender代替hgender</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName2Admin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'content'</span>]</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>在django中，视图对WEB请求进行回应</li><li>视图接收reqeust对象作为第一个参数，包含了请求的信息</li><li>视图就是一个Python函数，被定义在views.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request,id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"detail %s"</span> % id)</span><br></pre></td></tr></table></figure><ul><li>定义完成视图后，需要配置<code>urls.py</code>，否则无法处理请求</li></ul><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> DjangoLearn1 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>,views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>此时，就可以访问了，不过考虑到如果这样填写，模块一多，URL的量一大的话，就会出现多个路由，不方便配置，所以推荐如下</p></blockquote><ul><li>在对应模块里面创建一个 urls.py 的文件，将路由信息写到里面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>之后，在向主urls.py文件中include进去</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'DjangoLearn1.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul><li><p>模板是html页面，可以根据视图中传递的数据填充值</p></li><li><p>在模板中访问视图传递的数据</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 输出值，可以是变量，也可以是对象.属性 &#125;&#125;</span><br><span class="line">&#123;% 执行代码段 %&#125;</span><br></pre></td></tr></table></figure><h3 id="定义HTML模板"><a href="#定义HTML模板" class="headerlink" title="定义HTML模板"></a>定义HTML模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;%for ModeleName1 in ModeleName1List%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;ModeleName1.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;ModeleName1.title&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;%endfor%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在模板中访问对象成员时，都以属性的方式访问，即方法也不能加括号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>详细<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;ModeleName1.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;%for Modele in ModeleName1.ModelName2_set.all%&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;Modele.name&#125;&#125;---&#123;&#123;Modele.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;%endfor%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><ul><li>编辑views.py文件，在方法中调用模板</li><li>Django提供了函数Render()简化视图调用模板、构造上下文</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> ModeleName1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(reqeust)</span>:</span></span><br><span class="line">    ModeleName1List = ModeleName1.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(reqeust, <span class="string">'booktest/index.html'</span>, &#123;<span class="string">'ModeleName1List'</span>: ModeleName1List&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(reqeust, id)</span>:</span></span><br><span class="line">    ModeleName1 = ModeleName1.objects.get(pk=id)</span><br><span class="line">    <span class="keyword">return</span> render(reqeust, <span class="string">'booktest/detail.html'</span>, &#123;<span class="string">'ModeleName1'</span>: ModeleName1&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>视图 Views： 接受请求，逻辑处理，调用数据，输出响应</li><li>配置ulr在自己的应用中匹配url</li><li>模型Model：负责与数据库交互</li><li>面向对象：模型对象，列表</li><li>定义模型类：指出属性及类型，以确定表的结构，迁移</li><li>后台管理：创建管理员，启动服务器，admin，注册admin.py</li><li>模版：定义显示的样子<ol><li>加载：读取文件内容到内存</li><li>渲染：填内容</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 1.8.2中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 2.0 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.ziqiangxuetang.com/django/django-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 中文教学 自强学院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Django" scheme="http://jaelyn.coding.me/categories/Django/"/>
    
    
      <category term="Django" scheme="http://jaelyn.coding.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + nexT 学习笔记</title>
    <link href="http://jaelyn.coding.me/2017/12/30/HexoLearn-re/"/>
    <id>http://jaelyn.coding.me/2017/12/30/HexoLearn-re/</id>
    <published>2017-12-30T10:02:53.000Z</published>
    <updated>2018-02-17T11:10:16.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/hexo-head.jpeg" alt="hexo-head"></p><blockquote><ul><li>本文内容主要是个人在学习hexo和next中所遇到的一些“坑”和解决方法,而详细的流程网上有很多，在文章的结尾我会贴出我在学习中查找到的比较好的文章。</li><li>注意本文不是详细操作步骤，如果需要详细步骤，请直接翻到文章结尾。</li></ul></blockquote><a id="more"></a><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">nexT</a></li></ul><h2 id="Hexo-和-nexT-的安装"><a href="#Hexo-和-nexT-的安装" class="headerlink" title="Hexo 和 nexT 的安装"></a>Hexo 和 nexT 的安装</h2><blockquote><p>在安装 Hexo 之前，需要确保电脑环境要有 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> 环境, 当然，为了更好的安装 Hexo 还需要 <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>.</p></blockquote><p>下面是我所使用的版本：<br><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/gitnpmnodeversion.png" alt="gitnpmnodeversion"></p><p>安装之后，最常使用的指令如下：</p><ol><li>生成静态页面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol><li>在本地运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol><li>部署到GitHub pages（coding）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ol><li>清除生成的静态文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="打开-GitHub-Pages"><a href="#打开-GitHub-Pages" class="headerlink" title="打开 GitHub Pages"></a>打开 GitHub Pages</h2><p>在第一次创建完仓库之后，打开settings选项，向下翻到GitHub Pages选项会发现不能打开，会有一个提示信息：</p><blockquote><p>GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site</p></blockquote><p>是因为该GitHub Pages没有内容，此时只要点击下面的Choose a theme按钮选择一个主题就可以打开和访问了。</p><h2 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h2><ul><li>先查看本机用户home目录下是否存在.ssh目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>如果有就不用再创建了，如果想重新创建，可以创建一个不同名字的，也可以将原来的删除，再创建。</li><li>使用下面指令删除已存在的SSH：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br><span class="line">rm -r ~/.ssh</span><br></pre></td></tr></table></figure><ul><li>再创建新的SSH密钥(keys)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这将按照你提供的邮箱地址，创建一对密钥</p></blockquote><ul><li>将生成的<code>id_rsa.pub</code>文件里面的内容拷贝到GitHub 项目中添加公钥，这里推荐在对应 xxx.github.io 项目中加。（settings-&gt;deploy keys）</li></ul><ul><li>最后再用下面指令测试是否连接成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><blockquote><p>可参考<a href="https://www.zhihu.com/question/21402411" target="_blank" rel="noopener">github提示Permission denied (publickey)，如何才能解决？</a></p></blockquote><h2 id="同步到GitHub"><a href="#同步到GitHub" class="headerlink" title="同步到GitHub"></a>同步到GitHub</h2><ul><li>配置<code>站点文件</code>下的<code>_config.xml</code>文件下的<code>deploy</code>信息。</li></ul><ul><li>安装<code>hexo-deployer-git</code>插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>关于 https 的问题，如果需要使用自己的域名的话，GitHub pages 是不能打开 Enforce HTTPS 的。所以在配置<code>deploy</code>信息的时候就推荐使用 Clone with SSH 的链接。</p></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li>在source文件夹下面创建<code>CNAME</code>文件（没有后缀），里面填上自己的域名。</li><li>之后在自己的域名商将自己的域名用<code>CNAME</code>方式指向自己GitHub pages的域名。</li></ul><p><img src="https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/cname-dns.png" alt="cname-dns"></p><blockquote><p>个人使用的是<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a></p></blockquote><p>最后需要注意，需要在<code>站点文件</code>的<code>_config.xml</code>文件配置中的<code>skip_render</code>添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - CNAME</span><br></pre></td></tr></table></figure><p>表示跳过该文件的渲染。</p><h2 id="nexT-主题配置"><a href="#nexT-主题配置" class="headerlink" title="nexT 主题配置"></a>nexT 主题配置</h2><p>一些我觉得比较实用的效果，参考<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a>.</p><h3 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h3><p>在<code>站点文件</code>的<code>source</code>目录下添加一个<code>README.md</code>文件，之后修改<code>站点文件</code>下的<code>_config.xml</code>，将<code>skip_render</code>添加<code>README.md</code>，跳过该文件的渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - CNAME</span><br><span class="line"> - README.md</span><br></pre></td></tr></table></figure><h3 id="Schemes"><a href="#Schemes" class="headerlink" title="Schemes"></a>Schemes</h3><p>个人比较喜欢<code>Gemini</code>样式，相比<code>Pisces</code>样式，该样式不会每篇文章相连过于紧密，会以分块的形式显示出来，比较好看，特别在手机端上效果更显著。具体可以亲自去设置去看看效果。</p><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><p>就是网站右下角的萌物”小人，具体可以参考<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a>。下面简要介绍我的做法：</p><ol><li>在<code>站点文件</code>打开终端输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol><li>在<code>站点文件</code>下的<code>_config.xml</code>最后配置：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  model: z16</span><br></pre></td></tr></table></figure><blockquote><p>具体的配置可以看文档，可以修改挺多内容的。模型外观参考<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">截图预览</a>.</p></blockquote><h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>Canvas-nest</code>可以发现有4个动态背景，可以逐个尝试，也可以同时设置为<code>true</code>，个人只选择了<code>Canvas-nest</code>。</p><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><p>可以将网站最下的不想要显示的内容设置为<code>false</code>，在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>footer</code>，我的设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2017</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon: user</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure><h3 id="busuanzi访问人数"><a href="#busuanzi访问人数" class="headerlink" title="busuanzi访问人数"></a>busuanzi访问人数</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>busuanzi_count</code>，修改配置，可以在网站底部和文章中显示访问的人数，我的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class="line">  site_uv_footer: |</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 访问总量</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 阅读次数</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure><h3 id="显示统计字数"><a href="#显示统计字数" class="headerlink" title="显示统计字数"></a>显示统计字数</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>post_wordcount</code>，修改配置，可以在网站底部和文章中显示所统计的字数，我的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><h3 id="增加本地搜索功能"><a href="#增加本地搜索功能" class="headerlink" title="增加本地搜索功能"></a>增加本地搜索功能</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>local_search</code>，设置为<code>true</code>。</p><p>参考：</p><ul><li><a href="http://www.sqlsec.com/2017/12/hexosearch.html" target="_blank" rel="noopener">Hexo博客无法搜索的终极解决方法</a></li></ul><h3 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h3><p>在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>post_copyright</code>，设置为<code>true</code>。</p><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>参考： <a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a></p><ul><li>安装： <code>npm install hexo-blog-encrypt</code>  </li><li>首先在 _config.yml 中启用该插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><ul><li>在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line">    - fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>一般使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx</span><br></pre></td></tr></table></figure><blockquote><p>xxx表示文件的名字，同时也会自动设置为文章标题（后面可改）<br>以之间创建<code>.md</code>文件，添加文章头信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title:  // 文章标题</span><br><span class="line">date: // 创建时间</span><br><span class="line">updated: //跟新文章的时间</span><br><span class="line">tags: // 文章的标签，如果有多个，[tags1, tags2, ...]</span><br><span class="line">categories: // 文章分类</span><br><span class="line">keywords: // 文章关键词，如果有多个，[key1, key2, ...]</span><br><span class="line">description: //文章描述</span><br></pre></td></tr></table></figure><p>其中需要注意：</p><ul><li>如果想要有<code>updated</code>，需要在<code>主题文件</code>下的<code>_config.xml</code>文件中配置<code>post_meta</code>，将<code>updated_at</code>设置为<code>true</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure><ul><li><code>keywords</code>和<code>description</code>的作用是为了搜索引擎寻找关键字。</li><li>其中<code>description</code>关键字，在主页上显示的时候就会显示这里面的内容，而不是显示前150个字符。还有另一种方法推荐，就是不写<code>description</code>，而是在文章中插入<code>&lt;!-- more --&gt;</code>注释，这样主页就会显示该注释前的内容。</li></ul><h2 id="可添加内容"><a href="#可添加内容" class="headerlink" title="可添加内容"></a>可添加内容</h2><p>下面的内容是推广和维护网站相关。</p><h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><p>个人使用的是<a href="http://mta.qq.com" target="_blank" rel="noopener">腾讯移动分析</a>，而且nexT也可以直接支持，在<code>主题文件</code>的<code>_config.xml</code>中搜索<code>Tencent MTA ID</code>，将自己在网站上注册的 ID 填写上去就可以统计了。</p><h3 id="seo推广"><a href="#seo推广" class="headerlink" title="seo推广"></a>seo推广</h3><p>这里推荐参考<a href="http://harleywang93.com/2017/03/07/Hexo-GitHub-Coding-Pages-搭建博客/" target="_blank" rel="noopener">Hexo+nexT主题搭建个人博客</a>中seo推广部分。</p><blockquote><p>参考<a href="http://ziyuan.baidu.com" target="_blank" rel="noopener">百度搜索资源平台</a></p></blockquote><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/index.html" target="_blank" rel="noopener">Hexo+nexT主题搭建个人博客</a></li><li><a href="https://www.jianshu.com/p/e7c58f57f60e" target="_blank" rel="noopener">hexo初探—让写作飞起来</a></li><li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a></li><li><a href="http://harleywang93.com/2017/03/07/Hexo-GitHub-Coding-Pages-搭建博客/" target="_blank" rel="noopener">Hexo + GitHub (Coding) Pages 搭建博客</a></li><li><a href="http://col.dog/2015/11/12/hello-world/" target="_blank" rel="noopener">基于 Hexo 和 GitHub Pages 搭建博客</a></li><li><a href="http://blog.csdn.net/xiaoliuge01/article/details/50997754" target="_blank" rel="noopener">Hexo搭建独立博客，托管到Github和Coding上教程</a></li><li><a href="http://blog.junyu.io/posts/0008-blog-seo.html" target="_blank" rel="noopener">让更多人看到你的博客</a></li><li><a href="http://blog.csdn.net/qq_21165007/article/details/72587999#git报错warning-lf-will-be-replaced-by-crlf问题" target="_blank" rel="noopener">在github上搭建个人网站</a></li><li><a href="https://www.zhihu.com/question/30898326" target="_blank" rel="noopener">如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？</a></li><li><a href="http://blog.niices.com/Hexo-Next-Algolia-Search/" target="_blank" rel="noopener">Hexo+Next主题集成Algolia搜索</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://jaelyn-blog-txcos-1253450780.cos.ap-guangzhou.myqcloud.com/blog/pageimage2018/hexo-head.jpeg&quot; alt=&quot;hexo-head&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文内容主要是个人在学习hexo和next中所遇到的一些“坑”和解决方法,而详细的流程网上有很多，在文章的结尾我会贴出我在学习中查找到的比较好的文章。&lt;/li&gt;
&lt;li&gt;注意本文不是详细操作步骤，如果需要详细步骤，请直接翻到文章结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客技术" scheme="http://jaelyn.coding.me/categories/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://jaelyn.coding.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>今天算是把我的博客网站建立起来了</title>
    <link href="http://jaelyn.coding.me/2017/12/27/hellomyblog/"/>
    <id>http://jaelyn.coding.me/2017/12/27/hellomyblog/</id>
    <published>2017-12-27T10:56:40.000Z</published>
    <updated>2017-12-31T10:02:47.282Z</updated>
    
    <content type="html"><![CDATA[<p>花了三天时间，终于搞定了，这也表示我的文章之旅要开始了。<br>enjoy it !</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了三天时间，终于搞定了，这也表示我的文章之旅要开始了。&lt;br&gt;enjoy it !&lt;/p&gt;
    
    </summary>
    
      <category term="diary" scheme="http://jaelyn.coding.me/categories/diary/"/>
    
    
      <category term="diary" scheme="http://jaelyn.coding.me/tags/diary/"/>
    
  </entry>
  
</feed>
